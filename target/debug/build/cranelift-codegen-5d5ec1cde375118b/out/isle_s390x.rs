// GENERATED BY ISLE. DO NOT EDIT!
//
// Generated automatically from the instruction-selection DSL code in:
// - src/prelude.isle
// - src/prelude_lower.isle
// - src/isa/s390x/inst.isle
// - src/isa/s390x/lower.isle
// - /Users/jiachongliu/My-Github-Project/rust-wasmchain/target/debug/build/cranelift-codegen-5d5ec1cde375118b/out/clif_lower.isle

use super::*; // Pulls in all external types.
use std::marker::PhantomData;

/// Context during lowering: an implementation of this trait
/// must be provided with all external constructors and extractors.
/// A mutable borrow is passed along through all lowering logic.
pub trait Context {
    fn unit(&mut self) -> Unit;
    fn value_type(&mut self, arg0: Value) -> Type;
    fn u32_nonnegative(&mut self, arg0: u32) -> Option<u32>;
    fn offset32(&mut self, arg0: Offset32) -> i32;
    fn u32_lteq(&mut self, arg0: u32, arg1: u32) -> Option<Unit>;
    fn u8_lteq(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_lt(&mut self, arg0: u8, arg1: u8) -> Option<Unit>;
    fn u8_as_i8(&mut self, arg0: u8) -> i8;
    fn u8_as_u32(&mut self, arg0: u8) -> u32;
    fn u8_as_u64(&mut self, arg0: u8) -> u64;
    fn u16_as_i16(&mut self, arg0: u16) -> i16;
    fn u16_as_u32(&mut self, arg0: u16) -> u32;
    fn u16_as_u64(&mut self, arg0: u16) -> u64;
    fn u64_as_u8(&mut self, arg0: u64) -> u8;
    fn u64_as_u16(&mut self, arg0: u64) -> u16;
    fn u64_as_i64(&mut self, arg0: u64) -> i64;
    fn u16_try_from_u64(&mut self, arg0: u64) -> Option<u16>;
    fn u32_try_from_u64(&mut self, arg0: u64) -> Option<u32>;
    fn i8_try_from_u64(&mut self, arg0: u64) -> Option<i8>;
    fn i16_try_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i32_try_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn u32_as_u64(&mut self, arg0: u32) -> u64;
    fn i32_as_i64(&mut self, arg0: i32) -> i64;
    fn i64_as_u64(&mut self, arg0: i64) -> u64;
    fn i64_neg(&mut self, arg0: i64) -> i64;
    fn i8_neg(&mut self, arg0: i8) -> i8;
    fn u128_as_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_as_u32(&mut self, arg0: u64) -> Option<u32>;
    fn u32_as_u16(&mut self, arg0: u32) -> Option<u16>;
    fn u64_as_i32(&mut self, arg0: u64) -> i32;
    fn u8_and(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shl(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_shr(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u8_sub(&mut self, arg0: u8, arg1: u8) -> u8;
    fn u32_add(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_sub(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_and(&mut self, arg0: u32, arg1: u32) -> u32;
    fn u32_shl(&mut self, arg0: u32, arg1: u32) -> u32;
    fn s32_add_fallible(&mut self, arg0: i32, arg1: i32) -> Option<i32>;
    fn u64_add(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sub(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_mul(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_sdiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_udiv(&mut self, arg0: u64, arg1: u64) -> Option<u64>;
    fn u64_and(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_or(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_xor(&mut self, arg0: u64, arg1: u64) -> u64;
    fn u64_shl(&mut self, arg0: u64, arg1: u64) -> u64;
    fn imm64_shl(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_ushr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn imm64_sshr(&mut self, arg0: Type, arg1: Imm64, arg2: Imm64) -> Imm64;
    fn u64_not(&mut self, arg0: u64) -> u64;
    fn u64_eq(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_le(&mut self, arg0: u64, arg1: u64) -> bool;
    fn u64_lt(&mut self, arg0: u64, arg1: u64) -> bool;
    fn i64_shr(&mut self, arg0: i64, arg1: i64) -> i64;
    fn i64_ctz(&mut self, arg0: i64) -> i64;
    fn i64_sextend_u64(&mut self, arg0: Type, arg1: u64) -> i64;
    fn i64_sextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> i64;
    fn u64_uextend_imm64(&mut self, arg0: Type, arg1: Imm64) -> u64;
    fn imm64_icmp(&mut self, arg0: Type, arg1: &IntCC, arg2: Imm64, arg3: Imm64) -> Imm64;
    fn u64_is_zero(&mut self, arg0: u64) -> bool;
    fn i64_is_zero(&mut self, arg0: i64) -> bool;
    fn u64_is_odd(&mut self, arg0: u64) -> bool;
    fn u128_replicated_u64(&mut self, arg0: u128) -> Option<u64>;
    fn u64_replicated_u32(&mut self, arg0: u64) -> Option<u64>;
    fn u32_replicated_u16(&mut self, arg0: u64) -> Option<u64>;
    fn u16_replicated_u8(&mut self, arg0: u64) -> Option<u8>;
    fn f16_min(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_max(&mut self, arg0: Ieee16, arg1: Ieee16) -> Option<Ieee16>;
    fn f16_neg(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_abs(&mut self, arg0: Ieee16) -> Ieee16;
    fn f16_copysign(&mut self, arg0: Ieee16, arg1: Ieee16) -> Ieee16;
    fn f32_add(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sub(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_mul(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_div(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_sqrt(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_ceil(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_floor(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_trunc(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_nearest(&mut self, arg0: Ieee32) -> Option<Ieee32>;
    fn f32_min(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_max(&mut self, arg0: Ieee32, arg1: Ieee32) -> Option<Ieee32>;
    fn f32_neg(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_abs(&mut self, arg0: Ieee32) -> Ieee32;
    fn f32_copysign(&mut self, arg0: Ieee32, arg1: Ieee32) -> Ieee32;
    fn f64_add(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sub(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_mul(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_div(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_sqrt(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_ceil(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_floor(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_trunc(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_nearest(&mut self, arg0: Ieee64) -> Option<Ieee64>;
    fn f64_min(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_max(&mut self, arg0: Ieee64, arg1: Ieee64) -> Option<Ieee64>;
    fn f64_neg(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_abs(&mut self, arg0: Ieee64) -> Ieee64;
    fn f64_copysign(&mut self, arg0: Ieee64, arg1: Ieee64) -> Ieee64;
    fn f128_min(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_max(&mut self, arg0: Ieee128, arg1: Ieee128) -> Option<Ieee128>;
    fn f128_neg(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_abs(&mut self, arg0: Ieee128) -> Ieee128;
    fn f128_copysign(&mut self, arg0: Ieee128, arg1: Ieee128) -> Ieee128;
    fn ty_umin(&mut self, arg0: Type) -> u64;
    fn ty_umax(&mut self, arg0: Type) -> u64;
    fn ty_smin(&mut self, arg0: Type) -> u64;
    fn ty_smax(&mut self, arg0: Type) -> u64;
    fn ty_bits(&mut self, arg0: Type) -> u8;
    fn ty_bits_u16(&mut self, arg0: Type) -> u16;
    fn ty_bits_u64(&mut self, arg0: Type) -> u64;
    fn ty_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_mask(&mut self, arg0: Type) -> u64;
    fn ty_lane_count(&mut self, arg0: Type) -> u64;
    fn ty_bytes(&mut self, arg0: Type) -> u16;
    fn lane_type(&mut self, arg0: Type) -> Type;
    fn ty_half_lanes(&mut self, arg0: Type) -> Option<Type>;
    fn ty_half_width(&mut self, arg0: Type) -> Option<Type>;
    fn ty_equal(&mut self, arg0: Type, arg1: Type) -> bool;
    fn mem_flags_trusted(&mut self) -> MemFlags;
    fn intcc_swap_args(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_complement(&mut self, arg0: &IntCC) -> IntCC;
    fn intcc_without_eq(&mut self, arg0: &IntCC) -> IntCC;
    fn floatcc_swap_args(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_complement(&mut self, arg0: &FloatCC) -> FloatCC;
    fn floatcc_unordered(&mut self, arg0: &FloatCC) -> bool;
    fn fits_in_16(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn lane_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn fits_in_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64_extract(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_scalar_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_32_or_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_8_or_16(&mut self, arg0: Type) -> Option<Type>;
    fn ty_16_or_32(&mut self, arg0: Type) -> Option<Type>;
    fn int_fits_in_32(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int_ref_16_to_64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar(&mut self, arg0: Type) -> Option<Type>;
    fn ty_scalar_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_float_or_vec(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vector_not_float(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_ctor(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec64(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn_vec128(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_vec128_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_addr64(&mut self, arg0: Type) -> Option<Type>;
    fn not_vec32x2(&mut self, arg0: Type) -> Option<Type>;
    fn not_i64x2(&mut self, arg0: Type) -> Option<()>;
    fn u8_from_uimm8(&mut self, arg0: Uimm8) -> u8;
    fn u64_from_bool(&mut self, arg0: bool) -> u64;
    fn u64_from_imm64(&mut self, arg0: Imm64) -> u64;
    fn nonzero_u64_from_imm64(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64_power_of_two(&mut self, arg0: Imm64) -> Option<u64>;
    fn imm64(&mut self, arg0: u64) -> Imm64;
    fn imm64_masked(&mut self, arg0: Type, arg1: u64) -> Imm64;
    fn u16_from_ieee16(&mut self, arg0: Ieee16) -> u16;
    fn u32_from_ieee32(&mut self, arg0: Ieee32) -> u32;
    fn u64_from_ieee64(&mut self, arg0: Ieee64) -> u64;
    fn multi_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn dynamic_lane(&mut self, arg0: Type) -> Option<(u32, u32)>;
    fn ty_dyn64_int(&mut self, arg0: Type) -> Option<Type>;
    fn ty_dyn128_int(&mut self, arg0: Type) -> Option<Type>;
    fn offset32_to_i32(&mut self, arg0: Offset32) -> i32;
    fn i32_to_offset32(&mut self, arg0: i32) -> Offset32;
    fn intcc_unsigned(&mut self, arg0: &IntCC) -> IntCC;
    fn signed_cond_code(&mut self, arg0: &IntCC) -> Option<IntCC>;
    fn trap_code_division_by_zero(&mut self) -> TrapCode;
    fn trap_code_integer_overflow(&mut self) -> TrapCode;
    fn trap_code_bad_conversion_to_integer(&mut self) -> TrapCode;
    fn range(&mut self, arg0: usize, arg1: usize) -> Range;
    fn range_view(&mut self, arg0: Range) -> RangeView;
    fn value_reg(&mut self, arg0: Reg) -> ValueRegs;
    fn writable_value_reg(&mut self, arg0: WritableReg) -> WritableValueRegs;
    fn value_regs(&mut self, arg0: Reg, arg1: Reg) -> ValueRegs;
    fn writable_value_regs(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableValueRegs;
    fn value_regs_invalid(&mut self) -> ValueRegs;
    fn output_none(&mut self) -> InstOutput;
    fn output(&mut self, arg0: ValueRegs) -> InstOutput;
    fn output_pair(&mut self, arg0: ValueRegs, arg1: ValueRegs) -> InstOutput;
    fn output_builder_new(&mut self) -> InstOutputBuilder;
    fn output_builder_push(&mut self, arg0: &InstOutputBuilder, arg1: ValueRegs) -> Unit;
    fn output_builder_finish(&mut self, arg0: &InstOutputBuilder) -> InstOutput;
    fn temp_writable_reg(&mut self, arg0: Type) -> WritableReg;
    fn is_valid_reg(&mut self, arg0: Reg) -> bool;
    fn invalid_reg(&mut self) -> Reg;
    fn mark_value_used(&mut self, arg0: Value) -> Unit;
    fn put_in_reg(&mut self, arg0: Value) -> Reg;
    fn put_in_regs(&mut self, arg0: Value) -> ValueRegs;
    fn ensure_in_vreg(&mut self, arg0: Reg, arg1: Type) -> Reg;
    fn value_regs_get(&mut self, arg0: ValueRegs, arg1: usize) -> Reg;
    fn value_regs_len(&mut self, arg0: ValueRegs) -> usize;
    fn preg_to_reg(&mut self, arg0: PReg) -> Reg;
    fn add_range_fact(&mut self, arg0: Reg, arg1: u16, arg2: u64, arg3: u64) -> Reg;
    fn single_target(&mut self, arg0: &MachLabelSlice) -> Option<MachLabel>;
    fn two_targets(&mut self, arg0: &MachLabelSlice) -> Option<(MachLabel, MachLabel)>;
    fn jump_table_targets(&mut self, arg0: &MachLabelSlice)
        -> Option<(MachLabel, BoxVecMachLabel)>;
    fn jump_table_size(&mut self, arg0: &BoxVecMachLabel) -> u32;
    fn value_list_slice(&mut self, arg0: ValueList) -> ValueSlice;
    fn value_slice_empty(&mut self, arg0: ValueSlice) -> Option<()>;
    fn value_slice_unwrap(&mut self, arg0: ValueSlice) -> Option<(Value, ValueSlice)>;
    fn value_slice_len(&mut self, arg0: ValueSlice) -> usize;
    fn value_slice_get(&mut self, arg0: ValueSlice, arg1: usize) -> Value;
    fn writable_reg_to_reg(&mut self, arg0: WritableReg) -> Reg;
    fn inst_results(&mut self, arg0: Inst) -> ValueSlice;
    fn value_is_unused(&mut self, arg0: Value) -> bool;
    fn first_result(&mut self, arg0: Inst) -> Option<Value>;
    fn inst_data(&mut self, arg0: Inst) -> InstructionData;
    fn def_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn i32_from_iconst(&mut self, arg0: Value) -> Option<i32>;
    fn i64_from_iconst(&mut self, arg0: Value) -> Option<i64>;
    fn zero_value(&mut self, arg0: Value) -> Option<Value>;
    fn is_sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn maybe_uextend(&mut self, arg0: Value) -> Option<Value>;
    fn uimm8(&mut self, arg0: Imm64) -> Option<u8>;
    fn emit(&mut self, arg0: &MInst) -> Unit;
    fn sink_inst(&mut self, arg0: Inst) -> Unit;
    fn emit_u64_le_const(&mut self, arg0: u64) -> VCodeConstant;
    fn emit_u128_le_const(&mut self, arg0: u128) -> VCodeConstant;
    fn const_to_vconst(&mut self, arg0: Constant) -> VCodeConstant;
    fn tls_model(&mut self, arg0: Type) -> TlsModel;
    fn tls_model_is_elf_gd(&mut self) -> Option<Unit>;
    fn tls_model_is_macho(&mut self) -> Option<Unit>;
    fn tls_model_is_coff(&mut self) -> Option<Unit>;
    fn preserve_frame_pointers(&mut self) -> Option<Unit>;
    fn stack_switch_model(&mut self) -> Option<StackSwitchModel>;
    fn box_external_name(&mut self, arg0: ExternalName) -> BoxExternalName;
    fn func_ref_data(&mut self, arg0: FuncRef) -> (SigRef, ExternalName, RelocDistance);
    fn symbol_value_data(
        &mut self,
        arg0: GlobalValue,
    ) -> Option<(ExternalName, RelocDistance, i64)>;
    fn reloc_distance_near(&mut self, arg0: RelocDistance) -> Option<()>;
    fn vec_mask_from_immediate(&mut self, arg0: Immediate) -> Option<VecMask>;
    fn u128_from_immediate(&mut self, arg0: Immediate) -> Option<u128>;
    fn vconst_from_immediate(&mut self, arg0: Immediate) -> Option<VCodeConstant>;
    fn u128_from_constant(&mut self, arg0: Constant) -> Option<u128>;
    fn u64_from_constant(&mut self, arg0: Constant) -> Option<u64>;
    fn shuffle64_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8)>;
    fn shuffle32_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8)>;
    fn shuffle16_from_imm(&mut self, arg0: Immediate) -> Option<(u8, u8, u8, u8, u8, u8, u8, u8)>;
    fn only_writable_reg(&mut self, arg0: WritableValueRegs) -> Option<WritableReg>;
    fn writable_regs_get(&mut self, arg0: WritableValueRegs, arg1: usize) -> WritableReg;
    fn abi_num_args(&mut self, arg0: Sig) -> usize;
    fn abi_get_arg(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_num_rets(&mut self, arg0: Sig) -> usize;
    fn abi_get_ret(&mut self, arg0: Sig, arg1: usize) -> ABIArg;
    fn abi_ret_arg(&mut self, arg0: Sig) -> Option<ABIArg>;
    fn abi_no_ret_arg(&mut self, arg0: Sig) -> Option<()>;
    fn abi_sized_stack_arg_space(&mut self, arg0: Sig) -> i64;
    fn abi_sized_stack_ret_space(&mut self, arg0: Sig) -> i64;
    fn abi_unwrap_ret_area_ptr(&mut self) -> Reg;
    fn abi_stackslot_addr(&mut self, arg0: WritableReg, arg1: StackSlot, arg2: Offset32) -> MInst;
    fn abi_dynamic_stackslot_addr(&mut self, arg0: WritableReg, arg1: DynamicStackSlot) -> MInst;
    fn abi_arg_only_slot(&mut self, arg0: &ABIArg) -> Option<ABIArgSlot>;
    fn abi_arg_implicit_pointer(&mut self, arg0: &ABIArg) -> Option<(ABIArgSlot, i64, Type)>;
    fn real_reg_to_reg(&mut self, arg0: RealReg) -> Reg;
    fn real_reg_to_writable_reg(&mut self, arg0: RealReg) -> WritableReg;
    fn gen_move(&mut self, arg0: Type, arg1: WritableReg, arg2: Reg) -> MInst;
    fn gen_return(&mut self, arg0: ValueSlice) -> Unit;
    fn gen_return_call(
        &mut self,
        arg0: SigRef,
        arg1: ExternalName,
        arg2: RelocDistance,
        arg3: ValueSlice,
    ) -> InstOutput;
    fn gen_return_call_indirect(
        &mut self,
        arg0: SigRef,
        arg1: Value,
        arg2: ValueSlice,
    ) -> InstOutput;
    fn safe_divisor_from_imm64(&mut self, arg0: Type, arg1: Imm64) -> Option<u64>;
    fn box_symbol_reloc(&mut self, arg0: &SymbolReloc) -> BoxSymbolReloc;
    fn mie2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn mie2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_enabled(&mut self, arg0: Type) -> Option<()>;
    fn vxrs_ext2_disabled(&mut self, arg0: Type) -> Option<()>;
    fn lane_order(&mut self) -> LaneOrder;
    fn be_lane_idx(&mut self, arg0: Type, arg1: u8) -> u8;
    fn be_vec_const(&mut self, arg0: Type, arg1: u128) -> u128;
    fn writable_gpr(&mut self, arg0: u8) -> WritableReg;
    fn zero_reg(&mut self) -> Reg;
    fn gpr32_ty(&mut self, arg0: Type) -> Option<Type>;
    fn gpr64_ty(&mut self, arg0: Type) -> Option<Type>;
    fn vr128_ty(&mut self, arg0: Type) -> Option<Type>;
    fn uimm32shifted(&mut self, arg0: u32, arg1: u8) -> UImm32Shifted;
    fn uimm16shifted(&mut self, arg0: u16, arg1: u8) -> UImm16Shifted;
    fn i64_nonequal(&mut self, arg0: i64, arg1: i64) -> Option<i64>;
    fn u8_as_u16(&mut self, arg0: u8) -> u16;
    fn u64_truncate_to_u32(&mut self, arg0: u64) -> u32;
    fn u64_as_i16(&mut self, arg0: u64) -> i16;
    fn u64_pair_split(&mut self, arg0: u128) -> (u64, u64);
    fn u64_pair_concat(&mut self, arg0: u64, arg1: u64) -> u128;
    fn u32_pair_split(&mut self, arg0: u64) -> (u32, u32);
    fn u32_pair_concat(&mut self, arg0: u32, arg1: u32) -> u64;
    fn u16_pair_split(&mut self, arg0: u32) -> (u16, u16);
    fn u16_pair_concat(&mut self, arg0: u16, arg1: u16) -> u32;
    fn u8_pair_split(&mut self, arg0: u16) -> (u8, u8);
    fn u8_pair_concat(&mut self, arg0: u8, arg1: u8) -> u16;
    fn lane_byte_mask(&mut self, arg0: Type, arg1: u8) -> u16;
    fn shuffle_mask_from_u128(&mut self, arg0: u128) -> (u128, u16);
    fn u64_nonzero_hipart(&mut self, arg0: u64) -> Option<u64>;
    fn u64_nonzero_lopart(&mut self, arg0: u64) -> Option<u64>;
    fn i32_from_u64(&mut self, arg0: u64) -> Option<i32>;
    fn i16_from_u64(&mut self, arg0: u64) -> Option<i16>;
    fn i16_from_u32(&mut self, arg0: u32) -> Option<i16>;
    fn uimm32shifted_from_u64(&mut self, arg0: u64) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_u64(&mut self, arg0: u64) -> Option<UImm16Shifted>;
    fn u64_from_value(&mut self, arg0: Value) -> Option<u64>;
    fn u32_from_value(&mut self, arg0: Value) -> Option<u32>;
    fn u8_from_value(&mut self, arg0: Value) -> Option<u8>;
    fn u64_from_signed_value(&mut self, arg0: Value) -> Option<u64>;
    fn u64_from_inverted_value(&mut self, arg0: Value) -> Option<u64>;
    fn i64_from_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_value(&mut self, arg0: Value) -> Option<i16>;
    fn i16_from_swapped_value(&mut self, arg0: Value) -> Option<i16>;
    fn i64_from_negated_value(&mut self, arg0: Value) -> Option<i64>;
    fn i32_from_negated_value(&mut self, arg0: Value) -> Option<i32>;
    fn i16_from_negated_value(&mut self, arg0: Value) -> Option<i16>;
    fn uimm16shifted_from_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn uimm16shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm16Shifted>;
    fn uimm32shifted_from_inverted_value(&mut self, arg0: Value) -> Option<UImm32Shifted>;
    fn len_minus_one(&mut self, arg0: u64) -> Option<u8>;
    fn mask_amt_imm(&mut self, arg0: Type, arg1: i64) -> u8;
    fn mask_as_cond(&mut self, arg0: u8) -> Cond;
    fn intcc_as_cond(&mut self, arg0: &IntCC) -> Cond;
    fn floatcc_as_cond(&mut self, arg0: &FloatCC) -> Cond;
    fn invert_cond(&mut self, arg0: &Cond) -> Cond;
    fn signed(&mut self, arg0: &IntCC) -> Option<()>;
    fn unsigned(&mut self, arg0: &IntCC) -> Option<()>;
    fn zero_offset(&mut self) -> Offset32;
    fn i64_from_offset(&mut self, arg0: Offset32) -> i64;
    fn littleendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn bigendian(&mut self, arg0: MemFlags) -> Option<()>;
    fn memflags_trusted(&mut self) -> MemFlags;
    fn memarg_flags(&mut self, arg0: &MemArg) -> MemFlags;
    fn memarg_reg_plus_reg(&mut self, arg0: Reg, arg1: Reg, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_reg_plus_off(&mut self, arg0: Reg, arg1: i64, arg2: u8, arg3: MemFlags) -> MemArg;
    fn memarg_symbol(&mut self, arg0: ExternalName, arg1: i32, arg2: MemFlags) -> MemArg;
    fn memarg_got(&mut self) -> MemArg;
    fn memarg_offset(&mut self, arg0: &MemArg, arg1: i64) -> MemArg;
    fn memarg_symbol_offset_sum(&mut self, arg0: i64, arg1: i64) -> Option<i32>;
    fn memarg_frame_pointer_offset(&mut self) -> MemArg;
    fn memarg_return_address_offset(&mut self) -> MemArg;
    fn memarg_pair_from_memarg(&mut self, arg0: &MemArg) -> Option<MemArgPair>;
    fn memarg_pair_from_reg(&mut self, arg0: Reg, arg1: MemFlags) -> MemArgPair;
    fn sinkable_inst(&mut self, arg0: Value) -> Option<Inst>;
    fn writable_regpair(&mut self, arg0: WritableReg, arg1: WritableReg) -> WritableRegPair;
    fn writable_regpair_hi(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn writable_regpair_lo(&mut self, arg0: WritableRegPair) -> WritableReg;
    fn regpair(&mut self, arg0: Reg, arg1: Reg) -> RegPair;
    fn regpair_hi(&mut self, arg0: RegPair) -> Reg;
    fn regpair_lo(&mut self, arg0: RegPair) -> Reg;
    fn inst_builder_new(&mut self) -> VecMInstBuilder;
    fn inst_builder_push(&mut self, arg0: &VecMInstBuilder, arg1: &MInst) -> Unit;
    fn inst_builder_finish(&mut self, arg0: &VecMInstBuilder) -> VecMInst;
    fn real_reg(&mut self, arg0: WritableReg) -> Option<WritableReg>;
    fn same_reg(&mut self, arg0: WritableReg, arg1: Reg) -> Option<Reg>;
    fn preg_stack(&mut self) -> PReg;
    fn preg_gpr_0(&mut self) -> PReg;
    fn args_builder_new(&mut self) -> CallArgListBuilder;
    fn args_builder_push(&mut self, arg0: &CallArgListBuilder, arg1: Reg, arg2: RealReg) -> Unit;
    fn args_builder_finish(&mut self, arg0: &CallArgListBuilder) -> CallArgList;
    fn defs_init(&mut self, arg0: Sig) -> CallRetList;
    fn defs_lookup(&mut self, arg0: &CallRetList, arg1: RealReg) -> Reg;
    fn abi_sig(&mut self, arg0: SigRef) -> Sig;
    fn abi_first_ret(&mut self, arg0: SigRef, arg1: Sig) -> usize;
    fn abi_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
        arg3: &CallRetList,
    ) -> BoxCallInfo;
    fn abi_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
        arg3: &CallRetList,
    ) -> BoxCallIndInfo;
    fn abi_return_call_info(
        &mut self,
        arg0: Sig,
        arg1: ExternalName,
        arg2: &CallArgList,
    ) -> BoxReturnCallInfo;
    fn abi_return_call_ind_info(
        &mut self,
        arg0: Sig,
        arg1: Reg,
        arg2: &CallArgList,
    ) -> BoxReturnCallIndInfo;
    fn abi_call_stack_args(&mut self, arg0: Sig) -> MemArg;
    fn abi_call_stack_rets(&mut self, arg0: Sig) -> MemArg;
    fn abi_return_call_stack_args(&mut self, arg0: Sig) -> MemArg;
    fn abi_lane_order(&mut self, arg0: Sig) -> LaneOrder;
    fn lib_call_info_memcpy(&mut self, arg0: Reg, arg1: Reg, arg2: Reg) -> BoxCallInfo;
    fn fcvt_to_uint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb32(&mut self) -> u64;
    fn fcvt_to_uint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_uint_lb64(&mut self) -> u64;
    fn fcvt_to_sint_ub32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb32(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_ub64(&mut self, arg0: u8) -> u64;
    fn fcvt_to_sint_lb64(&mut self, arg0: u8) -> u64;
    fn abi_for_elf_tls_get_offset(&mut self) -> Unit;
    fn unpack_value_array_2(&mut self, arg0: &ValueArray2) -> (Value, Value);
    fn pack_value_array_2(&mut self, arg0: Value, arg1: Value) -> ValueArray2;
    fn unpack_value_array_3(&mut self, arg0: &ValueArray3) -> (Value, Value, Value);
    fn pack_value_array_3(&mut self, arg0: Value, arg1: Value, arg2: Value) -> ValueArray3;
    fn unpack_block_array_2(&mut self, arg0: &BlockArray2) -> (BlockCall, BlockCall);
    fn pack_block_array_2(&mut self, arg0: BlockCall, arg1: BlockCall) -> BlockArray2;
}

pub trait ContextIter {
    type Context;
    type Output;
    fn next(&mut self, ctx: &mut Self::Context) -> Option<Self::Output>;
    fn size_hint(&self) -> (usize, Option<usize>) {
        (0, None)
    }
}

pub trait IntoContextIter {
    type Context;
    type Output;
    type IntoIter: ContextIter<Context = Self::Context, Output = Self::Output>;
    fn into_context_iter(self) -> Self::IntoIter;
}

pub trait Length {
    fn len(&self) -> usize;
}

impl<T> Length for std::vec::Vec<T> {
    fn len(&self) -> usize {
        std::vec::Vec::len(self)
    }
}

pub struct ContextIterWrapper<I, C> {
    iter: I,
    _ctx: std::marker::PhantomData<C>,
}
impl<I: Default, C> Default for ContextIterWrapper<I, C> {
    fn default() -> Self {
        ContextIterWrapper {
            iter: I::default(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I, C> std::ops::Deref for ContextIterWrapper<I, C> {
    type Target = I;
    fn deref(&self) -> &I {
        &self.iter
    }
}
impl<I, C> std::ops::DerefMut for ContextIterWrapper<I, C> {
    fn deref_mut(&mut self) -> &mut I {
        &mut self.iter
    }
}
impl<I: Iterator, C: Context> From<I> for ContextIterWrapper<I, C> {
    fn from(iter: I) -> Self {
        Self {
            iter,
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<I: Iterator, C: Context> ContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    fn next(&mut self, _ctx: &mut Self::Context) -> Option<Self::Output> {
        self.iter.next()
    }
    fn size_hint(&self) -> (usize, Option<usize>) {
        self.iter.size_hint()
    }
}
impl<I: IntoIterator, C: Context> IntoContextIter for ContextIterWrapper<I, C> {
    type Context = C;
    type Output = I::Item;
    type IntoIter = ContextIterWrapper<I::IntoIter, C>;
    fn into_context_iter(self) -> Self::IntoIter {
        ContextIterWrapper {
            iter: self.iter.into_iter(),
            _ctx: std::marker::PhantomData,
        }
    }
}
impl<T, E: Extend<T>, C> Extend<T> for ContextIterWrapper<E, C> {
    fn extend<I: IntoIterator<Item = T>>(&mut self, iter: I) {
        self.iter.extend(iter);
    }
}
impl<L: Length, C> Length for ContextIterWrapper<L, C> {
    fn len(&self) -> usize {
        self.iter.len()
    }
}

/// Internal type MultiReg: defined at src/prelude_lower.isle line 20.
#[derive(Clone, Debug)]
pub enum MultiReg {
    Empty,
    One { a: Reg },
    Two { a: Reg, b: Reg },
    Three { a: Reg, b: Reg, c: Reg },
    Four { a: Reg, b: Reg, c: Reg, d: Reg },
}

/// Internal type SideEffectNoResult: defined at src/prelude_lower.isle line 388.
#[derive(Clone, Debug)]
pub enum SideEffectNoResult {
    Inst {
        inst: MInst,
    },
    Inst2 {
        inst1: MInst,
        inst2: MInst,
    },
    Inst3 {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
    },
}

/// Internal type ProducesFlags: defined at src/prelude_lower.isle line 434.
#[derive(Clone, Debug)]
pub enum ProducesFlags {
    AlreadyExistingFlags,
    ProducesFlagsSideEffect { inst: MInst },
    ProducesFlagsTwiceSideEffect { inst1: MInst, inst2: MInst },
    ProducesFlagsReturnsReg { inst: MInst, result: Reg },
    ProducesFlagsReturnsResultWithConsumer { inst: MInst, result: Reg },
}

/// Internal type ConsumesAndProducesFlags: defined at src/prelude_lower.isle line 453.
#[derive(Clone, Debug)]
pub enum ConsumesAndProducesFlags {
    SideEffect { inst: MInst },
    ReturnsReg { inst: MInst, result: Reg },
}

/// Internal type ConsumesFlags: defined at src/prelude_lower.isle line 461.
#[derive(Clone, Debug)]
pub enum ConsumesFlags {
    ConsumesFlagsSideEffect {
        inst: MInst,
    },
    ConsumesFlagsSideEffect2 {
        inst1: MInst,
        inst2: MInst,
    },
    ConsumesFlagsReturnsResultWithProducer {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsReturnsReg {
        inst: MInst,
        result: Reg,
    },
    ConsumesFlagsTwiceReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        result: ValueRegs,
    },
    ConsumesFlagsFourTimesReturnsValueRegs {
        inst1: MInst,
        inst2: MInst,
        inst3: MInst,
        inst4: MInst,
        result: ValueRegs,
    },
}

/// Internal type MInst: defined at src/isa/s390x/inst.isle line 1.
#[derive(Clone, Debug)]
pub enum MInst {
    Nop0,
    Nop2,
    AluRRR {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    AluRRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        imm: i16,
    },
    AluRR {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        rm: Reg,
    },
    AluRX {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
    },
    AluRSImm16 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
    },
    AluRSImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: i32,
    },
    AluRUImm32 {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: u32,
    },
    AluRUImm16Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    AluRUImm32Shifted {
        alu_op: ALUOp,
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    SMulWide {
        rd: WritableRegPair,
        rn: Reg,
        rm: Reg,
    },
    UMulWide {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod32 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    SDivMod64 {
        rd: WritableRegPair,
        ri: Reg,
        rn: Reg,
    },
    UDivMod32 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    UDivMod64 {
        rd: WritableRegPair,
        ri: RegPair,
        rn: Reg,
    },
    Flogr {
        rd: WritableRegPair,
        rn: Reg,
    },
    ShiftRR {
        shift_op: ShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    RxSBG {
        op: RxSBGOp,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    RxSBGTest {
        op: RxSBGOp,
        rd: Reg,
        rn: Reg,
        start_bit: u8,
        end_bit: u8,
        rotate_amt: i8,
    },
    UnaryRR {
        op: UnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    CmpRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
    },
    CmpRX {
        op: CmpOp,
        rn: Reg,
        mem: MemArg,
    },
    CmpRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
    },
    CmpRSImm32 {
        op: CmpOp,
        rn: Reg,
        imm: i32,
    },
    CmpRUImm32 {
        op: CmpOp,
        rn: Reg,
        imm: u32,
    },
    CmpTrapRR {
        op: CmpOp,
        rn: Reg,
        rm: Reg,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRSImm16 {
        op: CmpOp,
        rn: Reg,
        imm: i16,
        cond: Cond,
        trap_code: TrapCode,
    },
    CmpTrapRUImm16 {
        op: CmpOp,
        rn: Reg,
        imm: u16,
        cond: Cond,
        trap_code: TrapCode,
    },
    AtomicRmw {
        alu_op: ALUOp,
        rd: WritableReg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas32 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    AtomicCas64 {
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        mem: MemArg,
    },
    Fence,
    Load32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load32SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt8 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt16 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64ZExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    Load64SExt32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev16 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev32 {
        rd: WritableReg,
        mem: MemArg,
    },
    LoadRev64 {
        rd: WritableReg,
        mem: MemArg,
    },
    Store8 {
        rd: Reg,
        mem: MemArg,
    },
    Store16 {
        rd: Reg,
        mem: MemArg,
    },
    Store32 {
        rd: Reg,
        mem: MemArg,
    },
    Store64 {
        rd: Reg,
        mem: MemArg,
    },
    StoreImm8 {
        imm: u8,
        mem: MemArg,
    },
    StoreImm16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm32SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreImm64SExt16 {
        imm: i16,
        mem: MemArg,
    },
    StoreRev16 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev32 {
        rd: Reg,
        mem: MemArg,
    },
    StoreRev64 {
        rd: Reg,
        mem: MemArg,
    },
    Mvc {
        dst: MemArgPair,
        src: MemArgPair,
        len_minus_one: u8,
    },
    LoadMultiple64 {
        rt: WritableReg,
        rt2: WritableReg,
        mem: MemArg,
    },
    StoreMultiple64 {
        rt: Reg,
        rt2: Reg,
        mem: MemArg,
    },
    Mov32 {
        rd: WritableReg,
        rm: Reg,
    },
    Mov64 {
        rd: WritableReg,
        rm: Reg,
    },
    MovPReg {
        rd: WritableReg,
        rm: PReg,
    },
    Mov32Imm {
        rd: WritableReg,
        imm: u32,
    },
    Mov32SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm16 {
        rd: WritableReg,
        imm: i16,
    },
    Mov64SImm32 {
        rd: WritableReg,
        imm: i32,
    },
    Mov64UImm16Shifted {
        rd: WritableReg,
        imm: UImm16Shifted,
    },
    Mov64UImm32Shifted {
        rd: WritableReg,
        imm: UImm32Shifted,
    },
    Insert64UImm16Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm16Shifted,
    },
    Insert64UImm32Shifted {
        rd: WritableReg,
        ri: Reg,
        imm: UImm32Shifted,
    },
    LoadAR {
        rd: WritableReg,
        ar: u8,
    },
    InsertAR {
        rd: WritableReg,
        ri: Reg,
        ar: u8,
    },
    Extend {
        rd: WritableReg,
        rn: Reg,
        signed: bool,
        from_bits: u8,
        to_bits: u8,
    },
    CMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    CMov32SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    CMov64SImm16 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        imm: i16,
    },
    FpuMove32 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuMove64 {
        rd: WritableReg,
        rn: Reg,
    },
    FpuCMov32 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuCMov64 {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    FpuRR {
        fpu_op: FPUOp1,
        rd: WritableReg,
        rn: Reg,
    },
    FpuRRR {
        fpu_op: FPUOp2,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    FpuRRRR {
        fpu_op: FPUOp3,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    FpuRound {
        op: FpuRoundOp,
        mode: FpuRoundMode,
        rd: WritableReg,
        rn: Reg,
    },
    FpuCmp32 {
        rn: Reg,
        rm: Reg,
    },
    FpuCmp64 {
        rn: Reg,
        rm: Reg,
    },
    LoadFpuConst32 {
        rd: WritableReg,
        const_data: u32,
    },
    LoadFpuConst64 {
        rd: WritableReg,
        const_data: u64,
    },
    VecRRR {
        op: VecBinaryOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecRR {
        op: VecUnaryOp,
        rd: WritableReg,
        rn: Reg,
    },
    VecShiftRR {
        shift_op: VecShiftOp,
        rd: WritableReg,
        rn: Reg,
        shift_imm: u8,
        shift_reg: Reg,
    },
    VecSelect {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermute {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        ra: Reg,
    },
    VecPermuteDWImm {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
        idx1: u8,
        idx2: u8,
    },
    VecIntCmp {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecIntCmpS {
        op: VecIntCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmp {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecFloatCmpS {
        op: VecFloatCmpOp,
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128SCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecInt128UCmpHi {
        tmp: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoad {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadRev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadByte64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt16Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt32Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadElt64Rev {
        rd: WritableReg,
        mem: MemArg,
    },
    VecStore {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreRev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreByte64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt16Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt32Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecStoreElt64Rev {
        rd: Reg,
        mem: MemArg,
    },
    VecLoadReplicate {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecLoadReplicateRev {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
    },
    VecMov {
        rd: WritableReg,
        rn: Reg,
    },
    VecCMov {
        rd: WritableReg,
        cond: Cond,
        ri: Reg,
        rm: Reg,
    },
    MovToVec128 {
        rd: WritableReg,
        rn: Reg,
        rm: Reg,
    },
    VecLoadConst {
        rd: WritableReg,
        const_data: u128,
    },
    VecLoadConstReplicate {
        size: u32,
        rd: WritableReg,
        const_data: u64,
    },
    VecImmByteMask {
        rd: WritableReg,
        mask: u16,
    },
    VecImmBitMask {
        size: u32,
        rd: WritableReg,
        start_bit: u8,
        end_bit: u8,
    },
    VecImmReplicate {
        size: u32,
        rd: WritableReg,
        imm: i16,
    },
    VecLoadLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRev {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecLoadLaneRevUndef {
        size: u32,
        rd: WritableReg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLane {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecStoreLaneRev {
        size: u32,
        rd: Reg,
        mem: MemArg,
        lane_imm: u8,
    },
    VecInsertLane {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneUndef {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecExtractLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
        lane_reg: Reg,
    },
    VecInsertLaneImm {
        size: u32,
        rd: WritableReg,
        ri: Reg,
        imm: i16,
        lane_imm: u8,
    },
    VecReplicateLane {
        size: u32,
        rd: WritableReg,
        rn: Reg,
        lane_imm: u8,
    },
    AllocateArgs {
        size: u32,
    },
    Call {
        link: WritableReg,
        info: BoxCallInfo,
    },
    CallInd {
        link: WritableReg,
        info: BoxCallIndInfo,
    },
    ReturnCall {
        info: BoxReturnCallInfo,
    },
    ReturnCallInd {
        info: BoxReturnCallIndInfo,
    },
    Args {
        args: VecArgPair,
    },
    Rets {
        rets: VecRetPair,
    },
    Ret {
        link: Reg,
    },
    Jump {
        dest: MachLabel,
    },
    CondBr {
        taken: MachLabel,
        not_taken: MachLabel,
        cond: Cond,
    },
    TrapIf {
        cond: Cond,
        trap_code: TrapCode,
    },
    OneWayCondBr {
        target: MachLabel,
        cond: Cond,
    },
    IndirectBr {
        rn: Reg,
        targets: VecMachLabel,
    },
    Debugtrap,
    Trap {
        trap_code: TrapCode,
    },
    JTSequence {
        ridx: Reg,
        targets: BoxVecMachLabel,
    },
    LoadSymbolReloc {
        rd: WritableReg,
        symbol_reloc: BoxSymbolReloc,
    },
    LoadAddr {
        rd: WritableReg,
        mem: MemArg,
    },
    Loop {
        body: VecMInst,
        cond: Cond,
    },
    CondBreak {
        cond: Cond,
    },
    DummyUse {
        reg: Reg,
    },
    Unwind {
        inst: UnwindInst,
    },
    ElfTlsGetOffset {
        tls_offset: WritableReg,
        got: Reg,
        got_offset: Reg,
        link: WritableReg,
        symbol: BoxSymbolReloc,
    },
}

/// Internal type SymbolReloc: defined at src/isa/s390x/inst.isle line 1037.
#[derive(Clone, Debug)]
pub enum SymbolReloc {
    Absolute { name: ExternalName, offset: i64 },
    TlsGd { name: ExternalName },
}

/// Internal type ALUOp: defined at src/isa/s390x/inst.isle line 1054.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ALUOp {
    Add32,
    Add32Ext16,
    Add64,
    Add64Ext16,
    Add64Ext32,
    AddLogical32,
    AddLogical64,
    AddLogical64Ext32,
    Sub32,
    Sub32Ext16,
    Sub64,
    Sub64Ext16,
    Sub64Ext32,
    SubLogical32,
    SubLogical64,
    SubLogical64Ext32,
    Mul32,
    Mul32Ext16,
    Mul64,
    Mul64Ext16,
    Mul64Ext32,
    And32,
    And64,
    Orr32,
    Orr64,
    Xor32,
    Xor64,
    NotAnd32,
    NotAnd64,
    NotOrr32,
    NotOrr64,
    NotXor32,
    NotXor64,
    AndNot32,
    AndNot64,
    OrrNot32,
    OrrNot64,
}

/// Internal type UnaryOp: defined at src/isa/s390x/inst.isle line 1101.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum UnaryOp {
    Abs32,
    Abs64,
    Abs64Ext32,
    Neg32,
    Neg64,
    Neg64Ext32,
    PopcntByte,
    PopcntReg,
    BSwap32,
    BSwap64,
}

/// Internal type ShiftOp: defined at src/isa/s390x/inst.isle line 1116.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum ShiftOp {
    RotL32,
    RotL64,
    LShL32,
    LShL64,
    LShR32,
    LShR64,
    AShR32,
    AShR64,
}

/// Internal type RxSBGOp: defined at src/isa/s390x/inst.isle line 1129.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum RxSBGOp {
    Insert,
    And,
    Or,
    Xor,
}

/// Internal type CmpOp: defined at src/isa/s390x/inst.isle line 1138.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum CmpOp {
    CmpS32,
    CmpS32Ext16,
    CmpS64,
    CmpS64Ext16,
    CmpS64Ext32,
    CmpL32,
    CmpL32Ext16,
    CmpL64,
    CmpL64Ext16,
    CmpL64Ext32,
}

/// Internal type VecBinaryOp: defined at src/isa/s390x/inst.isle line 1153.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecBinaryOp {
    Add8x16,
    Add16x8,
    Add32x4,
    Add64x2,
    Add128,
    Sub8x16,
    Sub16x8,
    Sub32x4,
    Sub64x2,
    Sub128,
    Mul8x16,
    Mul16x8,
    Mul32x4,
    UMulHi8x16,
    UMulHi16x8,
    UMulHi32x4,
    SMulHi8x16,
    SMulHi16x8,
    SMulHi32x4,
    UMulEven8x16,
    UMulEven16x8,
    UMulEven32x4,
    SMulEven8x16,
    SMulEven16x8,
    SMulEven32x4,
    UMulOdd8x16,
    UMulOdd16x8,
    UMulOdd32x4,
    SMulOdd8x16,
    SMulOdd16x8,
    SMulOdd32x4,
    UMax8x16,
    UMax16x8,
    UMax32x4,
    UMax64x2,
    SMax8x16,
    SMax16x8,
    SMax32x4,
    SMax64x2,
    UMin8x16,
    UMin16x8,
    UMin32x4,
    UMin64x2,
    SMin8x16,
    SMin16x8,
    SMin32x4,
    SMin64x2,
    UAvg8x16,
    UAvg16x8,
    UAvg32x4,
    UAvg64x2,
    SAvg8x16,
    SAvg16x8,
    SAvg32x4,
    SAvg64x2,
    And128,
    Orr128,
    Xor128,
    NotAnd128,
    NotOrr128,
    NotXor128,
    AndNot128,
    OrrNot128,
    BitPermute128,
    LShLByByte128,
    LShRByByte128,
    AShRByByte128,
    LShLByBit128,
    LShRByBit128,
    AShRByBit128,
    Pack16x8,
    Pack32x4,
    Pack64x2,
    PackUSat16x8,
    PackUSat32x4,
    PackUSat64x2,
    PackSSat16x8,
    PackSSat32x4,
    PackSSat64x2,
    MergeLow8x16,
    MergeLow16x8,
    MergeLow32x4,
    MergeLow64x2,
    MergeHigh8x16,
    MergeHigh16x8,
    MergeHigh32x4,
    MergeHigh64x2,
}

/// Internal type VecUnaryOp: defined at src/isa/s390x/inst.isle line 1255.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecUnaryOp {
    Abs8x16,
    Abs16x8,
    Abs32x4,
    Abs64x2,
    Neg8x16,
    Neg16x8,
    Neg32x4,
    Neg64x2,
    Popcnt8x16,
    Popcnt16x8,
    Popcnt32x4,
    Popcnt64x2,
    Clz8x16,
    Clz16x8,
    Clz32x4,
    Clz64x2,
    Ctz8x16,
    Ctz16x8,
    Ctz32x4,
    Ctz64x2,
    UnpackULow8x16,
    UnpackULow16x8,
    UnpackULow32x4,
    UnpackUHigh8x16,
    UnpackUHigh16x8,
    UnpackUHigh32x4,
    UnpackSLow8x16,
    UnpackSLow16x8,
    UnpackSLow32x4,
    UnpackSHigh8x16,
    UnpackSHigh16x8,
    UnpackSHigh32x4,
}

/// Internal type VecShiftOp: defined at src/isa/s390x/inst.isle line 1296.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecShiftOp {
    RotL8x16,
    RotL16x8,
    RotL32x4,
    RotL64x2,
    LShL8x16,
    LShL16x8,
    LShL32x4,
    LShL64x2,
    LShR8x16,
    LShR16x8,
    LShR32x4,
    LShR64x2,
    AShR8x16,
    AShR16x8,
    AShR32x4,
    AShR64x2,
}

/// Internal type VecIntCmpOp: defined at src/isa/s390x/inst.isle line 1317.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecIntCmpOp {
    CmpEq8x16,
    CmpEq16x8,
    CmpEq32x4,
    CmpEq64x2,
    SCmpHi8x16,
    SCmpHi16x8,
    SCmpHi32x4,
    SCmpHi64x2,
    UCmpHi8x16,
    UCmpHi16x8,
    UCmpHi32x4,
    UCmpHi64x2,
}

/// Internal type VecFloatCmpOp: defined at src/isa/s390x/inst.isle line 1334.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum VecFloatCmpOp {
    CmpEq32x4,
    CmpEq64x2,
    CmpHi32x4,
    CmpHi64x2,
    CmpHiEq32x4,
    CmpHiEq64x2,
}

/// Internal type FPUOp1: defined at src/isa/s390x/inst.isle line 1345.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp1 {
    Abs32,
    Abs64,
    Abs32x4,
    Abs64x2,
    Neg32,
    Neg64,
    Neg32x4,
    Neg64x2,
    NegAbs32,
    NegAbs64,
    NegAbs32x4,
    NegAbs64x2,
    Sqrt32,
    Sqrt64,
    Sqrt32x4,
    Sqrt64x2,
    Cvt32To64,
    Cvt32x4To64x2,
}

/// Internal type FPUOp2: defined at src/isa/s390x/inst.isle line 1368.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp2 {
    Add32,
    Add64,
    Add32x4,
    Add64x2,
    Sub32,
    Sub64,
    Sub32x4,
    Sub64x2,
    Mul32,
    Mul64,
    Mul32x4,
    Mul64x2,
    Div32,
    Div64,
    Div32x4,
    Div64x2,
    Max32,
    Max64,
    Max32x4,
    Max64x2,
    Min32,
    Min64,
    Min32x4,
    Min64x2,
    MaxPseudo32,
    MaxPseudo64,
    MaxPseudo32x4,
    MaxPseudo64x2,
    MinPseudo32,
    MinPseudo64,
    MinPseudo32x4,
    MinPseudo64x2,
}

/// Internal type FPUOp3: defined at src/isa/s390x/inst.isle line 1405.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FPUOp3 {
    MAdd32,
    MAdd64,
    MAdd32x4,
    MAdd64x2,
    MSub32,
    MSub64,
    MSub32x4,
    MSub64x2,
}

/// Internal type FpuRoundOp: defined at src/isa/s390x/inst.isle line 1418.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundOp {
    Cvt64To32,
    Cvt64x2To32x4,
    Round32,
    Round64,
    Round32x4,
    Round64x2,
    ToSInt32,
    ToSInt64,
    ToUInt32,
    ToUInt64,
    ToSInt32x4,
    ToSInt64x2,
    ToUInt32x4,
    ToUInt64x2,
    FromSInt32,
    FromSInt64,
    FromUInt32,
    FromUInt64,
    FromSInt32x4,
    FromSInt64x2,
    FromUInt32x4,
    FromUInt64x2,
}

/// Internal type FpuRoundMode: defined at src/isa/s390x/inst.isle line 1445.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum FpuRoundMode {
    Current,
    ToNearest,
    ShorterPrecision,
    ToNearestTiesToEven,
    ToZero,
    ToPosInfinity,
    ToNegInfinity,
}

/// Internal type LaneOrder: defined at src/isa/s390x/inst.isle line 1486.
#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum LaneOrder {
    LittleEndian,
    BigEndian,
}

/// Internal type ProducesBool: defined at src/isa/s390x/inst.isle line 3356.
#[derive(Clone, Debug)]
pub enum ProducesBool {
    ProducesBool { producer: ProducesFlags, cond: Cond },
}

// Generated as internal constructor for term ty_shift_mask.
pub fn constructor_ty_shift_mask<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    let v1 = C::lane_type(ctx, arg0);
    let v2 = C::ty_bits(ctx, v1);
    let v3 = C::u8_as_u64(ctx, v2);
    let v5 = C::u64_sub(ctx, v3, 0x1);
    // Rule at src/prelude.isle line 483.
    return v5;
}

// Generated as internal constructor for term output_reg.
pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> InstOutput {
    let v1 = C::value_reg(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 85.
    return v2;
}

// Generated as internal constructor for term output_value.
pub fn constructor_output_value<C: Context>(ctx: &mut C, arg0: Value) -> InstOutput {
    let v1 = C::put_in_regs(ctx, arg0);
    let v2 = C::output(ctx, v1);
    // Rule at src/prelude_lower.isle line 89.
    return v2;
}

// Generated as internal constructor for term temp_reg.
pub fn constructor_temp_reg<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    let v1 = C::temp_writable_reg(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    // Rule at src/prelude_lower.isle line 109.
    return v2;
}

// Generated as internal constructor for term value_regs_range.
pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Range {
    let v2 = C::value_regs_len(ctx, arg0);
    let v3 = C::range(ctx, 0x0, v2);
    // Rule at src/prelude_lower.isle line 163.
    return v3;
}

// Generated as internal constructor for term lo_reg.
pub fn constructor_lo_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::put_in_regs(ctx, arg0);
    let v3 = C::value_regs_get(ctx, v1, 0x0);
    // Rule at src/prelude_lower.isle line 174.
    return v3;
}

// Generated as internal constructor for term multi_reg_to_pair_and_single.
pub fn constructor_multi_reg_to_pair_and_single<C: Context>(
    ctx: &mut C,
    arg0: &MultiReg,
) -> InstOutput {
    if let &MultiReg::Three {
        a: v1,
        b: v2,
        c: v3,
    } = arg0
    {
        let v4 = C::value_regs(ctx, v1, v2);
        let v5 = C::value_reg(ctx, v3);
        let v6 = C::output_pair(ctx, v4, v5);
        // Rule at src/prelude_lower.isle line 185.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair_and_single", "src/prelude_lower.isle line 184"
    )
}

// Generated as internal constructor for term multi_reg_to_pair.
pub fn constructor_multi_reg_to_pair<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::Two { a: v1, b: v2 } = arg0 {
        let v3 = C::value_regs(ctx, v1, v2);
        let v4 = C::output(ctx, v3);
        // Rule at src/prelude_lower.isle line 190.
        return v4;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_pair", "src/prelude_lower.isle line 189"
    )
}

// Generated as internal constructor for term multi_reg_to_single.
pub fn constructor_multi_reg_to_single<C: Context>(ctx: &mut C, arg0: &MultiReg) -> InstOutput {
    if let &MultiReg::One { a: v1 } = arg0 {
        let v2 = C::value_reg(ctx, v1);
        let v3 = C::output(ctx, v2);
        // Rule at src/prelude_lower.isle line 195.
        return v3;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "multi_reg_to_single", "src/prelude_lower.isle line 194"
    )
}

// Generated as internal constructor for term emit_side_effect.
pub fn constructor_emit_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Unit {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            let v2 = C::emit(ctx, v1);
            // Rule at src/prelude_lower.isle line 400.
            return v2;
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v3,
            inst2: ref v4,
        } => {
            let v5 = C::emit(ctx, v3);
            let v6 = C::emit(ctx, v4);
            // Rule at src/prelude_lower.isle line 402.
            return v6;
        }
        &SideEffectNoResult::Inst3 {
            inst1: ref v7,
            inst2: ref v8,
            inst3: ref v9,
        } => {
            let v10 = C::emit(ctx, v7);
            let v11 = C::emit(ctx, v8);
            let v12 = C::emit(ctx, v9);
            // Rule at src/prelude_lower.isle line 405.
            return v12;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_side_effect", "src/prelude_lower.isle line 399"
    )
}

// Generated as internal constructor for term side_effect.
pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> InstOutput {
    let v1 = constructor_emit_side_effect(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 415.
    return v2;
}

// Generated as internal constructor for term side_effect_concat.
pub fn constructor_side_effect_concat<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
    arg1: &SideEffectNoResult,
) -> SideEffectNoResult {
    match arg0 {
        &SideEffectNoResult::Inst { inst: ref v1 } => {
            match arg1 {
                &SideEffectNoResult::Inst { inst: ref v3 } => {
                    let v4 = SideEffectNoResult::Inst2 {
                        inst1: v1.clone(),
                        inst2: v3.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 420.
                    return v4;
                }
                &SideEffectNoResult::Inst2 {
                    inst1: ref v5,
                    inst2: ref v6,
                } => {
                    let v7 = SideEffectNoResult::Inst3 {
                        inst1: v1.clone(),
                        inst2: v5.clone(),
                        inst3: v6.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 422.
                    return v7;
                }
                _ => {}
            }
        }
        &SideEffectNoResult::Inst2 {
            inst1: ref v8,
            inst2: ref v9,
        } => {
            if let &SideEffectNoResult::Inst { inst: ref v3 } = arg1 {
                let v10 = SideEffectNoResult::Inst3 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                    inst3: v3.clone(),
                };
                // Rule at src/prelude_lower.isle line 424.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "side_effect_concat", "src/prelude_lower.isle line 419"
    )
}

// Generated as internal constructor for term produces_flags_concat.
pub fn constructor_produces_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ProducesFlags,
) -> ProducesFlags {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } = arg0 {
        if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v3 } = arg1 {
            let v4 = ProducesFlags::ProducesFlagsTwiceSideEffect {
                inst1: v1.clone(),
                inst2: v3.clone(),
            };
            // Rule at src/prelude_lower.isle line 449.
            return v4;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_concat", "src/prelude_lower.isle line 448"
    )
}

// Generated as internal constructor for term produces_flags_get_reg.
pub fn constructor_produces_flags_get_reg<C: Context>(ctx: &mut C, arg0: &ProducesFlags) -> Reg {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            // Rule at src/prelude_lower.isle line 479.
            return v2;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v3,
            result: v4,
        } => {
            // Rule at src/prelude_lower.isle line 480.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_get_reg", "src/prelude_lower.isle line 478"
    )
}

// Generated as internal constructor for term produces_flags_ignore.
pub fn constructor_produces_flags_ignore<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
) -> ProducesFlags {
    match arg0 {
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v1.clone() };
            // Rule at src/prelude_lower.isle line 485.
            return v3;
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v4,
            result: v5,
        } => {
            let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v4.clone() };
            // Rule at src/prelude_lower.isle line 487.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "produces_flags_ignore", "src/prelude_lower.isle line 484"
    )
}

// Generated as internal constructor for term consumes_flags_concat.
pub fn constructor_consumes_flags_concat<C: Context>(
    ctx: &mut C,
    arg0: &ConsumesFlags,
    arg1: &ConsumesFlags,
) -> ConsumesFlags {
    match arg0 {
        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v8 } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } = arg1 {
                let v10 = ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: v8.clone(),
                    inst2: v9.clone(),
                };
                // Rule at src/prelude_lower.isle line 500.
                return v10;
            }
        }
        &ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: ref v1,
            result: v2,
        } => {
            if let &ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: ref v4,
                result: v5,
            } = arg1
            {
                let v6 = C::value_regs(ctx, v2, v5);
                let v7 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: v1.clone(),
                    inst2: v4.clone(),
                    result: v6,
                };
                // Rule at src/prelude_lower.isle line 494.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "consumes_flags_concat", "src/prelude_lower.isle line 493"
    )
}

// Generated as internal constructor for term with_flags.
pub fn constructor_with_flags<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> ValueRegs {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v12 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v16 = C::emit(ctx, v13);
                    let v17 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 531.
                    return v17;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v21 = C::emit(ctx, v18);
                    let v22 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 537.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v15 = C::emit(ctx, v12);
                    let v28 = C::emit(ctx, v23);
                    let v29 = C::emit(ctx, v24);
                    let v30 = C::emit(ctx, v25);
                    let v31 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 549.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v32,
            inst2: ref v33,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsReturnsReg {
                    inst: ref v13,
                    result: v14,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v36 = C::emit(ctx, v13);
                    let v37 = C::value_reg(ctx, v14);
                    // Rule at src/prelude_lower.isle line 565.
                    return v37;
                }
                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                    inst1: ref v18,
                    inst2: ref v19,
                    result: v20,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v38 = C::emit(ctx, v18);
                    let v39 = C::emit(ctx, v19);
                    // Rule at src/prelude_lower.isle line 572.
                    return v20;
                }
                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                    inst1: ref v23,
                    inst2: ref v24,
                    inst3: ref v25,
                    inst4: ref v26,
                    result: v27,
                } => {
                    let v34 = C::emit(ctx, v32);
                    let v35 = C::emit(ctx, v33);
                    let v40 = C::emit(ctx, v23);
                    let v41 = C::emit(ctx, v24);
                    let v42 = C::emit(ctx, v25);
                    let v43 = C::emit(ctx, v26);
                    // Rule at src/prelude_lower.isle line 585.
                    return v27;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v1,
            result: v2,
        } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v9 } => {
                    let v6 = C::emit(ctx, v1);
                    let v10 = C::emit(ctx, v9);
                    let v11 = C::value_reg(ctx, v2);
                    // Rule at src/prelude_lower.isle line 525.
                    return v11;
                }
                &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                    inst: ref v4,
                    result: v5,
                } => {
                    let v6 = C::emit(ctx, v1);
                    let v7 = C::emit(ctx, v4);
                    let v8 = C::value_regs(ctx, v2, v5);
                    // Rule at src/prelude_lower.isle line 517.
                    return v8;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags", "src/prelude_lower.isle line 515"
    )
}

// Generated as internal constructor for term with_flags_reg.
pub fn constructor_with_flags_reg<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> Reg {
    let v2 = constructor_with_flags(ctx, arg0, arg1);
    let v4 = C::value_regs_get(ctx, v2, 0x0);
    // Rule at src/prelude_lower.isle line 603.
    return v4;
}

// Generated as internal constructor for term flags_to_producesflags.
pub fn constructor_flags_to_producesflags<C: Context>(ctx: &mut C, arg0: Value) -> ProducesFlags {
    let v1 = C::mark_value_used(ctx, arg0);
    // Rule at src/prelude_lower.isle line 610.
    return ProducesFlags::AlreadyExistingFlags;
}

// Generated as internal constructor for term with_flags_side_effect.
pub fn constructor_with_flags_side_effect<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesFlags,
) -> SideEffectNoResult {
    match arg0 {
        &ProducesFlags::AlreadyExistingFlags => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v3 = SideEffectNoResult::Inst { inst: v2.clone() };
                    // Rule at src/prelude_lower.isle line 621.
                    return v3;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v6 = SideEffectNoResult::Inst2 {
                        inst1: v4.clone(),
                        inst2: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 626.
                    return v6;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v7 } => {
            match arg1 {
                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } => {
                    let v8 = SideEffectNoResult::Inst2 {
                        inst1: v7.clone(),
                        inst2: v2.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 631.
                    return v8;
                }
                &ConsumesFlags::ConsumesFlagsSideEffect2 {
                    inst1: ref v4,
                    inst2: ref v5,
                } => {
                    let v9 = SideEffectNoResult::Inst3 {
                        inst1: v7.clone(),
                        inst2: v4.clone(),
                        inst3: v5.clone(),
                    };
                    // Rule at src/prelude_lower.isle line 636.
                    return v9;
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsTwiceSideEffect {
            inst1: ref v10,
            inst2: ref v11,
        } => {
            if let &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v2 } = arg1 {
                let v12 = SideEffectNoResult::Inst3 {
                    inst1: v10.clone(),
                    inst2: v11.clone(),
                    inst3: v2.clone(),
                };
                // Rule at src/prelude_lower.isle line 641.
                return v12;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_side_effect", "src/prelude_lower.isle line 619"
    )
}

// Generated as internal constructor for term with_flags_chained.
pub fn constructor_with_flags_chained<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &ConsumesAndProducesFlags,
    arg2: &ConsumesFlags,
) -> MultiReg {
    match arg0 {
        &ProducesFlags::ProducesFlagsSideEffect { inst: ref v1 } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            // Rule at src/prelude_lower.isle line 650.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            // Rule at src/prelude_lower.isle line 658.
                            return MultiReg::Empty;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v17 = MultiReg::One { a: v15 };
                            // Rule at src/prelude_lower.isle line 667.
                            return v17;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v27 = MultiReg::Two { a: v24, b: v26 };
                            // Rule at src/prelude_lower.isle line 675.
                            return v27;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v39 = MultiReg::Two { a: v37, b: v38 };
                            // Rule at src/prelude_lower.isle line 684.
                            return v39;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 744.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v50 = MultiReg::One { a: v48 };
                            // Rule at src/prelude_lower.isle line 752.
                            return v50;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v51 = MultiReg::Two { a: v48, b: v15 };
                            // Rule at src/prelude_lower.isle line 761.
                            return v51;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v52 = MultiReg::Three {
                                a: v48,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 769.
                            return v52;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v6 = C::emit(ctx, v1);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v53 = MultiReg::Three {
                                a: v48,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 778.
                            return v53;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsReg {
            inst: ref v40,
            result: v41,
        } => {
            match arg1 {
                &ConsumesAndProducesFlags::SideEffect { inst: ref v3 } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v8 = C::emit(ctx, v5);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 697.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v43 = MultiReg::One { a: v41 };
                            // Rule at src/prelude_lower.isle line 705.
                            return v43;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v16 = C::emit(ctx, v14);
                            let v44 = MultiReg::Two { a: v41, b: v15 };
                            // Rule at src/prelude_lower.isle line 714.
                            return v44;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v45 = MultiReg::Three {
                                a: v41,
                                b: v24,
                                c: v26,
                            };
                            // Rule at src/prelude_lower.isle line 722.
                            return v45;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v7 = C::emit(ctx, v3);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v46 = MultiReg::Three {
                                a: v41,
                                b: v37,
                                c: v38,
                            };
                            // Rule at src/prelude_lower.isle line 731.
                            return v46;
                        }
                        _ => {}
                    }
                }
                &ConsumesAndProducesFlags::ReturnsReg {
                    inst: ref v47,
                    result: v48,
                } => {
                    match arg2 {
                        &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v8 = C::emit(ctx, v5);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 791.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsSideEffect2 {
                            inst1: ref v10,
                            inst2: ref v11,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v12 = C::emit(ctx, v10);
                            let v13 = C::emit(ctx, v11);
                            let v54 = MultiReg::Two { a: v41, b: v48 };
                            // Rule at src/prelude_lower.isle line 799.
                            return v54;
                        }
                        &ConsumesFlags::ConsumesFlagsReturnsReg {
                            inst: ref v14,
                            result: v15,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v16 = C::emit(ctx, v14);
                            let v55 = MultiReg::Three {
                                a: v41,
                                b: v48,
                                c: v15,
                            };
                            // Rule at src/prelude_lower.isle line 808.
                            return v55;
                        }
                        &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                            inst1: ref v18,
                            inst2: ref v19,
                            result: v20,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v21 = C::emit(ctx, v18);
                            let v22 = C::emit(ctx, v19);
                            let v24 = C::value_regs_get(ctx, v20, 0x0);
                            let v26 = C::value_regs_get(ctx, v20, 0x1);
                            let v56 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v24,
                                d: v26,
                            };
                            // Rule at src/prelude_lower.isle line 816.
                            return v56;
                        }
                        &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                            inst1: ref v28,
                            inst2: ref v29,
                            inst3: ref v30,
                            inst4: ref v31,
                            result: v32,
                        } => {
                            let v42 = C::emit(ctx, v40);
                            let v49 = C::emit(ctx, v47);
                            let v33 = C::emit(ctx, v28);
                            let v34 = C::emit(ctx, v29);
                            let v35 = C::emit(ctx, v30);
                            let v36 = C::emit(ctx, v31);
                            let v37 = C::value_regs_get(ctx, v32, 0x0);
                            let v38 = C::value_regs_get(ctx, v32, 0x1);
                            let v57 = MultiReg::Four {
                                a: v41,
                                b: v48,
                                c: v37,
                                d: v38,
                            };
                            // Rule at src/prelude_lower.isle line 825.
                            return v57;
                        }
                        _ => {}
                    }
                }
                _ => {}
            }
        }
        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
            inst: ref v58,
            result: v59,
        } => {
            if let &ConsumesAndProducesFlags::ReturnsReg {
                inst: ref v47,
                result: v48,
            } = arg1
            {
                match arg2 {
                    &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref v5 } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v8 = C::emit(ctx, v5);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 837.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsSideEffect2 {
                        inst1: ref v10,
                        inst2: ref v11,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v12 = C::emit(ctx, v10);
                        let v13 = C::emit(ctx, v11);
                        let v61 = MultiReg::Two { a: v59, b: v48 };
                        // Rule at src/prelude_lower.isle line 845.
                        return v61;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer {
                        inst: ref v63,
                        result: v64,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v65 = C::emit(ctx, v63);
                        let v66 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v64,
                        };
                        // Rule at src/prelude_lower.isle line 862.
                        return v66;
                    }
                    &ConsumesFlags::ConsumesFlagsReturnsReg {
                        inst: ref v14,
                        result: v15,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v16 = C::emit(ctx, v14);
                        let v62 = MultiReg::Three {
                            a: v59,
                            b: v48,
                            c: v15,
                        };
                        // Rule at src/prelude_lower.isle line 854.
                        return v62;
                    }
                    &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
                        inst1: ref v18,
                        inst2: ref v19,
                        result: v20,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v21 = C::emit(ctx, v18);
                        let v22 = C::emit(ctx, v19);
                        let v24 = C::value_regs_get(ctx, v20, 0x0);
                        let v26 = C::value_regs_get(ctx, v20, 0x1);
                        let v67 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v24,
                            d: v26,
                        };
                        // Rule at src/prelude_lower.isle line 870.
                        return v67;
                    }
                    &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
                        inst1: ref v28,
                        inst2: ref v29,
                        inst3: ref v30,
                        inst4: ref v31,
                        result: v32,
                    } => {
                        let v60 = C::emit(ctx, v58);
                        let v49 = C::emit(ctx, v47);
                        let v33 = C::emit(ctx, v28);
                        let v34 = C::emit(ctx, v29);
                        let v35 = C::emit(ctx, v30);
                        let v36 = C::emit(ctx, v31);
                        let v37 = C::value_regs_get(ctx, v32, 0x0);
                        let v38 = C::value_regs_get(ctx, v32, 0x1);
                        let v68 = MultiReg::Four {
                            a: v59,
                            b: v48,
                            c: v37,
                            d: v38,
                        };
                        // Rule at src/prelude_lower.isle line 879.
                        return v68;
                    }
                    _ => {}
                }
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "with_flags_chained", "src/prelude_lower.isle line 647"
    )
}

// Generated as internal constructor for term lower_return.
pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: ValueSlice) -> InstOutput {
    let v1 = C::gen_return(ctx, arg0);
    let v2 = C::output_none(ctx);
    // Rule at src/prelude_lower.isle line 1090.
    return v2;
}

// Generated as internal constructor for term lane_order_equal.
pub fn constructor_lane_order_equal<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: &LaneOrder,
) -> bool {
    match arg0 {
        &LaneOrder::LittleEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1500.
                    return true;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1501.
                    return false;
                }
                _ => {}
            }
        }
        &LaneOrder::BigEndian => {
            match arg1 {
                &LaneOrder::LittleEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1502.
                    return false;
                }
                &LaneOrder::BigEndian => {
                    // Rule at src/isa/s390x/inst.isle line 1503.
                    return true;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_equal", "src/isa/s390x/inst.isle line 1499"
    )
}

// Generated as internal constructor for term lane_order_from_memflags.
pub fn constructor_lane_order_from_memflags<C: Context>(ctx: &mut C, arg0: MemFlags) -> LaneOrder {
    let v4 = C::bigendian(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 1508.
        return LaneOrder::BigEndian;
    }
    let v1 = C::littleendian(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1507.
        return LaneOrder::LittleEndian;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lane_order_from_memflags", "src/isa/s390x/inst.isle line 1506"
    )
}

// Generated as internal constructor for term i64_not_neg1.
pub fn constructor_i64_not_neg1<C: Context>(ctx: &mut C, arg0: i64) -> Option<i64> {
    let v2 = C::i64_nonequal(ctx, arg0, -0x1);
    if let Some(v3) = v2 {
        let v4 = Some(arg0);
        // Rule at src/isa/s390x/inst.isle line 1560.
        return v4;
    }
    None
}

// Generated as internal constructor for term imm8x16.
pub fn constructor_imm8x16<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u8,
    arg2: u8,
    arg3: u8,
    arg4: u8,
    arg5: u8,
    arg6: u8,
    arg7: u8,
    arg8: u8,
    arg9: u8,
    arg10: u8,
    arg11: u8,
    arg12: u8,
    arg13: u8,
    arg14: u8,
    arg15: u8,
) -> u128 {
    let v16 = C::u8_pair_concat(ctx, arg0, arg1);
    let v17 = C::u8_pair_concat(ctx, arg2, arg3);
    let v18 = C::u16_pair_concat(ctx, v16, v17);
    let v19 = C::u8_pair_concat(ctx, arg4, arg5);
    let v20 = C::u8_pair_concat(ctx, arg6, arg7);
    let v21 = C::u16_pair_concat(ctx, v19, v20);
    let v22 = C::u32_pair_concat(ctx, v18, v21);
    let v23 = C::u8_pair_concat(ctx, arg8, arg9);
    let v24 = C::u8_pair_concat(ctx, arg10, arg11);
    let v25 = C::u16_pair_concat(ctx, v23, v24);
    let v26 = C::u8_pair_concat(ctx, arg12, arg13);
    let v27 = C::u8_pair_concat(ctx, arg14, arg15);
    let v28 = C::u16_pair_concat(ctx, v26, v27);
    let v29 = C::u32_pair_concat(ctx, v25, v28);
    let v30 = C::u64_pair_concat(ctx, v22, v29);
    // Rule at src/isa/s390x/inst.isle line 1599.
    return v30;
}

// Generated as internal constructor for term mask_amt_reg.
pub fn constructor_mask_amt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        // Rule at src/isa/s390x/inst.isle line 1711.
        return arg1;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::mask_amt_imm(ctx, v2, -0x1);
        let v6 = C::u8_as_u16(ctx, v5);
        let v8 = C::uimm16shifted(ctx, v6, 0x0);
        let v9 = constructor_and_uimm16shifted(ctx, v2, arg1, v8);
        // Rule at src/isa/s390x/inst.isle line 1708.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "mask_amt_reg", "src/isa/s390x/inst.isle line 1707"
    )
}

// Generated as internal constructor for term amt_reg.
pub fn constructor_amt_reg<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v1 = C::value_type(ctx, arg0);
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v4 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 1715.
        return v4;
    }
    let v5 = C::vr128_ty(ctx, v1);
    if let Some(v6) = v5 {
        let v4 = C::put_in_reg(ctx, arg0);
        let v9 = C::zero_reg(ctx);
        let v10 = constructor_vec_extract_lane(ctx, I64X2, v4, 0x1, v9);
        // Rule at src/isa/s390x/inst.isle line 1716.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_reg", "src/isa/s390x/inst.isle line 1714"
    )
}

// Generated as internal constructor for term amt_vr.
pub fn constructor_amt_vr<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v14 = C::u64_from_value(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = constructor_vec_imm_splat(ctx, I8X16, v15);
        // Rule at src/isa/s390x/inst.isle line 1726.
        return v16;
    }
    let v1 = C::value_type(ctx, arg0);
    let v10 = C::vr128_ty(ctx, v1);
    if let Some(v11) = v10 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v13 = constructor_vec_replicate_lane(ctx, I8X16, v5, 0xF);
        // Rule at src/isa/s390x/inst.isle line 1724.
        return v13;
    }
    let v2 = C::fits_in_64(ctx, v1);
    if let Some(v3) = v2 {
        let v5 = C::put_in_reg(ctx, arg0);
        let v7 = C::zero_reg(ctx);
        let v8 = constructor_vec_insert_lane_undef(ctx, I8X16, v5, 0x0, v7);
        let v9 = constructor_vec_replicate_lane(ctx, I8X16, v8, 0x0);
        // Rule at src/isa/s390x/inst.isle line 1721.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "amt_vr", "src/isa/s390x/inst.isle line 1720"
    )
}

// Generated as internal constructor for term memarg_symbol_offset.
pub fn constructor_memarg_symbol_offset<C: Context>(ctx: &mut C, arg0: i64) -> Option<i32> {
    let v2 = C::memarg_symbol_offset_sum(ctx, arg0, 0x0);
    let v3 = v2?;
    let v4 = Some(v3);
    // Rule at src/isa/s390x/inst.isle line 1804.
    return v4;
}

// Generated as internal constructor for term lower_address.
pub fn constructor_lower_address<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
) -> MemArg {
    let v10 = C::def_inst(ctx, arg1);
    if let Some(v11) = v10 {
        let v17 = &C::inst_data(ctx, v11);
        match v17 {
            &InstructionData::Binary {
                opcode: ref v18,
                args: ref v19,
            } => {
                if let &Opcode::Iadd = v18 {
                    let v6 = C::i64_from_offset(ctx, arg2);
                    if v6 == 0x0 {
                        let v12 = C::first_result(ctx, v11);
                        if let Some(v13) = v12 {
                            let v14 = C::value_type(ctx, v13);
                            let v15 = C::ty_addr64(ctx, v14);
                            if let Some(v16) = v15 {
                                let v20 = C::unpack_value_array_2(ctx, v19);
                                let v23 = C::put_in_reg(ctx, v20.0);
                                let v24 = C::put_in_reg(ctx, v20.1);
                                let v25 = &C::memarg_reg_plus_reg(ctx, v23, v24, 0x0, arg0);
                                // Rule at src/isa/s390x/inst.isle line 1822.
                                return v25.clone();
                            }
                        }
                    }
                }
            }
            &InstructionData::UnaryGlobalValue {
                opcode: ref v26,
                global_value: v27,
            } => {
                if let &Opcode::SymbolValue = v26 {
                    let v28 = C::symbol_value_data(ctx, v27);
                    if let Some(v29) = v28 {
                        let v33 = C::reloc_distance_near(ctx, v29.1);
                        if let Some(v34) = v33 {
                            let v6 = C::i64_from_offset(ctx, arg2);
                            let v35 = C::memarg_symbol_offset_sum(ctx, v6, v29.2);
                            if let Some(v36) = v35 {
                                let v37 = &C::memarg_symbol(ctx, v29.0, v36, arg0);
                                // Rule at src/isa/s390x/inst.isle line 1825.
                                return v37.clone();
                            }
                        }
                    }
                }
            }
            _ => {}
        }
    }
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::ty_addr64(ctx, v2);
    if let Some(v4) = v3 {
        let v7 = C::put_in_reg(ctx, arg1);
        let v6 = C::i64_from_offset(ctx, arg2);
        let v9 = &C::memarg_reg_plus_off(ctx, v7, v6, 0x0, arg0);
        // Rule at src/isa/s390x/inst.isle line 1819.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_address", "src/isa/s390x/inst.isle line 1817"
    )
}

// Generated as internal constructor for term lower_address_bias.
pub fn constructor_lower_address_bias<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Offset32,
    arg3: u8,
) -> MemArg {
    let v4 = C::i64_from_offset(ctx, arg2);
    if v4 == 0x0 {
        let v8 = C::def_inst(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::first_result(ctx, v9);
            if let Some(v11) = v10 {
                let v12 = C::value_type(ctx, v11);
                if v12 == I64 {
                    let v13 = &C::inst_data(ctx, v9);
                    if let &InstructionData::Binary {
                        opcode: ref v14,
                        args: ref v15,
                    } = v13
                    {
                        if let &Opcode::Iadd = v14 {
                            let v16 = C::unpack_value_array_2(ctx, v15);
                            let v19 = C::put_in_reg(ctx, v16.0);
                            let v20 = C::put_in_reg(ctx, v16.1);
                            let v21 = &C::memarg_reg_plus_reg(ctx, v19, v20, arg3, arg0);
                            // Rule at src/isa/s390x/inst.isle line 1839.
                            return v21.clone();
                        }
                    }
                }
            }
        }
    }
    let v2 = C::value_type(ctx, arg1);
    if v2 == I64 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &C::memarg_reg_plus_off(ctx, v6, v4, arg3, arg0);
        // Rule at src/isa/s390x/inst.isle line 1836.
        return v7.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_address_bias", "src/isa/s390x/inst.isle line 1834"
    )
}

// Generated as internal constructor for term load_sym.
pub fn constructor_load_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    let v21 = Some(arg0);
                                    // Rule at src/isa/s390x/inst.isle line 1846.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term uload16_sym.
pub fn constructor_uload16_sym<C: Context>(ctx: &mut C, arg0: Inst) -> Option<Inst> {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::def_inst(ctx, v3);
            if let Some(v7) = v6 {
                let v8 = &C::inst_data(ctx, v7);
                if let &InstructionData::UnaryGlobalValue {
                    opcode: ref v9,
                    global_value: v10,
                } = v8
                {
                    if let &Opcode::SymbolValue = v9 {
                        let v11 = C::symbol_value_data(ctx, v10);
                        if let Some(v12) = v11 {
                            let v16 = C::reloc_distance_near(ctx, v12.1);
                            if let Some(v17) = v16 {
                                let v18 = C::i64_from_offset(ctx, v5);
                                let v19 = C::memarg_symbol_offset_sum(ctx, v12.2, v18);
                                if let Some(v20) = v19 {
                                    let v21 = Some(arg0);
                                    // Rule at src/isa/s390x/inst.isle line 1854.
                                    return v21;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    None
}

// Generated as internal constructor for term memarg_pair.
pub fn constructor_memarg_pair<C: Context>(ctx: &mut C, arg0: &MemArg) -> MemArgPair {
    let v1 = &C::memarg_pair_from_memarg(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 1868.
        return v2.clone();
    }
    let v3 = constructor_load_addr(ctx, arg0);
    let v4 = C::memarg_flags(ctx, arg0);
    let v5 = &C::memarg_pair_from_reg(ctx, v3, v4);
    // Rule at src/isa/s390x/inst.isle line 1869.
    return v5.clone();
}

// Generated as internal constructor for term stack_addr_impl.
pub fn constructor_stack_addr_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: StackSlot,
    arg2: Offset32,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = &C::abi_stackslot_addr(ctx, v3, arg1, arg2);
    let v5 = C::emit(ctx, v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 1884.
    return v6;
}

// Generated as internal constructor for term sink_load.
pub fn constructor_sink_load<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Load = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1950.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_load", "src/isa/s390x/inst.isle line 1949"
    )
}

// Generated as internal constructor for term sink_sload16.
pub fn constructor_sink_sload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1957.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload16", "src/isa/s390x/inst.isle line 1956"
    )
}

// Generated as internal constructor for term sink_sload32.
pub fn constructor_sink_sload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Sload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1964.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_sload32", "src/isa/s390x/inst.isle line 1963"
    )
}

// Generated as internal constructor for term sink_uload16.
pub fn constructor_sink_uload16<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload16 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1971.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload16", "src/isa/s390x/inst.isle line 1970"
    )
}

// Generated as internal constructor for term sink_uload32.
pub fn constructor_sink_uload32<C: Context>(ctx: &mut C, arg0: Inst) -> MemArg {
    let v1 = &C::inst_data(ctx, arg0);
    if let &InstructionData::Load {
        opcode: ref v2,
        arg: v3,
        flags: v4,
        offset: v5,
    } = v1
    {
        if let &Opcode::Uload32 = v2 {
            let v6 = C::sink_inst(ctx, arg0);
            let v7 = &constructor_lower_address(ctx, v4, v3, v5);
            // Rule at src/isa/s390x/inst.isle line 1978.
            return v7.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sink_uload32", "src/isa/s390x/inst.isle line 1977"
    )
}

// Generated as internal constructor for term temp_writable_regpair.
pub fn constructor_temp_writable_regpair<C: Context>(ctx: &mut C) -> WritableRegPair {
    let v1 = C::temp_writable_reg(ctx, I64);
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::writable_regpair(ctx, v1, v2);
    // Rule at src/isa/s390x/inst.isle line 1994.
    return v3;
}

// Generated as internal constructor for term writable_regpair_to_regpair.
pub fn constructor_writable_regpair_to_regpair<C: Context>(
    ctx: &mut C,
    arg0: WritableRegPair,
) -> RegPair {
    let v1 = C::writable_regpair_hi(ctx, arg0);
    let v3 = C::writable_regpair_lo(ctx, arg0);
    let v2 = C::writable_reg_to_reg(ctx, v1);
    let v4 = C::writable_reg_to_reg(ctx, v3);
    let v5 = C::regpair(ctx, v2, v4);
    // Rule at src/isa/s390x/inst.isle line 2010.
    return v5;
}

// Generated as internal constructor for term alu_rrr.
pub fn constructor_alu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2030.
    return v7;
}

// Generated as internal constructor for term alu_rrr_with_flags_paired.
pub fn constructor_alu_rrr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRR {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2037.
    return v7;
}

// Generated as internal constructor for term alu_rrsimm16.
pub fn constructor_alu_rrsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2044.
    return v7;
}

// Generated as internal constructor for term alu_rr.
pub fn constructor_alu_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2051.
    return v7;
}

// Generated as internal constructor for term alu_rr_with_flags_paired.
pub fn constructor_alu_rr_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRR {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        rm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2058.
    return v7;
}

// Generated as internal constructor for term alu_rx.
pub fn constructor_alu_rx<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2065.
    return v7;
}

// Generated as internal constructor for term alu_rx_with_flags_paired.
pub fn constructor_alu_rx_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRX {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2072.
    return v7;
}

// Generated as internal constructor for term alu_rsimm16.
pub fn constructor_alu_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i16,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm16 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2079.
    return v7;
}

// Generated as internal constructor for term alu_rsimm32.
pub fn constructor_alu_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: i32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRSImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2086.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32.
pub fn constructor_alu_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2093.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32_with_flags_paired.
pub fn constructor_alu_ruimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: u32,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32 {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::writable_reg_to_reg(ctx, v4);
    let v7 = ProducesFlags::ProducesFlagsReturnsResultWithConsumer {
        inst: v5,
        result: v6,
    };
    // Rule at src/isa/s390x/inst.isle line 2100.
    return v7;
}

// Generated as internal constructor for term alu_ruimm16shifted.
pub fn constructor_alu_ruimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm16Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm16Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2107.
    return v7;
}

// Generated as internal constructor for term alu_ruimm32shifted.
pub fn constructor_alu_ruimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: UImm32Shifted,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AluRUImm32Shifted {
        alu_op: arg1.clone(),
        rd: v4,
        ri: arg2,
        imm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2114.
    return v7;
}

// Generated as internal constructor for term smul_wide.
pub fn constructor_smul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SMulWide {
        rd: v2,
        rn: arg0,
        rm: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2121.
    return v5;
}

// Generated as internal constructor for term umul_wide.
pub fn constructor_umul_wide<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UMulWide {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2128.
    return v5;
}

// Generated as internal constructor for term sdivmod32.
pub fn constructor_sdivmod32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2135.
    return v5;
}

// Generated as internal constructor for term sdivmod64.
pub fn constructor_sdivmod64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::SDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2142.
    return v5;
}

// Generated as internal constructor for term udivmod32.
pub fn constructor_udivmod32<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod32 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2149.
    return v5;
}

// Generated as internal constructor for term udivmod64.
pub fn constructor_udivmod64<C: Context>(ctx: &mut C, arg0: RegPair, arg1: Reg) -> RegPair {
    let v2 = constructor_temp_writable_regpair(ctx);
    let v3 = MInst::UDivMod64 {
        rd: v2,
        ri: arg0,
        rn: arg1,
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2156.
    return v5;
}

// Generated as internal constructor for term shift_rr.
pub fn constructor_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::ShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2163.
    return v8;
}

// Generated as internal constructor for term rxsbg_test.
pub fn constructor_rxsbg_test<C: Context>(
    ctx: &mut C,
    arg0: &RxSBGOp,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: u8,
    arg5: i8,
) -> ProducesFlags {
    let v6 = MInst::RxSBGTest {
        op: arg0.clone(),
        rd: arg1,
        rn: arg2,
        start_bit: arg3,
        end_bit: arg4,
        rotate_amt: arg5,
    };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v6 };
    // Rule at src/isa/s390x/inst.isle line 2170.
    return v7;
}

// Generated as internal constructor for term unary_rr.
pub fn constructor_unary_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &UnaryOp, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::UnaryRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2176.
    return v6;
}

// Generated as internal constructor for term cmp_rr.
pub fn constructor_cmp_rr<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = MInst::CmpRR {
        op: arg0.clone(),
        rn: arg1,
        rm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2183.
    return v4;
}

// Generated as internal constructor for term cmp_rx.
pub fn constructor_cmp_rx<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = MInst::CmpRX {
        op: arg0.clone(),
        rn: arg1,
        mem: arg2.clone(),
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2188.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm16.
pub fn constructor_cmp_rsimm16<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm16 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2193.
    return v4;
}

// Generated as internal constructor for term cmp_rsimm32.
pub fn constructor_cmp_rsimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = MInst::CmpRSImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2198.
    return v4;
}

// Generated as internal constructor for term cmp_ruimm32.
pub fn constructor_cmp_ruimm32<C: Context>(
    ctx: &mut C,
    arg0: &CmpOp,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = MInst::CmpRUImm32 {
        op: arg0.clone(),
        rn: arg1,
        imm: arg2,
    };
    let v4 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2203.
    return v4;
}

// Generated as internal constructor for term atomic_rmw_impl.
pub fn constructor_atomic_rmw_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ALUOp,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::AtomicRmw {
        alu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        mem: arg3.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2208.
    return v7;
}

// Generated as internal constructor for term atomic_cas32.
pub fn constructor_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I32);
    let v5 = MInst::AtomicCas32 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2215.
    return v7;
}

// Generated as internal constructor for term atomic_cas64.
pub fn constructor_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = MInst::AtomicCas64 {
        rd: v4,
        ri: arg0,
        rn: arg1,
        mem: arg2.clone(),
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2222.
    return v7;
}

// Generated as internal constructor for term fence_impl.
pub fn constructor_fence_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst { inst: MInst::Fence };
    // Rule at src/isa/s390x/inst.isle line 2229.
    return v1;
}

// Generated as internal constructor for term load32.
pub fn constructor_load32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::Load32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2234.
    return v5;
}

// Generated as internal constructor for term load64.
pub fn constructor_load64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::Load64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2241.
    return v5;
}

// Generated as internal constructor for term loadrev16.
pub fn constructor_loadrev16<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev16 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2248.
    return v5;
}

// Generated as internal constructor for term loadrev32.
pub fn constructor_loadrev32<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I32);
    let v3 = MInst::LoadRev32 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2255.
    return v5;
}

// Generated as internal constructor for term loadrev64.
pub fn constructor_loadrev64<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadRev64 {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2262.
    return v5;
}

// Generated as internal constructor for term store8.
pub fn constructor_store8<C: Context>(ctx: &mut C, arg0: Reg, arg1: &MemArg) -> SideEffectNoResult {
    let v2 = MInst::Store8 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2269.
    return v3;
}

// Generated as internal constructor for term store16.
pub fn constructor_store16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2274.
    return v3;
}

// Generated as internal constructor for term store32.
pub fn constructor_store32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2279.
    return v3;
}

// Generated as internal constructor for term store64.
pub fn constructor_store64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::Store64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2284.
    return v3;
}

// Generated as internal constructor for term store8_imm.
pub fn constructor_store8_imm<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm8 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2289.
    return v3;
}

// Generated as internal constructor for term store16_imm.
pub fn constructor_store16_imm<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2294.
    return v3;
}

// Generated as internal constructor for term store32_simm16.
pub fn constructor_store32_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm32SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2299.
    return v3;
}

// Generated as internal constructor for term store64_simm16.
pub fn constructor_store64_simm16<C: Context>(
    ctx: &mut C,
    arg0: i16,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreImm64SExt16 {
        imm: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2304.
    return v3;
}

// Generated as internal constructor for term storerev16.
pub fn constructor_storerev16<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev16 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2309.
    return v3;
}

// Generated as internal constructor for term storerev32.
pub fn constructor_storerev32<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev32 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2314.
    return v3;
}

// Generated as internal constructor for term storerev64.
pub fn constructor_storerev64<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::StoreRev64 {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2319.
    return v3;
}

// Generated as internal constructor for term mvc.
pub fn constructor_mvc<C: Context>(
    ctx: &mut C,
    arg0: &MemArgPair,
    arg1: &MemArgPair,
    arg2: u8,
) -> SideEffectNoResult {
    let v3 = MInst::Mvc {
        dst: arg0.clone(),
        src: arg1.clone(),
        len_minus_one: arg2,
    };
    let v4 = SideEffectNoResult::Inst { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2324.
    return v4;
}

// Generated as internal constructor for term load_ar.
pub fn constructor_load_ar<C: Context>(ctx: &mut C, arg0: u8) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAR { rd: v2, ar: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2329.
    return v5;
}

// Generated as internal constructor for term insert_ar.
pub fn constructor_insert_ar<C: Context>(ctx: &mut C, arg0: Reg, arg1: u8) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v4 = MInst::InsertAR {
        rd: v3,
        ri: arg0,
        ar: arg1,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2336.
    return v6;
}

// Generated as internal constructor for term fpu_rr.
pub fn constructor_fpu_rr<C: Context>(ctx: &mut C, arg0: Type, arg1: &FPUOp1, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::FpuRR {
        fpu_op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2343.
    return v6;
}

// Generated as internal constructor for term fpu_rrr.
pub fn constructor_fpu_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp2,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRRR {
        fpu_op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2350.
    return v7;
}

// Generated as internal constructor for term fpu_rrrr.
pub fn constructor_fpu_rrrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FPUOp3,
    arg2: Reg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::FpuRRRR {
        fpu_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        rm: arg3,
        ra: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2357.
    return v8;
}

// Generated as internal constructor for term fpu_cmp32.
pub fn constructor_fpu_cmp32<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp32 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2364.
    return v3;
}

// Generated as internal constructor for term fpu_cmp64.
pub fn constructor_fpu_cmp64<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> ProducesFlags {
    let v2 = MInst::FpuCmp64 { rn: arg0, rm: arg1 };
    let v3 = ProducesFlags::ProducesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2369.
    return v3;
}

// Generated as internal constructor for term fpu_round.
pub fn constructor_fpu_round<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundOp,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::FpuRound {
        op: arg1.clone(),
        mode: arg2.clone(),
        rd: v4,
        rn: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2374.
    return v7;
}

// Generated as internal constructor for term vec_rrr.
pub fn constructor_vec_rrr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecBinaryOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecRRR {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2381.
    return v7;
}

// Generated as internal constructor for term vec_rr.
pub fn constructor_vec_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecUnaryOp,
    arg2: Reg,
) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::VecRR {
        op: arg1.clone(),
        rd: v3,
        rn: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2388.
    return v6;
}

// Generated as internal constructor for term vec_shift_rr.
pub fn constructor_vec_shift_rr<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecShiftOp,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecShiftRR {
        shift_op: arg1.clone(),
        rd: v5,
        rn: arg2,
        shift_imm: arg3,
        shift_reg: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2395.
    return v8;
}

// Generated as internal constructor for term vec_select.
pub fn constructor_vec_select<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecSelect {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2402.
    return v7;
}

// Generated as internal constructor for term vec_permute.
pub fn constructor_vec_permute<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecPermute {
        rd: v4,
        rn: arg1,
        rm: arg2,
        ra: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2409.
    return v7;
}

// Generated as internal constructor for term vec_permute_dw_imm.
pub fn constructor_vec_permute_dw_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v5 = C::temp_writable_reg(ctx, arg0);
    let v6 = MInst::VecPermuteDWImm {
        rd: v5,
        rn: arg1,
        rm: arg3,
        idx1: arg2,
        idx2: arg4,
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::writable_reg_to_reg(ctx, v5);
    // Rule at src/isa/s390x/inst.isle line 2416.
    return v8;
}

// Generated as internal constructor for term vec_int_cmp.
pub fn constructor_vec_int_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2423.
    return v7;
}

// Generated as internal constructor for term vec_int_cmps.
pub fn constructor_vec_int_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecIntCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecIntCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2430.
    return v6;
}

// Generated as internal constructor for term vec_float_cmp.
pub fn constructor_vec_float_cmp<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmp {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = C::emit(ctx, &v5);
    let v7 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/inst.isle line 2436.
    return v7;
}

// Generated as internal constructor for term vec_float_cmps.
pub fn constructor_vec_float_cmps<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &VecFloatCmpOp,
    arg2: Reg,
    arg3: Reg,
) -> ProducesFlags {
    let v4 = C::temp_writable_reg(ctx, arg0);
    let v5 = MInst::VecFloatCmpS {
        op: arg1.clone(),
        rd: v4,
        rn: arg2,
        rm: arg3,
    };
    let v6 = ProducesFlags::ProducesFlagsSideEffect { inst: v5 };
    // Rule at src/isa/s390x/inst.isle line 2443.
    return v6;
}

// Generated as internal constructor for term vec_int128_scmphi.
pub fn constructor_vec_int128_scmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128SCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2449.
    return v8.clone();
}

// Generated as internal constructor for term vec_int128_ucmphi.
pub fn constructor_vec_int128_ucmphi<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
) -> ProducesBool {
    let v3 = C::temp_writable_reg(ctx, I128);
    let v7 = &C::mask_as_cond(ctx, 0x4);
    let v4 = MInst::VecInt128UCmpHi {
        tmp: v3,
        rn: arg0,
        rm: arg1,
    };
    let v5 = ProducesFlags::ProducesFlagsSideEffect { inst: v4 };
    let v8 = &constructor_bool(ctx, &v5, v7);
    // Rule at src/isa/s390x/inst.isle line 2456.
    return v8.clone();
}

// Generated as internal constructor for term vec_load.
pub fn constructor_vec_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoad {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2463.
    return v5;
}

// Generated as internal constructor for term vec_loadrev.
pub fn constructor_vec_loadrev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadRev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2470.
    return v5;
}

// Generated as internal constructor for term vec_load_byte16rev.
pub fn constructor_vec_load_byte16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2477.
    return v5;
}

// Generated as internal constructor for term vec_load_byte32rev.
pub fn constructor_vec_load_byte32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2484.
    return v5;
}

// Generated as internal constructor for term vec_load_byte64rev.
pub fn constructor_vec_load_byte64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadByte64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2491.
    return v5;
}

// Generated as internal constructor for term vec_load_elt16rev.
pub fn constructor_vec_load_elt16rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt16Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2498.
    return v5;
}

// Generated as internal constructor for term vec_load_elt32rev.
pub fn constructor_vec_load_elt32rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt32Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2505.
    return v5;
}

// Generated as internal constructor for term vec_load_elt64rev.
pub fn constructor_vec_load_elt64rev<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, arg0);
    let v3 = MInst::VecLoadElt64Rev {
        rd: v2,
        mem: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2512.
    return v5;
}

// Generated as internal constructor for term vec_store.
pub fn constructor_vec_store<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStore {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2519.
    return v3;
}

// Generated as internal constructor for term vec_storerev.
pub fn constructor_vec_storerev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreRev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2524.
    return v3;
}

// Generated as internal constructor for term vec_store_byte16rev.
pub fn constructor_vec_store_byte16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2529.
    return v3;
}

// Generated as internal constructor for term vec_store_byte32rev.
pub fn constructor_vec_store_byte32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2534.
    return v3;
}

// Generated as internal constructor for term vec_store_byte64rev.
pub fn constructor_vec_store_byte64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreByte64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2539.
    return v3;
}

// Generated as internal constructor for term vec_store_elt16rev.
pub fn constructor_vec_store_elt16rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt16Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2544.
    return v3;
}

// Generated as internal constructor for term vec_store_elt32rev.
pub fn constructor_vec_store_elt32rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt32Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2549.
    return v3;
}

// Generated as internal constructor for term vec_store_elt64rev.
pub fn constructor_vec_store_elt64rev<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &MemArg,
) -> SideEffectNoResult {
    let v2 = MInst::VecStoreElt64Rev {
        rd: arg0,
        mem: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2554.
    return v3;
}

// Generated as internal constructor for term vec_load_replicate.
pub fn constructor_vec_load_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicate {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2559.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate", "src/isa/s390x/inst.isle line 2558"
    )
}

// Generated as internal constructor for term vec_load_replicate_rev.
pub fn constructor_vec_load_replicate_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecLoadReplicateRev {
                size: v4.0,
                rd: v8,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2566.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_rev", "src/isa/s390x/inst.isle line 2565"
    )
}

// Generated as internal constructor for term mov_to_vec128.
pub fn constructor_mov_to_vec128<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, arg0);
    let v4 = MInst::MovToVec128 {
        rd: v3,
        rn: arg1,
        rm: arg2,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 2573.
    return v6;
}

// Generated as internal constructor for term vec_load_const.
pub fn constructor_vec_load_const<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecLoadConst {
            rd: v4,
            const_data: arg1,
        };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2580.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const", "src/isa/s390x/inst.isle line 2579"
    )
}

// Generated as internal constructor for term vec_load_const_replicate.
pub fn constructor_vec_load_const_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, arg0);
        let v7 = MInst::VecLoadConstReplicate {
            size: v2.0,
            rd: v6,
            const_data: arg1,
        };
        let v8 = C::emit(ctx, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2587.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_const_replicate", "src/isa/s390x/inst.isle line 2586"
    )
}

// Generated as internal constructor for term vec_imm_byte_mask.
pub fn constructor_vec_imm_byte_mask<C: Context>(ctx: &mut C, arg0: Type, arg1: u16) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::VecImmByteMask { rd: v4, mask: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2594.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_byte_mask", "src/isa/s390x/inst.isle line 2593"
    )
}

// Generated as internal constructor for term vec_imm_bit_mask.
pub fn constructor_vec_imm_bit_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: u8,
) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v9 = C::temp_writable_reg(ctx, v2);
            let v10 = MInst::VecImmBitMask {
                size: v4.0,
                rd: v9,
                start_bit: arg1,
                end_bit: arg2,
            };
            let v11 = C::emit(ctx, &v10);
            let v12 = C::writable_reg_to_reg(ctx, v9);
            // Rule at src/isa/s390x/inst.isle line 2601.
            return v12;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_bit_mask", "src/isa/s390x/inst.isle line 2600"
    )
}

// Generated as internal constructor for term vec_imm_replicate.
pub fn constructor_vec_imm_replicate<C: Context>(ctx: &mut C, arg0: Type, arg1: i16) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = C::multi_lane(ctx, v2);
        if let Some(v4) = v3 {
            let v8 = C::temp_writable_reg(ctx, v2);
            let v9 = MInst::VecImmReplicate {
                size: v4.0,
                rd: v8,
                imm: arg1,
            };
            let v10 = C::emit(ctx, &v9);
            let v11 = C::writable_reg_to_reg(ctx, v8);
            // Rule at src/isa/s390x/inst.isle line 2608.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_replicate", "src/isa/s390x/inst.isle line 2607"
    )
}

// Generated as internal constructor for term vec_load_lane.
pub fn constructor_vec_load_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLane {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2615.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane", "src/isa/s390x/inst.isle line 2614"
    )
}

// Generated as internal constructor for term vec_load_lane_undef.
pub fn constructor_vec_load_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2622.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_undef", "src/isa/s390x/inst.isle line 2621"
    )
}

// Generated as internal constructor for term vec_load_lane_rev.
pub fn constructor_vec_load_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecLoadLaneRev {
            size: v2.0,
            rd: v8,
            ri: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2629.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev", "src/isa/s390x/inst.isle line 2628"
    )
}

// Generated as internal constructor for term vec_load_lane_rev_undef.
pub fn constructor_vec_load_lane_rev_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecLoadLaneRevUndef {
            size: v2.0,
            rd: v7,
            mem: arg1.clone(),
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2636.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_rev_undef", "src/isa/s390x/inst.isle line 2635"
    )
}

// Generated as internal constructor for term vec_store_lane.
pub fn constructor_vec_store_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLane {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2643.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane", "src/isa/s390x/inst.isle line 2642"
    )
}

// Generated as internal constructor for term vec_store_lane_rev.
pub fn constructor_vec_store_lane_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = MInst::VecStoreLaneRev {
            size: v2.0,
            rd: arg1,
            mem: arg2.clone(),
            lane_imm: arg3,
        };
        let v9 = SideEffectNoResult::Inst { inst: v8 };
        // Rule at src/isa/s390x/inst.isle line 2648.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_rev", "src/isa/s390x/inst.isle line 2647"
    )
}

// Generated as internal constructor for term vec_insert_lane.
pub fn constructor_vec_insert_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: u8,
    arg4: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, arg0);
        let v10 = MInst::VecInsertLane {
            size: v2.0,
            rd: v9,
            ri: arg1,
            rn: arg2,
            lane_imm: arg3,
            lane_reg: arg4,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2653.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane", "src/isa/s390x/inst.isle line 2652"
    )
}

// Generated as internal constructor for term vec_insert_lane_undef.
pub fn constructor_vec_insert_lane_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneUndef {
            size: v2.0,
            rd: v8,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2660.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_undef", "src/isa/s390x/inst.isle line 2659"
    )
}

// Generated as internal constructor for term vec_extract_lane.
pub fn constructor_vec_extract_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::temp_writable_reg(ctx, I64);
        let v10 = MInst::VecExtractLane {
            size: v2.0,
            rd: v9,
            rn: arg1,
            lane_imm: arg2,
            lane_reg: arg3,
        };
        let v11 = C::emit(ctx, &v10);
        let v12 = C::writable_reg_to_reg(ctx, v9);
        // Rule at src/isa/s390x/inst.isle line 2667.
        return v12;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_extract_lane", "src/isa/s390x/inst.isle line 2666"
    )
}

// Generated as internal constructor for term vec_insert_lane_imm.
pub fn constructor_vec_insert_lane_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v8 = C::temp_writable_reg(ctx, arg0);
        let v9 = MInst::VecInsertLaneImm {
            size: v2.0,
            rd: v8,
            ri: arg1,
            imm: arg2,
            lane_imm: arg3,
        };
        let v10 = C::emit(ctx, &v9);
        let v11 = C::writable_reg_to_reg(ctx, v8);
        // Rule at src/isa/s390x/inst.isle line 2674.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_insert_lane_imm", "src/isa/s390x/inst.isle line 2673"
    )
}

// Generated as internal constructor for term vec_replicate_lane.
pub fn constructor_vec_replicate_lane<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = C::temp_writable_reg(ctx, arg0);
        let v8 = MInst::VecReplicateLane {
            size: v2.0,
            rd: v7,
            rn: arg1,
            lane_imm: arg2,
        };
        let v9 = C::emit(ctx, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v7);
        // Rule at src/isa/s390x/inst.isle line 2681.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_replicate_lane", "src/isa/s390x/inst.isle line 2680"
    )
}

// Generated as internal constructor for term load_symbol_reloc.
pub fn constructor_load_symbol_reloc<C: Context>(ctx: &mut C, arg0: &SymbolReloc) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = C::box_symbol_reloc(ctx, arg0);
    let v4 = MInst::LoadSymbolReloc {
        rd: v2,
        symbol_reloc: v3,
    };
    let v5 = C::emit(ctx, &v4);
    let v6 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2688.
    return v6;
}

// Generated as internal constructor for term load_addr.
pub fn constructor_load_addr<C: Context>(ctx: &mut C, arg0: &MemArg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::LoadAddr {
        rd: v2,
        mem: arg0.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2695.
    return v5;
}

// Generated as internal constructor for term call_impl.
pub fn constructor_call_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallInfo,
) -> SideEffectNoResult {
    let v2 = MInst::Call {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2702.
    return v3;
}

// Generated as internal constructor for term call_ind_impl.
pub fn constructor_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: WritableReg,
    arg1: BoxCallIndInfo,
) -> SideEffectNoResult {
    let v2 = MInst::CallInd {
        link: arg0,
        info: arg1,
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2707.
    return v3;
}

// Generated as internal constructor for term return_call_impl.
pub fn constructor_return_call_impl<C: Context>(
    ctx: &mut C,
    arg0: BoxReturnCallInfo,
) -> SideEffectNoResult {
    let v1 = MInst::ReturnCall { info: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 2712.
    return v2;
}

// Generated as internal constructor for term return_call_ind_impl.
pub fn constructor_return_call_ind_impl<C: Context>(
    ctx: &mut C,
    arg0: BoxReturnCallIndInfo,
) -> SideEffectNoResult {
    let v1 = MInst::ReturnCallInd { info: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 2717.
    return v2;
}

// Generated as internal constructor for term jump_impl.
pub fn constructor_jump_impl<C: Context>(ctx: &mut C, arg0: MachLabel) -> SideEffectNoResult {
    let v1 = MInst::Jump { dest: arg0 };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 2722.
    return v2;
}

// Generated as internal constructor for term cond_br.
pub fn constructor_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: MachLabel,
    arg2: &Cond,
) -> ConsumesFlags {
    let v3 = MInst::CondBr {
        taken: arg0,
        not_taken: arg1,
        cond: arg2.clone(),
    };
    let v4 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v3 };
    // Rule at src/isa/s390x/inst.isle line 2727.
    return v4;
}

// Generated as internal constructor for term oneway_cond_br.
pub fn constructor_oneway_cond_br<C: Context>(
    ctx: &mut C,
    arg0: MachLabel,
    arg1: &Cond,
) -> ConsumesFlags {
    let v2 = MInst::OneWayCondBr {
        target: arg0,
        cond: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2732.
    return v3;
}

// Generated as internal constructor for term jt_sequence.
pub fn constructor_jt_sequence<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: &BoxVecMachLabel,
) -> SideEffectNoResult {
    let v2 = MInst::JTSequence {
        ridx: arg0,
        targets: arg1.clone(),
    };
    let v3 = SideEffectNoResult::Inst { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 2737.
    return v3;
}

// Generated as internal constructor for term push_alu_reg.
pub fn constructor_push_alu_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRRR {
            alu_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            rm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2775.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_reg", "src/isa/s390x/inst.isle line 2774"
    )
}

// Generated as internal constructor for term push_alu_uimm32shifted.
pub fn constructor_push_alu_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ALUOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v7 = MInst::AluRUImm32Shifted {
            alu_op: arg1.clone(),
            rd: v4,
            ri: arg3,
            imm: arg4,
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        let v9 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2781.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_alu_uimm32shifted", "src/isa/s390x/inst.isle line 2780"
    )
}

// Generated as internal constructor for term push_shift.
pub fn constructor_push_shift<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ShiftOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v8 = MInst::ShiftRR {
            shift_op: arg1.clone(),
            rd: v4,
            rn: arg3,
            shift_imm: arg4,
            shift_reg: arg5,
        };
        let v9 = C::inst_builder_push(ctx, arg0, &v8);
        let v10 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2787.
        return v10;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_shift", "src/isa/s390x/inst.isle line 2786"
    )
}

// Generated as internal constructor for term push_rxsbg.
pub fn constructor_push_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &RxSBGOp,
    arg2: WritableReg,
    arg3: Reg,
    arg4: Reg,
    arg5: u8,
    arg6: u8,
    arg7: i8,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v10 = C::same_reg(ctx, v4, arg3);
        if let Some(v11) = v10 {
            let v12 = MInst::RxSBG {
                op: arg1.clone(),
                rd: v4,
                ri: arg3,
                rn: arg4,
                start_bit: arg5,
                end_bit: arg6,
                rotate_amt: arg7,
            };
            let v13 = C::inst_builder_push(ctx, arg0, &v12);
            let v14 = C::writable_reg_to_reg(ctx, v4);
            // Rule at src/isa/s390x/inst.isle line 2794.
            return v14;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_rxsbg", "src/isa/s390x/inst.isle line 2793"
    )
}

// Generated as internal constructor for term push_unary.
pub fn constructor_push_unary<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &UnaryOp,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v3 = C::real_reg(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = MInst::UnaryRR {
            op: arg1.clone(),
            rd: v4,
            rn: arg3,
        };
        let v7 = C::inst_builder_push(ctx, arg0, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2802.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_unary", "src/isa/s390x/inst.isle line 2801"
    )
}

// Generated as internal constructor for term push_atomic_cas32.
pub fn constructor_push_atomic_cas32<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas32 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src/isa/s390x/inst.isle line 2808.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas32", "src/isa/s390x/inst.isle line 2807"
    )
}

// Generated as internal constructor for term push_atomic_cas64.
pub fn constructor_push_atomic_cas64<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: WritableReg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    let v2 = C::real_reg(ctx, arg1);
    if let Some(v3) = v2 {
        let v6 = C::writable_reg_to_reg(ctx, v3);
        let v7 = MInst::AtomicCas64 {
            rd: v3,
            ri: v6,
            rn: arg2,
            mem: arg3.clone(),
        };
        let v8 = C::inst_builder_push(ctx, arg0, &v7);
        // Rule at src/isa/s390x/inst.isle line 2814.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas64", "src/isa/s390x/inst.isle line 2813"
    )
}

// Generated as internal constructor for term push_break_if.
pub fn constructor_push_break_if<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: &ProducesFlags,
    arg2: &Cond,
) -> Reg {
    if let &ProducesFlags::ProducesFlagsSideEffect { inst: ref v2 } = arg1 {
        let v4 = C::inst_builder_push(ctx, arg0, v2);
        let v5 = MInst::CondBreak { cond: arg2.clone() };
        let v6 = C::inst_builder_push(ctx, arg0, &v5);
        let v7 = C::invalid_reg(ctx);
        // Rule at src/isa/s390x/inst.isle line 2820.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_break_if", "src/isa/s390x/inst.isle line 2819"
    )
}

// Generated as internal constructor for term emit_loop.
pub fn constructor_emit_loop<C: Context>(ctx: &mut C, arg0: &VecMInstBuilder, arg1: &Cond) -> Unit {
    let v2 = C::inst_builder_finish(ctx, arg0);
    let v3 = MInst::Loop {
        body: v2,
        cond: arg1.clone(),
    };
    let v4 = C::emit(ctx, &v3);
    // Rule at src/isa/s390x/inst.isle line 2827.
    return v4;
}

// Generated as internal constructor for term copy_reg.
pub fn constructor_copy_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v10 = C::temp_writable_reg(ctx, v9);
        let v11 = MInst::Mov64 { rd: v10, rm: arg1 };
        let v12 = C::emit(ctx, &v11);
        let v13 = C::writable_reg_to_reg(ctx, v10);
        // Rule at src/isa/s390x/inst.isle line 2839.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = MInst::Mov32 { rd: v4, rm: arg1 };
        let v6 = C::emit(ctx, &v5);
        let v7 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2835.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg", "src/isa/s390x/inst.isle line 2834"
    )
}

// Generated as internal constructor for term emit_load.
pub fn constructor_emit_load<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: WritableReg,
    arg2: &MemArg,
) -> Unit {
    match arg0 {
        I32 => {
            let v3 = MInst::Load32 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v4 = C::emit(ctx, &v3);
            // Rule at src/isa/s390x/inst.isle line 2846.
            return v4;
        }
        I64 => {
            let v5 = MInst::Load64 {
                rd: arg1,
                mem: arg2.clone(),
            };
            let v6 = C::emit(ctx, &v5);
            // Rule at src/isa/s390x/inst.isle line 2848.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "emit_load", "src/isa/s390x/inst.isle line 2845"
    )
}

// Generated as internal constructor for term mov_preg.
pub fn constructor_mov_preg<C: Context>(ctx: &mut C, arg0: PReg) -> Reg {
    let v2 = C::temp_writable_reg(ctx, I64);
    let v3 = MInst::MovPReg { rd: v2, rm: arg0 };
    let v4 = C::emit(ctx, &v3);
    let v5 = C::writable_reg_to_reg(ctx, v2);
    // Rule at src/isa/s390x/inst.isle line 2853.
    return v5;
}

// Generated as internal constructor for term sp.
pub fn constructor_sp<C: Context>(ctx: &mut C) -> Reg {
    let v0 = C::preg_stack(ctx);
    let v1 = constructor_mov_preg(ctx, v0);
    // Rule at src/isa/s390x/inst.isle line 2866.
    return v1;
}

// Generated as internal constructor for term arg_store.
pub fn constructor_arg_store<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> SideEffectNoResult {
    match arg0 {
        I8 => {
            let v3 = &constructor_store8(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2872.
            return v3.clone();
        }
        I16 => {
            let v4 = &constructor_store16(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2873.
            return v4.clone();
        }
        I32 => {
            let v5 = &constructor_store32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2874.
            return v5.clone();
        }
        I64 => {
            let v6 = &constructor_store64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 2875.
            return v6.clone();
        }
        F32 => {
            let v9 = &constructor_vec_store_lane(ctx, F32X4, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2876.
            return v9.clone();
        }
        F64 => {
            let v11 = &constructor_vec_store_lane(ctx, F64X2, arg1, arg2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2877.
            return v11.clone();
        }
        _ => {}
    }
    let v12 = C::vr128_ty(ctx, arg0);
    if let Some(v13) = v12 {
        let v14 = &constructor_vec_store(ctx, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 2878.
        return v14.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_store", "src/isa/s390x/inst.isle line 2871"
    )
}

// Generated as internal constructor for term arg_load.
pub fn constructor_arg_load<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = constructor_zext32_mem(ctx, I8, arg1);
            // Rule at src/isa/s390x/inst.isle line 2881.
            return v3;
        }
        I16 => {
            let v5 = constructor_zext32_mem(ctx, I16, arg1);
            // Rule at src/isa/s390x/inst.isle line 2882.
            return v5;
        }
        I32 => {
            let v6 = constructor_load32(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2883.
            return v6;
        }
        I64 => {
            let v7 = constructor_load64(ctx, arg1);
            // Rule at src/isa/s390x/inst.isle line 2884.
            return v7;
        }
        F32 => {
            let v10 = constructor_vec_load_lane_undef(ctx, F32X4, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2885.
            return v10;
        }
        F64 => {
            let v12 = constructor_vec_load_lane_undef(ctx, F64X2, arg1, 0x0);
            // Rule at src/isa/s390x/inst.isle line 2886.
            return v12;
        }
        _ => {}
    }
    let v13 = C::vr128_ty(ctx, arg0);
    if let Some(v14) = v13 {
        let v15 = constructor_vec_load(ctx, v14, arg1);
        // Rule at src/isa/s390x/inst.isle line 2887.
        return v15;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "arg_load", "src/isa/s390x/inst.isle line 2880"
    )
}

// Generated as internal constructor for term vec_elt_rev.
pub fn constructor_vec_elt_rev<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    let v17 = constructor_vec_rot_imm(ctx, I16X8, v14, 0x8);
                    // Rule at src/isa/s390x/inst.isle line 2899.
                    return v17;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    let v14 = constructor_vec_rot_imm(ctx, I32X4, v11, 0x10);
                    // Rule at src/isa/s390x/inst.isle line 2896.
                    return v14;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    let v11 = constructor_vec_rot_imm(ctx, I64X2, v9, 0x20);
                    // Rule at src/isa/s390x/inst.isle line 2893.
                    return v11;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    let v9 = constructor_vec_permute_dw_imm(ctx, I64X2, arg1, 0x1, arg1, 0x0);
                    // Rule at src/isa/s390x/inst.isle line 2891.
                    return v9;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_elt_rev", "src/isa/s390x/inst.isle line 2890"
    )
}

// Generated as internal constructor for term abi_vec_elt_rev.
pub fn constructor_abi_vec_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: &LaneOrder,
    arg1: Type,
    arg2: Reg,
) -> Reg {
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        // Rule at src/isa/s390x/inst.isle line 2907.
        return arg2;
    }
    let v5 = C::gpr64_ty(ctx, arg1);
    if let Some(v6) = v5 {
        // Rule at src/isa/s390x/inst.isle line 2908.
        return arg2;
    }
    if arg1 == I128 {
        // Rule at src/isa/s390x/inst.isle line 2909.
        return arg2;
    }
    let v7 = C::ty_scalar_float(ctx, arg1);
    if let Some(v8) = v7 {
        // Rule at src/isa/s390x/inst.isle line 2910.
        return arg2;
    }
    let v9 = &C::lane_order(ctx);
    let v10 = constructor_lane_order_equal(ctx, arg0, v9);
    match v10 {
        true => {
            // Rule at src/isa/s390x/inst.isle line 2911.
            return arg2;
        }
        false => {
            let v11 = C::ty_vec128(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_vec_elt_rev(ctx, v12, arg2);
                // Rule at src/isa/s390x/inst.isle line 2914.
                return v13;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "abi_vec_elt_rev", "src/isa/s390x/inst.isle line 2906"
    )
}

// Generated as internal constructor for term memcpy.
pub fn constructor_memcpy<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &MemArg,
    arg2: u64,
) -> SideEffectNoResult {
    let v3 = C::len_minus_one(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = &constructor_memarg_pair(ctx, arg0);
        let v6 = &constructor_memarg_pair(ctx, arg1);
        let v7 = &constructor_mvc(ctx, v5, v6, v4);
        // Rule at src/isa/s390x/inst.isle line 2920.
        return v7.clone();
    }
    let v8 = constructor_load_addr(ctx, arg0);
    let v9 = constructor_load_addr(ctx, arg1);
    let v11 = constructor_imm(ctx, I64, arg2);
    let v12 = C::lib_call_info_memcpy(ctx, v8, v9, v11);
    let v13 = &constructor_lib_call(ctx, v12);
    // Rule at src/isa/s390x/inst.isle line 2922.
    return v13.clone();
}

// Generated as internal constructor for term copy_to_buffer.
pub fn constructor_copy_to_buffer<C: Context>(
    ctx: &mut C,
    arg0: &MemArg,
    arg1: &ABIArg,
    arg2: Value,
) -> InstOutput {
    let v2 = &C::abi_arg_only_slot(ctx, arg1);
    if let Some(v3) = v2 {
        let v5 = C::output_none(ctx);
        // Rule at src/isa/s390x/inst.isle line 2928.
        return v5;
    }
    let v6 = C::abi_arg_implicit_pointer(ctx, arg1);
    if let Some(v7) = v6 {
        let v11 = C::value_type(ctx, arg2);
        if v7.2 == v11 {
            let v12 = C::put_in_reg(ctx, arg2);
            let v13 = &C::memarg_offset(ctx, arg0, v7.1);
            let v14 = &constructor_arg_store(ctx, v7.2, v12, v13);
            let v15 = constructor_side_effect(ctx, v14);
            // Rule at src/isa/s390x/inst.isle line 2929.
            return v15;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_buffer", "src/isa/s390x/inst.isle line 2927"
    )
}

// Generated as internal constructor for term copy_to_arg.
pub fn constructor_copy_to_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArg,
    arg4: Value,
) -> InstOutput {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v7 = constructor_prepare_arg_val(ctx, v5, arg4);
        let v8 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, v5, v7);
        // Rule at src/isa/s390x/inst.isle line 2936.
        return v8;
    }
    let v9 = C::abi_arg_implicit_pointer(ctx, arg3);
    if let Some(v10) = v9 {
        let v14 = &C::memarg_offset(ctx, arg2, v10.1);
        let v15 = constructor_load_addr(ctx, v14);
        let v16 = constructor_copy_reg_to_arg_slot(ctx, arg0, arg1, arg2, &v10.0, v15);
        // Rule at src/isa/s390x/inst.isle line 2938.
        return v16;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_to_arg", "src/isa/s390x/inst.isle line 2935"
    )
}

// Generated as internal constructor for term copy_from_arg.
pub fn constructor_copy_from_arg<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArg,
) -> ValueRegs {
    let v4 = &C::abi_arg_only_slot(ctx, arg3);
    if let Some(v5) = v4 {
        let v6 = constructor_copy_reg_from_arg_slot(ctx, arg0, arg1, arg2, v5);
        let v7 = C::value_reg(ctx, v6);
        // Rule at src/isa/s390x/inst.isle line 2944.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_from_arg", "src/isa/s390x/inst.isle line 2943"
    )
}

// Generated as internal constructor for term prepare_arg_val.
pub fn constructor_prepare_arg_val<C: Context>(ctx: &mut C, arg0: &ABIArgSlot, arg1: Value) -> Reg {
    match arg0 {
        &ABIArgSlot::Reg {
            reg: v1,
            ty: v2,
            extension: ref v3,
        } => {
            match v3 {
                &ArgumentExtension::None => {
                    let v5 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2951.
                    return v5;
                }
                &ArgumentExtension::Uext => {
                    let v6 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2953.
                    return v6;
                }
                &ArgumentExtension::Sext => {
                    let v7 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2955.
                    return v7;
                }
                _ => {}
            }
        }
        &ABIArgSlot::Stack {
            offset: v8,
            ty: v9,
            extension: ref v10,
        } => {
            match v10 {
                &ArgumentExtension::None => {
                    let v5 = C::put_in_reg(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2957.
                    return v5;
                }
                &ArgumentExtension::Uext => {
                    let v6 = constructor_put_in_reg_zext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2959.
                    return v6;
                }
                &ArgumentExtension::Sext => {
                    let v7 = constructor_put_in_reg_sext64(ctx, arg1);
                    // Rule at src/isa/s390x/inst.isle line 2961.
                    return v7;
                }
                _ => {}
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "prepare_arg_val", "src/isa/s390x/inst.isle line 2950"
    )
}

// Generated as internal constructor for term copy_reg_to_arg_slot.
pub fn constructor_copy_reg_to_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallArgListBuilder,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArgSlot,
    arg4: Reg,
) -> InstOutput {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, arg4);
            let v9 = C::args_builder_push(ctx, arg0, v8, v4);
            let v10 = C::output_none(ctx);
            // Rule at src/isa/s390x/inst.isle line 2967.
            return v10;
        }
        &ABIArgSlot::Stack {
            offset: v11,
            ty: v12,
            extension: ref v13,
        } => {
            let v14 = constructor_abi_ext_ty(ctx, v13, v12);
            let v15 = constructor_abi_vec_elt_rev(ctx, arg1, v12, arg4);
            let v16 = &C::memarg_offset(ctx, arg2, v11);
            let v17 = &constructor_arg_store(ctx, v14, v15, v16);
            let v18 = constructor_side_effect(ctx, v17);
            // Rule at src/isa/s390x/inst.isle line 2970.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_to_arg_slot", "src/isa/s390x/inst.isle line 2966"
    )
}

// Generated as internal constructor for term copy_reg_from_arg_slot.
pub fn constructor_copy_reg_from_arg_slot<C: Context>(
    ctx: &mut C,
    arg0: &CallRetList,
    arg1: &LaneOrder,
    arg2: &MemArg,
    arg3: &ABIArgSlot,
) -> Reg {
    match arg3 {
        &ABIArgSlot::Reg {
            reg: v4,
            ty: v5,
            extension: ref v6,
        } => {
            let v7 = C::defs_lookup(ctx, arg0, v4);
            let v8 = constructor_abi_vec_elt_rev(ctx, arg1, v5, v7);
            // Rule at src/isa/s390x/inst.isle line 2976.
            return v8;
        }
        &ABIArgSlot::Stack {
            offset: v9,
            ty: v10,
            extension: ref v11,
        } => {
            let v12 = constructor_abi_ext_ty(ctx, v11, v10);
            let v13 = &C::memarg_offset(ctx, arg2, v9);
            let v14 = constructor_arg_load(ctx, v12, v13);
            let v15 = constructor_abi_vec_elt_rev(ctx, arg1, v10, v14);
            // Rule at src/isa/s390x/inst.isle line 2978.
            return v15;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "copy_reg_from_arg_slot", "src/isa/s390x/inst.isle line 2975"
    )
}

// Generated as internal constructor for term abi_ext_ty.
pub fn constructor_abi_ext_ty<C: Context>(
    ctx: &mut C,
    arg0: &ArgumentExtension,
    arg1: Type,
) -> Type {
    match arg0 {
        &ArgumentExtension::Uext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2985.
                return I64;
            }
        }
        &ArgumentExtension::Sext => {
            let v2 = C::gpr32_ty(ctx, arg1);
            if let Some(v3) = v2 {
                // Rule at src/isa/s390x/inst.isle line 2986.
                return I64;
            }
        }
        _ => {}
    }
    // Rule at src/isa/s390x/inst.isle line 2984.
    return arg1;
}

// Generated as internal constructor for term imm.
pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    match arg0 {
        F32 => {
            let v50 = C::temp_writable_reg(ctx, F32);
            let v20 = C::u64_truncate_to_u32(ctx, arg1);
            let v51 = MInst::LoadFpuConst32 {
                rd: v50,
                const_data: v20,
            };
            let v52 = C::emit(ctx, &v51);
            let v53 = C::writable_reg_to_reg(ctx, v50);
            // Rule at src/isa/s390x/inst.isle line 3058.
            return v53;
        }
        F64 => {
            let v55 = C::temp_writable_reg(ctx, F64);
            let v56 = MInst::LoadFpuConst64 {
                rd: v55,
                const_data: arg1,
            };
            let v57 = C::emit(ctx, &v56);
            let v58 = C::writable_reg_to_reg(ctx, v55);
            // Rule at src/isa/s390x/inst.isle line 3065.
            return v58;
        }
        _ => {}
    }
    let v1 = C::fits_in_16(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::temp_writable_reg(ctx, v2);
        let v5 = C::u64_as_i16(ctx, arg1);
        let v6 = MInst::Mov32SImm16 { rd: v4, imm: v5 };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v4);
        // Rule at src/isa/s390x/inst.isle line 2995.
        return v8;
    }
    let v9 = C::gpr32_ty(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::u32_pair_split(ctx, arg1);
        let v14 = C::i16_from_u32(ctx, v11.1);
        if let Some(v15) = v14 {
            let v16 = C::temp_writable_reg(ctx, v10);
            let v17 = MInst::Mov32SImm16 { rd: v16, imm: v15 };
            let v18 = C::emit(ctx, &v17);
            let v19 = C::writable_reg_to_reg(ctx, v16);
            // Rule at src/isa/s390x/inst.isle line 3001.
            return v19;
        }
        let v16 = C::temp_writable_reg(ctx, v10);
        let v20 = C::u64_truncate_to_u32(ctx, arg1);
        let v21 = MInst::Mov32Imm { rd: v16, imm: v20 };
        let v22 = C::emit(ctx, &v21);
        let v19 = C::writable_reg_to_reg(ctx, v16);
        // Rule at src/isa/s390x/inst.isle line 3007.
        return v19;
    }
    let v23 = C::gpr64_ty(ctx, arg0);
    if let Some(v24) = v23 {
        let v25 = C::i16_from_u64(ctx, arg1);
        if let Some(v26) = v25 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v28 = MInst::Mov64SImm16 { rd: v27, imm: v26 };
            let v29 = C::emit(ctx, &v28);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 3013.
            return v30;
        }
        let v31 = C::i32_from_u64(ctx, arg1);
        if let Some(v32) = v31 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v33 = MInst::Mov64SImm32 { rd: v27, imm: v32 };
            let v34 = C::emit(ctx, &v33);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 3019.
            return v30;
        }
        let v35 = C::uimm16shifted_from_u64(ctx, arg1);
        if let Some(v36) = v35 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v37 = MInst::Mov64UImm16Shifted { rd: v27, imm: v36 };
            let v38 = C::emit(ctx, &v37);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 3025.
            return v30;
        }
        let v39 = C::uimm32shifted_from_u64(ctx, arg1);
        if let Some(v40) = v39 {
            let v27 = C::temp_writable_reg(ctx, v24);
            let v41 = MInst::Mov64UImm32Shifted { rd: v27, imm: v40 };
            let v42 = C::emit(ctx, &v41);
            let v30 = C::writable_reg_to_reg(ctx, v27);
            // Rule at src/isa/s390x/inst.isle line 3031.
            return v30;
        }
        let v43 = C::u64_nonzero_hipart(ctx, arg1);
        if let Some(v44) = v43 {
            let v45 = C::u64_nonzero_lopart(ctx, arg1);
            if let Some(v46) = v45 {
                let v47 = constructor_imm(ctx, v24, v44);
                let v48 = constructor_insert_imm(ctx, v24, v47, v46);
                // Rule at src/isa/s390x/inst.isle line 3037.
                return v48;
            }
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm", "src/isa/s390x/inst.isle line 2992"
    )
}

// Generated as internal constructor for term insert_imm.
pub fn constructor_insert_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u64) -> Reg {
    let v3 = C::uimm16shifted_from_u64(ctx, arg2);
    if let Some(v4) = v3 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v6 = MInst::Insert64UImm16Shifted {
            rd: v5,
            ri: arg1,
            imm: v4,
        };
        let v7 = C::emit(ctx, &v6);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3045.
        return v8;
    }
    let v9 = C::uimm32shifted_from_u64(ctx, arg2);
    if let Some(v10) = v9 {
        let v5 = C::temp_writable_reg(ctx, arg0);
        let v11 = MInst::Insert64UImm32Shifted {
            rd: v5,
            ri: arg1,
            imm: v10,
        };
        let v12 = C::emit(ctx, &v11);
        let v8 = C::writable_reg_to_reg(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3051.
        return v8;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "insert_imm", "src/isa/s390x/inst.isle line 3042"
    )
}

// Generated as internal constructor for term imm32.
pub fn constructor_imm32<C: Context>(ctx: &mut C, arg0: Type, arg1: i32) -> Reg {
    if arg0 == I64 {
        let v3 = C::temp_writable_reg(ctx, I64);
        let v4 = MInst::Mov64SImm32 { rd: v3, imm: arg1 };
        let v5 = C::emit(ctx, &v4);
        let v6 = C::writable_reg_to_reg(ctx, v3);
        // Rule at src/isa/s390x/inst.isle line 3072.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "imm32", "src/isa/s390x/inst.isle line 3071"
    )
}

// Generated as internal constructor for term vec_imm.
pub fn constructor_vec_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u128) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3079.
            return v5;
        }
        let v6 = C::u64_pair_split(ctx, arg1);
        if v6.0 == v6.1 {
            let v10 = constructor_vec_imm_splat(ctx, I64X2, v6.0);
            // Rule at src/isa/s390x/inst.isle line 3081.
            return v10;
        }
        let v11 = constructor_vec_load_const(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3083.
        return v11;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm", "src/isa/s390x/inst.isle line 3078"
    )
}

// Generated as internal constructor for term vec_imm_splat.
pub fn constructor_vec_imm_splat<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3090.
                return v11;
            }
            0x10 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                let v24 = C::u8_pair_split(ctx, v21.1);
                if v24.0 == v24.1 {
                    let v28 = C::u8_as_u64(ctx, v24.0);
                    let v29 = constructor_vec_imm_splat(ctx, I8X16, v28);
                    // Rule at src/isa/s390x/inst.isle line 3098.
                    return v29;
                }
                let v10 = C::u64_as_i16(ctx, arg1);
                let v11 = constructor_vec_imm_replicate(ctx, arg0, v10);
                // Rule at src/isa/s390x/inst.isle line 3092.
                return v11;
            }
            0x20 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                let v21 = C::u16_pair_split(ctx, v12.1);
                if v21.0 == v21.1 {
                    let v31 = C::u16_as_u64(ctx, v21.0);
                    let v32 = constructor_vec_imm_splat(ctx, I16X8, v31);
                    // Rule at src/isa/s390x/inst.isle line 3100.
                    return v32;
                }
                let v15 = C::i16_from_u32(ctx, v12.1);
                if let Some(v16) = v15 {
                    let v17 = constructor_vec_imm_replicate(ctx, arg0, v16);
                    // Rule at src/isa/s390x/inst.isle line 3094.
                    return v17;
                }
            }
            0x40 => {
                let v12 = C::u32_pair_split(ctx, arg1);
                if v12.0 == v12.1 {
                    let v34 = C::u32_as_u64(ctx, v12.0);
                    let v35 = constructor_vec_imm_splat(ctx, I32X4, v34);
                    // Rule at src/isa/s390x/inst.isle line 3102.
                    return v35;
                }
                let v18 = C::i16_from_u64(ctx, arg1);
                if let Some(v19) = v18 {
                    let v20 = constructor_vec_imm_replicate(ctx, arg0, v19);
                    // Rule at src/isa/s390x/inst.isle line 3096.
                    return v20;
                }
            }
            _ => {}
        }
    }
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        if arg1 == 0x0 {
            let v5 = constructor_vec_imm_byte_mask(ctx, v2, 0x0);
            // Rule at src/isa/s390x/inst.isle line 3088.
            return v5;
        }
        let v36 = constructor_vec_load_const_replicate(ctx, v2, arg1);
        // Rule at src/isa/s390x/inst.isle line 3104.
        return v36;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_imm_splat", "src/isa/s390x/inst.isle line 3087"
    )
}

// Generated as internal constructor for term ty_ext32.
pub fn constructor_ty_ext32<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3112.
            return I32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3113.
            return I32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3114.
            return I32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3115.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext32", "src/isa/s390x/inst.isle line 3111"
    )
}

// Generated as internal constructor for term ty_ext64.
pub fn constructor_ty_ext64<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3119.
            return I64;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3120.
            return I64;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3121.
            return I64;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3122.
            return I64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ty_ext64", "src/isa/s390x/inst.isle line 3118"
    )
}

// Generated as internal constructor for term zext32_reg.
pub fn constructor_zext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3127.
    return v9;
}

// Generated as internal constructor for term sext32_reg.
pub fn constructor_sext32_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I32);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x20,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3134.
    return v9;
}

// Generated as internal constructor for term zext64_reg.
pub fn constructor_zext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: false,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3141.
    return v9;
}

// Generated as internal constructor for term sext64_reg.
pub fn constructor_sext64_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v3 = C::temp_writable_reg(ctx, I64);
    let v5 = C::ty_bits(ctx, arg0);
    let v7 = MInst::Extend {
        rd: v3,
        rn: arg1,
        signed: true,
        from_bits: v5,
        to_bits: 0x40,
    };
    let v8 = C::emit(ctx, &v7);
    let v9 = C::writable_reg_to_reg(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3148.
    return v9;
}

// Generated as internal constructor for term zext32_mem.
pub fn constructor_zext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3156.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3160.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext32_mem", "src/isa/s390x/inst.isle line 3155"
    )
}

// Generated as internal constructor for term sext32_mem.
pub fn constructor_sext32_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v4 = MInst::Load32SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3167.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I32);
            let v7 = MInst::Load32SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3171.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext32_mem", "src/isa/s390x/inst.isle line 3166"
    )
}

// Generated as internal constructor for term zext64_mem.
pub fn constructor_zext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64ZExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3178.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64ZExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3182.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64ZExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3186.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "zext64_mem", "src/isa/s390x/inst.isle line 3177"
    )
}

// Generated as internal constructor for term sext64_mem.
pub fn constructor_sext64_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &MemArg) -> Reg {
    match arg0 {
        I8 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v4 = MInst::Load64SExt8 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v5 = C::emit(ctx, &v4);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3193.
            return v6;
        }
        I16 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v7 = MInst::Load64SExt16 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v8 = C::emit(ctx, &v7);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3197.
            return v6;
        }
        I32 => {
            let v3 = C::temp_writable_reg(ctx, I64);
            let v9 = MInst::Load64SExt32 {
                rd: v3,
                mem: arg1.clone(),
            };
            let v10 = C::emit(ctx, &v9);
            let v6 = C::writable_reg_to_reg(ctx, v3);
            // Rule at src/isa/s390x/inst.isle line 3201.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sext64_mem", "src/isa/s390x/inst.isle line 3192"
    )
}

// Generated as internal constructor for term put_in_reg_zext32.
pub fn constructor_put_in_reg_zext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3209.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3215.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3211.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3213.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext32", "src/isa/s390x/inst.isle line 3208"
    )
}

// Generated as internal constructor for term put_in_reg_sext32.
pub fn constructor_put_in_reg_sext32<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext32(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3220.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::ty_32_or_64(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3226.
        return v19;
    }
    let v6 = C::fits_in_16(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext32_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3222.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext32_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3224.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext32", "src/isa/s390x/inst.isle line 3219"
    )
}

// Generated as internal constructor for term put_in_reg_zext64.
pub fn constructor_put_in_reg_zext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3231.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3237.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_zext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3233.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_zext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3235.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_zext64", "src/isa/s390x/inst.isle line 3230"
    )
}

// Generated as internal constructor for term put_in_reg_sext64.
pub fn constructor_put_in_reg_sext64<C: Context>(ctx: &mut C, arg0: Value) -> Reg {
    let v2 = C::u64_from_signed_value(ctx, arg0);
    if let Some(v3) = v2 {
        let v1 = C::value_type(ctx, arg0);
        let v4 = constructor_ty_ext64(ctx, v1);
        let v5 = constructor_imm(ctx, v4, v3);
        // Rule at src/isa/s390x/inst.isle line 3242.
        return v5;
    }
    let v1 = C::value_type(ctx, arg0);
    let v21 = C::gpr64_ty(ctx, v1);
    if let Some(v22) = v21 {
        let v19 = C::put_in_reg(ctx, arg0);
        // Rule at src/isa/s390x/inst.isle line 3248.
        return v19;
    }
    let v6 = C::gpr32_ty(ctx, v1);
    if let Some(v7) = v6 {
        let v8 = C::sinkable_inst(ctx, arg0);
        if let Some(v9) = v8 {
            let v10 = &C::inst_data(ctx, v9);
            if let &InstructionData::Load {
                opcode: ref v11,
                arg: v12,
                flags: v13,
                offset: v14,
            } = v10
            {
                if let &Opcode::Load = v11 {
                    let v15 = C::bigendian(ctx, v13);
                    if let Some(v16) = v15 {
                        let v17 = &constructor_sink_load(ctx, v9);
                        let v18 = constructor_sext64_mem(ctx, v7, v17);
                        // Rule at src/isa/s390x/inst.isle line 3244.
                        return v18;
                    }
                }
            }
        }
        let v19 = C::put_in_reg(ctx, arg0);
        let v20 = constructor_sext64_reg(ctx, v7, v19);
        // Rule at src/isa/s390x/inst.isle line 3246.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "put_in_reg_sext64", "src/isa/s390x/inst.isle line 3241"
    )
}

// Generated as internal constructor for term cmov_imm.
pub fn constructor_cmov_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: Reg,
) -> ConsumesFlags {
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64SImm16 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3260.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32SImm16 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            imm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3256.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm", "src/isa/s390x/inst.isle line 3255"
    )
}

// Generated as internal constructor for term cmov_imm_imm.
pub fn constructor_cmov_imm_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: i16,
    arg3: i16,
) -> ConsumesFlags {
    let v14 = C::gpr64_ty(ctx, arg0);
    if let Some(v15) = v14 {
        let v16 = C::temp_writable_reg(ctx, v15);
        let v17 = C::temp_writable_reg(ctx, v15);
        let v21 = C::writable_reg_to_reg(ctx, v17);
        let v22 = C::value_reg(ctx, v21);
        let v18 = MInst::Mov64SImm16 { rd: v16, imm: arg3 };
        let v19 = C::writable_reg_to_reg(ctx, v16);
        let v20 = MInst::CMov64SImm16 {
            rd: v17,
            cond: arg1.clone(),
            ri: v19,
            imm: arg2,
        };
        let v23 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v18,
            inst2: v20,
            result: v22,
        };
        // Rule at src/isa/s390x/inst.isle line 3274.
        return v23;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = C::temp_writable_reg(ctx, v2);
        let v11 = C::writable_reg_to_reg(ctx, v7);
        let v12 = C::value_reg(ctx, v11);
        let v8 = MInst::Mov32SImm16 { rd: v6, imm: arg3 };
        let v9 = C::writable_reg_to_reg(ctx, v6);
        let v10 = MInst::CMov32SImm16 {
            rd: v7,
            cond: arg1.clone(),
            ri: v9,
            imm: arg2,
        };
        let v13 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
            inst1: v8,
            inst2: v10,
            result: v12,
        };
        // Rule at src/isa/s390x/inst.isle line 3267.
        return v13;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_imm_imm", "src/isa/s390x/inst.isle line 3266"
    )
}

// Generated as internal constructor for term cmov_reg_reg.
pub fn constructor_cmov_reg_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &Cond,
    arg2: Reg,
    arg3: Reg,
) -> ConsumesFlags {
    match arg0 {
        F32 => {
            let v17 = C::temp_writable_reg(ctx, F32);
            let v18 = MInst::FpuCMov32 {
                rd: v17,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v19 = C::writable_reg_to_reg(ctx, v17);
            let v20 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v18,
                result: v19,
            };
            // Rule at src/isa/s390x/inst.isle line 3292.
            return v20;
        }
        F64 => {
            let v22 = C::temp_writable_reg(ctx, F64);
            let v23 = MInst::FpuCMov64 {
                rd: v22,
                cond: arg1.clone(),
                ri: arg3,
                rm: arg2,
            };
            let v24 = C::writable_reg_to_reg(ctx, v22);
            let v25 = ConsumesFlags::ConsumesFlagsReturnsReg {
                inst: v23,
                result: v24,
            };
            // Rule at src/isa/s390x/inst.isle line 3296.
            return v25;
        }
        _ => {}
    }
    let v10 = C::gpr64_ty(ctx, arg0);
    if let Some(v11) = v10 {
        let v12 = C::temp_writable_reg(ctx, v11);
        let v13 = MInst::CMov64 {
            rd: v12,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v14 = C::writable_reg_to_reg(ctx, v12);
        let v15 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v13,
            result: v14,
        };
        // Rule at src/isa/s390x/inst.isle line 3288.
        return v15;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::temp_writable_reg(ctx, v2);
        let v7 = MInst::CMov32 {
            rd: v6,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v8 = C::writable_reg_to_reg(ctx, v6);
        let v9 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v7,
            result: v8,
        };
        // Rule at src/isa/s390x/inst.isle line 3284.
        return v9;
    }
    let v26 = C::vr128_ty(ctx, arg0);
    if let Some(v27) = v26 {
        let v22 = C::temp_writable_reg(ctx, F64);
        let v28 = MInst::VecCMov {
            rd: v22,
            cond: arg1.clone(),
            ri: arg3,
            rm: arg2,
        };
        let v24 = C::writable_reg_to_reg(ctx, v22);
        let v29 = ConsumesFlags::ConsumesFlagsReturnsReg {
            inst: v28,
            result: v24,
        };
        // Rule at src/isa/s390x/inst.isle line 3300.
        return v29;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmov_reg_reg", "src/isa/s390x/inst.isle line 3283"
    )
}

// Generated as internal constructor for term trap_if.
pub fn constructor_trap_if<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
    arg2: &TrapCode,
) -> Reg {
    let v3 = &constructor_trap_if_impl(ctx, arg1, arg2);
    let v4 = &constructor_with_flags_side_effect(ctx, arg0, v3);
    let v5 = constructor_side_effect(ctx, v4);
    let v6 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3309.
    return v6;
}

// Generated as internal constructor for term icmps_reg_and_trap.
pub fn constructor_icmps_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3315.
    return v8;
}

// Generated as internal constructor for term icmps_simm16_and_trap.
pub fn constructor_icmps_simm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmps(ctx, arg0);
    let v6 = MInst::CmpTrapRSImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3321.
    return v8;
}

// Generated as internal constructor for term icmpu_reg_and_trap.
pub fn constructor_icmpu_reg_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRR {
        op: v5.clone(),
        rn: arg1,
        rm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3327.
    return v8;
}

// Generated as internal constructor for term icmpu_uimm16_and_trap.
pub fn constructor_icmpu_uimm16_and_trap<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u16,
    arg3: &Cond,
    arg4: &TrapCode,
) -> Reg {
    let v5 = &constructor_cmpop_cmpu(ctx, arg0);
    let v6 = MInst::CmpTrapRUImm16 {
        op: v5.clone(),
        rn: arg1,
        imm: arg2,
        cond: arg3.clone(),
        trap_code: arg4.clone(),
    };
    let v7 = C::emit(ctx, &v6);
    let v8 = C::invalid_reg(ctx);
    // Rule at src/isa/s390x/inst.isle line 3333.
    return v8;
}

// Generated as internal constructor for term trap_impl.
pub fn constructor_trap_impl<C: Context>(ctx: &mut C, arg0: &TrapCode) -> SideEffectNoResult {
    let v1 = MInst::Trap {
        trap_code: arg0.clone(),
    };
    let v2 = SideEffectNoResult::Inst { inst: v1 };
    // Rule at src/isa/s390x/inst.isle line 3339.
    return v2;
}

// Generated as internal constructor for term trap_if_impl.
pub fn constructor_trap_if_impl<C: Context>(
    ctx: &mut C,
    arg0: &Cond,
    arg1: &TrapCode,
) -> ConsumesFlags {
    let v2 = MInst::TrapIf {
        cond: arg0.clone(),
        trap_code: arg1.clone(),
    };
    let v3 = ConsumesFlags::ConsumesFlagsSideEffect { inst: v2 };
    // Rule at src/isa/s390x/inst.isle line 3343.
    return v3;
}

// Generated as internal constructor for term debugtrap_impl.
pub fn constructor_debugtrap_impl<C: Context>(ctx: &mut C) -> SideEffectNoResult {
    let v1 = SideEffectNoResult::Inst {
        inst: MInst::Debugtrap,
    };
    // Rule at src/isa/s390x/inst.isle line 3347.
    return v1;
}

// Generated as internal constructor for term bool.
pub fn constructor_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesFlags,
    arg1: &Cond,
) -> ProducesBool {
    let v2 = ProducesBool::ProducesBool {
        producer: arg0.clone(),
        cond: arg1.clone(),
    };
    // Rule at src/isa/s390x/inst.isle line 3358.
    return v2;
}

// Generated as internal constructor for term invert_bool.
pub fn constructor_invert_bool<C: Context>(ctx: &mut C, arg0: &ProducesBool) -> ProducesBool {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v3 = &C::invert_cond(ctx, v2);
        let v4 = &constructor_bool(ctx, v1, v3);
        // Rule at src/isa/s390x/inst.isle line 3362.
        return v4.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "invert_bool", "src/isa/s390x/inst.isle line 3361"
    )
}

// Generated as internal constructor for term select_bool_reg.
pub fn constructor_select_bool_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_reg_reg(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3367.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_reg", "src/isa/s390x/inst.isle line 3366"
    )
}

// Generated as internal constructor for term select_bool_imm.
pub fn constructor_select_bool_imm<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
    arg2: i16,
    arg3: i16,
) -> Reg {
    if let &ProducesBool::ProducesBool {
        producer: ref v2,
        cond: ref v3,
    } = arg1
    {
        let v6 = &constructor_cmov_imm_imm(ctx, arg0, v3, arg2, arg3);
        let v7 = constructor_with_flags_reg(ctx, v2, v6);
        // Rule at src/isa/s390x/inst.isle line 3372.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "select_bool_imm", "src/isa/s390x/inst.isle line 3371"
    )
}

// Generated as internal constructor for term lower_bool.
pub fn constructor_lower_bool<C: Context>(ctx: &mut C, arg0: Type, arg1: &ProducesBool) -> Reg {
    if arg0 == I8 {
        let v5 = constructor_select_bool_imm(ctx, I8, arg1, 0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3378.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool", "src/isa/s390x/inst.isle line 3377"
    )
}

// Generated as internal constructor for term lower_bool_to_mask.
pub fn constructor_lower_bool_to_mask<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &ProducesBool,
) -> Reg {
    if arg0 == I128 {
        let v8 = constructor_lower_bool_to_mask(ctx, I64, arg1);
        let v10 = constructor_mov_to_vec128(ctx, I128, v8, v8);
        // Rule at src/isa/s390x/inst.isle line 3385.
        return v10;
    }
    let v1 = C::fits_in_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_select_bool_imm(ctx, v2, arg1, -0x1, 0x0);
        // Rule at src/isa/s390x/inst.isle line 3382.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_bool_to_mask", "src/isa/s390x/inst.isle line 3381"
    )
}

// Generated as internal constructor for term cond_br_bool.
pub fn constructor_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
    arg2: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v5 = &constructor_cond_br(ctx, arg1, arg2, v2);
        let v6 = &constructor_with_flags_side_effect(ctx, v1, v5);
        // Rule at src/isa/s390x/inst.isle line 3391.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cond_br_bool", "src/isa/s390x/inst.isle line 3390"
    )
}

// Generated as internal constructor for term oneway_cond_br_bool.
pub fn constructor_oneway_cond_br_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: MachLabel,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_oneway_cond_br(ctx, arg1, v2);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3396.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "oneway_cond_br_bool", "src/isa/s390x/inst.isle line 3395"
    )
}

// Generated as internal constructor for term trap_if_bool.
pub fn constructor_trap_if_bool<C: Context>(
    ctx: &mut C,
    arg0: &ProducesBool,
    arg1: &TrapCode,
) -> SideEffectNoResult {
    if let &ProducesBool::ProducesBool {
        producer: ref v1,
        cond: ref v2,
    } = arg0
    {
        let v4 = &constructor_trap_if_impl(ctx, v2, arg1);
        let v5 = &constructor_with_flags_side_effect(ctx, v1, v4);
        // Rule at src/isa/s390x/inst.isle line 3401.
        return v5.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "trap_if_bool", "src/isa/s390x/inst.isle line 3400"
    )
}

// Generated as internal constructor for term casloop_val_reg.
pub fn constructor_casloop_val_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x0);
    // Rule at src/isa/s390x/inst.isle line 3414.
    return v1;
}

// Generated as internal constructor for term casloop_tmp_reg.
pub fn constructor_casloop_tmp_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0x1);
    // Rule at src/isa/s390x/inst.isle line 3418.
    return v1;
}

// Generated as internal constructor for term casloop_emit.
pub fn constructor_casloop_emit<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> PReg {
    let v7 = &C::memarg_reg_plus_off(ctx, arg3, 0x0, 0x0, arg2);
    let v8 = constructor_ty_ext32(ctx, arg1);
    let v9 = constructor_casloop_val_reg(ctx);
    let v10 = constructor_push_atomic_cas(ctx, arg0, v8, v9, arg4, v7);
    let v11 = constructor_ty_ext32(ctx, arg1);
    let v12 = constructor_casloop_val_reg(ctx);
    let v13 = constructor_emit_load(ctx, v11, v12, v7);
    let v15 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
    let v16 = constructor_emit_loop(ctx, arg0, v15);
    let v17 = C::preg_gpr_0(ctx);
    // Rule at src/isa/s390x/inst.isle line 3427.
    return v17;
}

// Generated as internal constructor for term casloop_result.
pub fn constructor_casloop_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: PReg,
) -> Reg {
    let v1 = C::ty_32_or_64(ctx, arg0);
    if let Some(v2) = v1 {
        let v4 = C::bigendian(ctx, arg1);
        if let Some(v5) = v4 {
            let v7 = constructor_mov_preg(ctx, arg2);
            // Rule at src/isa/s390x/inst.isle line 3449.
            return v7;
        }
        let v8 = C::littleendian(ctx, arg1);
        if let Some(v9) = v8 {
            let v10 = C::preg_to_reg(ctx, arg2);
            let v11 = constructor_bswap_reg(ctx, v2, v10);
            // Rule at src/isa/s390x/inst.isle line 3451.
            return v11;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_result", "src/isa/s390x/inst.isle line 3448"
    )
}

// Generated as internal constructor for term casloop.
pub fn constructor_casloop<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    let v5 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg4);
    let v6 = constructor_casloop_result(ctx, arg1, arg2, v5);
    // Rule at src/isa/s390x/inst.isle line 3456.
    return v6;
}

// Generated as internal constructor for term casloop_bitshift.
pub fn constructor_casloop_bitshift<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_lshl_imm(ctx, I32, arg0, 0x3);
    // Rule at src/isa/s390x/inst.isle line 3471.
    return v3;
}

// Generated as internal constructor for term casloop_aligned_addr.
pub fn constructor_casloop_aligned_addr<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v4 = C::uimm16shifted(ctx, 0xFFFC, 0x0);
    let v5 = constructor_and_uimm16shifted(ctx, I64, arg0, v4);
    // Rule at src/isa/s390x/inst.isle line 3476.
    return v5;
}

// Generated as internal constructor for term casloop_rotate_in.
pub fn constructor_casloop_rotate_in<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
            // Rule at src/isa/s390x/inst.isle line 3486.
            return v8;
        }
        I16 => {
            let v9 = C::bigendian(ctx, arg2);
            if let Some(v10) = v9 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v8 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3488.
                return v8;
            }
            let v11 = C::littleendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v14 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3490.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_in", "src/isa/s390x/inst.isle line 3485"
    )
}

// Generated as internal constructor for term casloop_rotate_out.
pub fn constructor_casloop_rotate_out<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v6 = constructor_casloop_tmp_reg(ctx);
            let v8 = constructor_neg_reg(ctx, I32, arg3);
            let v9 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 3499.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v12 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x0, arg3);
                // Rule at src/isa/s390x/inst.isle line 3501.
                return v12;
            }
            let v13 = C::littleendian(ctx, arg2);
            if let Some(v14) = v13 {
                let v6 = constructor_casloop_tmp_reg(ctx);
                let v16 = constructor_push_rot_imm_reg(ctx, arg0, I32, v6, arg4, 0x10, arg3);
                // Rule at src/isa/s390x/inst.isle line 3503.
                return v16;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_out", "src/isa/s390x/inst.isle line 3498"
    )
}

// Generated as internal constructor for term casloop_rotate_result.
pub fn constructor_casloop_rotate_result<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        I8 => {
            let v6 = constructor_rot_imm_reg(ctx, I32, arg3, 0x8, arg2);
            // Rule at src/isa/s390x/inst.isle line 3514.
            return v6;
        }
        I16 => {
            let v7 = C::bigendian(ctx, arg1);
            if let Some(v8) = v7 {
                let v10 = constructor_rot_imm_reg(ctx, I32, arg3, 0x10, arg2);
                // Rule at src/isa/s390x/inst.isle line 3516.
                return v10;
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v13 = constructor_rot_reg(ctx, I32, arg3, arg2);
                let v14 = constructor_bswap_reg(ctx, I32, v13);
                // Rule at src/isa/s390x/inst.isle line 3518.
                return v14;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "casloop_rotate_result", "src/isa/s390x/inst.isle line 3513"
    )
}

// Generated as internal constructor for term casloop_subword.
pub fn constructor_casloop_subword<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: Reg,
    arg4: Reg,
    arg5: Reg,
) -> Reg {
    let v6 = constructor_casloop_emit(ctx, arg0, arg1, arg2, arg3, arg5);
    let v7 = C::preg_to_reg(ctx, v6);
    let v8 = constructor_casloop_rotate_result(ctx, arg1, arg2, arg4, v7);
    // Rule at src/isa/s390x/inst.isle line 3523.
    return v8;
}

// Generated as internal constructor for term writable_link_reg.
pub fn constructor_writable_link_reg<C: Context>(ctx: &mut C) -> WritableReg {
    let v1 = C::writable_gpr(ctx, 0xE);
    // Rule at src/isa/s390x/inst.isle line 3584.
    return v1;
}

// Generated as internal constructor for term abi_call.
pub fn constructor_abi_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
    arg3: &CallRetList,
) -> SideEffectNoResult {
    let v4 = constructor_writable_link_reg(ctx);
    let v5 = C::abi_call_info(ctx, arg0, arg1, arg2, arg3);
    let v6 = &constructor_call_impl(ctx, v4, v5);
    // Rule at src/isa/s390x/inst.isle line 3587.
    return v6.clone();
}

// Generated as internal constructor for term abi_call_ind.
pub fn constructor_abi_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
    arg3: &CallRetList,
) -> SideEffectNoResult {
    let v4 = constructor_writable_link_reg(ctx);
    let v5 = C::abi_call_ind_info(ctx, arg0, arg1, arg2, arg3);
    let v6 = &constructor_call_ind_impl(ctx, v4, v5);
    // Rule at src/isa/s390x/inst.isle line 3591.
    return v6.clone();
}

// Generated as internal constructor for term abi_return_call.
pub fn constructor_abi_return_call<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: ExternalName,
    arg2: &CallArgList,
) -> SideEffectNoResult {
    let v3 = C::abi_return_call_info(ctx, arg0, arg1, arg2);
    let v4 = &constructor_return_call_impl(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3595.
    return v4.clone();
}

// Generated as internal constructor for term abi_return_call_ind.
pub fn constructor_abi_return_call_ind<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Reg,
    arg2: &CallArgList,
) -> SideEffectNoResult {
    let v3 = C::abi_return_call_ind_info(ctx, arg0, arg1, arg2);
    let v4 = &constructor_return_call_ind_impl(ctx, v3);
    // Rule at src/isa/s390x/inst.isle line 3599.
    return v4.clone();
}

// Generated as internal constructor for term lib_call.
pub fn constructor_lib_call<C: Context>(ctx: &mut C, arg0: BoxCallInfo) -> SideEffectNoResult {
    let v1 = constructor_writable_link_reg(ctx);
    let v2 = &constructor_call_impl(ctx, v1, arg0);
    // Rule at src/isa/s390x/inst.isle line 3614.
    return v2.clone();
}

// Generated as internal constructor for term vec_widen_type.
pub fn constructor_vec_widen_type<C: Context>(ctx: &mut C, arg0: Type) -> Type {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3621.
            return I16X8;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3622.
            return I32X4;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3623.
            return I64X2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_widen_type", "src/isa/s390x/inst.isle line 3620"
    )
}

// Generated as internal constructor for term vecop_pack.
pub fn constructor_vecop_pack<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3626.
            return VecBinaryOp::Pack16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3627.
            return VecBinaryOp::Pack32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3628.
            return VecBinaryOp::Pack64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack", "src/isa/s390x/inst.isle line 3625"
    )
}

// Generated as internal constructor for term vec_pack.
pub fn constructor_vec_pack<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3631.
    return v4;
}

// Generated as internal constructor for term vecop_pack_ssat.
pub fn constructor_vecop_pack_ssat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3634.
            return VecBinaryOp::PackSSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3635.
            return VecBinaryOp::PackSSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3636.
            return VecBinaryOp::PackSSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_ssat", "src/isa/s390x/inst.isle line 3633"
    )
}

// Generated as internal constructor for term vec_pack_ssat.
pub fn constructor_vec_pack_ssat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_ssat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3639.
    return v4;
}

// Generated as internal constructor for term vecop_pack_usat.
pub fn constructor_vecop_pack_usat<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3642.
            return VecBinaryOp::PackUSat16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3643.
            return VecBinaryOp::PackUSat32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3644.
            return VecBinaryOp::PackUSat64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_pack_usat", "src/isa/s390x/inst.isle line 3641"
    )
}

// Generated as internal constructor for term vec_pack_usat.
pub fn constructor_vec_pack_usat<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_pack_usat(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3647.
    return v4;
}

// Generated as internal constructor for term vecop_unpacks_low.
pub fn constructor_vecop_unpacks_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3650.
            return VecUnaryOp::UnpackSLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3651.
            return VecUnaryOp::UnpackSLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3652.
            return VecUnaryOp::UnpackSLow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_low", "src/isa/s390x/inst.isle line 3649"
    )
}

// Generated as internal constructor for term vec_unpacks_low.
pub fn constructor_vec_unpacks_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3655.
    return v3;
}

// Generated as internal constructor for term vecop_unpacks_high.
pub fn constructor_vecop_unpacks_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3658.
            return VecUnaryOp::UnpackSHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3659.
            return VecUnaryOp::UnpackSHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3660.
            return VecUnaryOp::UnpackSHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacks_high", "src/isa/s390x/inst.isle line 3657"
    )
}

// Generated as internal constructor for term vec_unpacks_high.
pub fn constructor_vec_unpacks_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacks_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3663.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_low.
pub fn constructor_vecop_unpacku_low<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3666.
            return VecUnaryOp::UnpackULow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3667.
            return VecUnaryOp::UnpackULow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3668.
            return VecUnaryOp::UnpackULow32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_low", "src/isa/s390x/inst.isle line 3665"
    )
}

// Generated as internal constructor for term vec_unpacku_low.
pub fn constructor_vec_unpacku_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_low(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3671.
    return v3;
}

// Generated as internal constructor for term vecop_unpacku_high.
pub fn constructor_vecop_unpacku_high<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3674.
            return VecUnaryOp::UnpackUHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3675.
            return VecUnaryOp::UnpackUHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3676.
            return VecUnaryOp::UnpackUHigh32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_unpacku_high", "src/isa/s390x/inst.isle line 3673"
    )
}

// Generated as internal constructor for term vec_unpacku_high.
pub fn constructor_vec_unpacku_high<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_unpacku_high(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3679.
    return v3;
}

// Generated as internal constructor for term vec_pack_lane_order.
pub fn constructor_vec_pack_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3690.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3687.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_lane_order", "src/isa/s390x/inst.isle line 3686"
    )
}

// Generated as internal constructor for term vec_pack_ssat_lane_order.
pub fn constructor_vec_pack_ssat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_ssat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3698.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_ssat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3695.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_ssat_lane_order", "src/isa/s390x/inst.isle line 3694"
    )
}

// Generated as internal constructor for term vec_pack_usat_lane_order.
pub fn constructor_vec_pack_usat_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_pack_usat(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3706.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_pack_usat(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3703.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_pack_usat_lane_order", "src/isa/s390x/inst.isle line 3702"
    )
}

// Generated as internal constructor for term vec_unpacks_low_lane_order.
pub fn constructor_vec_unpacks_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3719.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3716.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_low_lane_order", "src/isa/s390x/inst.isle line 3715"
    )
}

// Generated as internal constructor for term vec_unpacks_high_lane_order.
pub fn constructor_vec_unpacks_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacks_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3727.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacks_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3724.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacks_high_lane_order", "src/isa/s390x/inst.isle line 3723"
    )
}

// Generated as internal constructor for term vec_unpacku_low_lane_order.
pub fn constructor_vec_unpacku_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3735.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3732.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_low_lane_order", "src/isa/s390x/inst.isle line 3731"
    )
}

// Generated as internal constructor for term vec_unpacku_high_lane_order.
pub fn constructor_vec_unpacku_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
) -> Reg {
    let v2 = &C::lane_order(ctx);
    match v2 {
        &LaneOrder::LittleEndian => {
            let v4 = constructor_vec_unpacku_high(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3743.
            return v4;
        }
        &LaneOrder::BigEndian => {
            let v3 = constructor_vec_unpacku_low(ctx, arg0, arg1);
            // Rule at src/isa/s390x/inst.isle line 3740.
            return v3;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_unpacku_high_lane_order", "src/isa/s390x/inst.isle line 3739"
    )
}

// Generated as internal constructor for term vecop_merge_low.
pub fn constructor_vecop_merge_low<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3751.
            return VecBinaryOp::MergeLow8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3752.
            return VecBinaryOp::MergeLow16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3753.
            return VecBinaryOp::MergeLow32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3754.
            return VecBinaryOp::MergeLow64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_low", "src/isa/s390x/inst.isle line 3750"
    )
}

// Generated as internal constructor for term vec_merge_low.
pub fn constructor_vec_merge_low<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_merge_low(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3757.
    return v4;
}

// Generated as internal constructor for term vecop_merge_high.
pub fn constructor_vecop_merge_high<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3760.
            return VecBinaryOp::MergeHigh8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3761.
            return VecBinaryOp::MergeHigh16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3762.
            return VecBinaryOp::MergeHigh32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3763.
            return VecBinaryOp::MergeHigh64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_merge_high", "src/isa/s390x/inst.isle line 3759"
    )
}

// Generated as internal constructor for term vec_merge_high.
pub fn constructor_vec_merge_high<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_vecop_merge_high(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3766.
    return v4;
}

// Generated as internal constructor for term vec_merge_low_lane_order.
pub fn constructor_vec_merge_low_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_low(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3780.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_high(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3777.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_low_lane_order", "src/isa/s390x/inst.isle line 3776"
    )
}

// Generated as internal constructor for term vec_merge_high_lane_order.
pub fn constructor_vec_merge_high_lane_order<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &C::lane_order(ctx);
    match v3 {
        &LaneOrder::LittleEndian => {
            let v5 = constructor_vec_merge_high(ctx, arg0, arg2, arg1);
            // Rule at src/isa/s390x/inst.isle line 3788.
            return v5;
        }
        &LaneOrder::BigEndian => {
            let v4 = constructor_vec_merge_low(ctx, arg0, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 3785.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_merge_high_lane_order", "src/isa/s390x/inst.isle line 3784"
    )
}

// Generated as internal constructor for term clz_reg.
pub fn constructor_clz_reg<C: Context>(ctx: &mut C, arg0: i16, arg1: Reg) -> Reg {
    if arg0 == 0x40 {
        let v2 = constructor_temp_writable_regpair(ctx);
        let v3 = MInst::Flogr { rd: v2, rn: arg1 };
        let v4 = C::emit(ctx, &v3);
        let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
        let v6 = C::regpair_hi(ctx, v5);
        // Rule at src/isa/s390x/inst.isle line 3799.
        return v6;
    }
    let v2 = constructor_temp_writable_regpair(ctx);
    let v10 = &C::intcc_as_cond(ctx, &IntCC::Equal);
    let v5 = constructor_writable_regpair_to_regpair(ctx, v2);
    let v6 = C::regpair_hi(ctx, v5);
    let v11 = &constructor_cmov_imm(ctx, I64, v10, arg0, v6);
    let v3 = MInst::Flogr { rd: v2, rn: arg1 };
    let v7 = ProducesFlags::ProducesFlagsSideEffect { inst: v3 };
    let v12 = constructor_with_flags_reg(ctx, &v7, v11);
    // Rule at src/isa/s390x/inst.isle line 3805.
    return v12;
}

// Generated as internal constructor for term vecop_clz.
pub fn constructor_vecop_clz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3813.
            return VecUnaryOp::Clz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3814.
            return VecUnaryOp::Clz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3815.
            return VecUnaryOp::Clz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3816.
            return VecUnaryOp::Clz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_clz", "src/isa/s390x/inst.isle line 3812"
    )
}

// Generated as internal constructor for term vec_clz.
pub fn constructor_vec_clz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_clz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3819.
    return v3;
}

// Generated as internal constructor for term vecop_ctz.
pub fn constructor_vecop_ctz<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3823.
            return VecUnaryOp::Ctz8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3824.
            return VecUnaryOp::Ctz16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3825.
            return VecUnaryOp::Ctz32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3826.
            return VecUnaryOp::Ctz64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_ctz", "src/isa/s390x/inst.isle line 3822"
    )
}

// Generated as internal constructor for term vec_ctz.
pub fn constructor_vec_ctz<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_ctz(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 3829.
    return v3;
}

// Generated as internal constructor for term uint_sat_reg.
pub fn constructor_uint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3835.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0x100);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v10 = &constructor_cmov_imm(ctx, v4, v8, 0xFF, arg2);
                let v11 = constructor_with_flags_reg(ctx, v6, v10);
                // Rule at src/isa/s390x/inst.isle line 3836.
                return v11;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v13 = &constructor_icmpu_uimm32(ctx, v4, arg2, 0xFFFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v8, -0x1, arg2);
                let v16 = constructor_with_flags_reg(ctx, v13, v15);
                // Rule at src/isa/s390x/inst.isle line 3839.
                return v16;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v19 = constructor_imm(ctx, I64, 0xFFFFFFFF);
                let v20 = &constructor_icmpu_reg(ctx, I64, arg2, v19);
                let v21 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                let v22 = &constructor_bool(ctx, v20, v21);
                let v23 = constructor_select_bool_reg(ctx, I64, v22, v19, arg2);
                // Rule at src/isa/s390x/inst.isle line 3842.
                return v23;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "uint_sat_reg", "src/isa/s390x/inst.isle line 3834"
    )
}

// Generated as internal constructor for term sint_sat_reg.
pub fn constructor_sint_sat_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 3850.
        return arg2;
    }
    match arg0 {
        I8 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v6 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7F);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v9 = &constructor_cmov_imm(ctx, v4, v8, 0x7F, arg2);
                let v10 = constructor_with_flags_reg(ctx, v6, v9);
                let v12 = &constructor_icmps_simm16(ctx, v4, v10, -0x80);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v15 = &constructor_cmov_imm(ctx, v4, v14, -0x80, v10);
                let v16 = constructor_with_flags_reg(ctx, v12, v15);
                // Rule at src/isa/s390x/inst.isle line 3851.
                return v16;
            }
        }
        I16 => {
            let v3 = C::ty_32_or_64(ctx, arg1);
            if let Some(v4) = v3 {
                let v18 = &constructor_icmps_simm16(ctx, v4, arg2, 0x7FFF);
                let v8 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v19 = &constructor_cmov_imm(ctx, v4, v8, 0x7FFF, arg2);
                let v20 = constructor_with_flags_reg(ctx, v18, v19);
                let v22 = &constructor_icmps_simm16(ctx, v4, v20, -0x8000);
                let v14 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v23 = &constructor_cmov_imm(ctx, v4, v14, -0x8000, v20);
                let v24 = constructor_with_flags_reg(ctx, v22, v23);
                // Rule at src/isa/s390x/inst.isle line 3857.
                return v24;
            }
        }
        I32 => {
            if arg1 == I64 {
                let v27 = constructor_imm32(ctx, I64, 0x7FFFFFFF);
                let v28 = &constructor_icmps_reg(ctx, I64, arg2, v27);
                let v29 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                let v30 = &constructor_bool(ctx, v28, v29);
                let v31 = constructor_select_bool_reg(ctx, I64, v30, v27, arg2);
                let v33 = constructor_imm32(ctx, I64, -0x80000000);
                let v34 = &constructor_icmps_reg(ctx, I64, v31, v33);
                let v35 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                let v36 = &constructor_bool(ctx, v34, v35);
                let v37 = constructor_select_bool_reg(ctx, I64, v36, v33, v31);
                // Rule at src/isa/s390x/inst.isle line 3863.
                return v37;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sint_sat_reg", "src/isa/s390x/inst.isle line 3849"
    )
}

// Generated as internal constructor for term aluop_add.
pub fn constructor_aluop_add<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3879.
            return ALUOp::Add32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3880.
            return ALUOp::Add32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3881.
            return ALUOp::Add32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3882.
            return ALUOp::Add64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add", "src/isa/s390x/inst.isle line 3878"
    )
}

// Generated as internal constructor for term aluop_add_sext16.
pub fn constructor_aluop_add_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3885.
            return ALUOp::Add32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3886.
            return ALUOp::Add32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3887.
            return ALUOp::Add64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext16", "src/isa/s390x/inst.isle line 3884"
    )
}

// Generated as internal constructor for term aluop_add_sext32.
pub fn constructor_aluop_add_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3890.
        return ALUOp::Add64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_sext32", "src/isa/s390x/inst.isle line 3889"
    )
}

// Generated as internal constructor for term add_reg.
pub fn constructor_add_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3893.
    return v4;
}

// Generated as internal constructor for term add_reg_sext32.
pub fn constructor_add_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3896.
    return v4;
}

// Generated as internal constructor for term add_simm16.
pub fn constructor_add_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rrsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3899.
    return v4;
}

// Generated as internal constructor for term add_simm32.
pub fn constructor_add_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3902.
    return v4;
}

// Generated as internal constructor for term add_mem.
pub fn constructor_add_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_add(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3905.
    return v4;
}

// Generated as internal constructor for term add_mem_sext16.
pub fn constructor_add_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3908.
    return v4;
}

// Generated as internal constructor for term add_mem_sext32.
pub fn constructor_add_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3911.
    return v4;
}

// Generated as internal constructor for term vecop_add.
pub fn constructor_vecop_add<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 3918.
            return VecBinaryOp::Add128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 3914.
            return VecBinaryOp::Add8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 3915.
            return VecBinaryOp::Add16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 3916.
            return VecBinaryOp::Add32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 3917.
            return VecBinaryOp::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_add", "src/isa/s390x/inst.isle line 3913"
    )
}

// Generated as internal constructor for term vec_add.
pub fn constructor_vec_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_add(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3921.
    return v4;
}

// Generated as internal constructor for term aluop_add_logical.
pub fn constructor_aluop_add_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3927.
            return ALUOp::AddLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3928.
            return ALUOp::AddLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical", "src/isa/s390x/inst.isle line 3926"
    )
}

// Generated as internal constructor for term aluop_add_logical_zext32.
pub fn constructor_aluop_add_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3931.
        return ALUOp::AddLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_add_logical_zext32", "src/isa/s390x/inst.isle line 3930"
    )
}

// Generated as internal constructor for term add_logical_reg.
pub fn constructor_add_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3934.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_with_flags_paired.
pub fn constructor_add_logical_reg_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rrr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3937.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_reg_zext32.
pub fn constructor_add_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3941.
    return v4;
}

// Generated as internal constructor for term add_logical_reg_zext32_with_flags_paired.
pub fn constructor_add_logical_reg_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rr_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3944.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_zimm32.
pub fn constructor_add_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3948.
    return v4;
}

// Generated as internal constructor for term add_logical_zimm32_with_flags_paired.
pub fn constructor_add_logical_zimm32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_ruimm32_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3951.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem.
pub fn constructor_add_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3955.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_with_flags_paired.
pub fn constructor_add_logical_mem_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3958.
    return v4.clone();
}

// Generated as internal constructor for term add_logical_mem_zext32.
pub fn constructor_add_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3962.
    return v4;
}

// Generated as internal constructor for term add_logical_mem_zext32_with_flags_paired.
pub fn constructor_add_logical_mem_zext32_with_flags_paired<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_aluop_add_logical_zext32(ctx, arg0);
    let v4 = &constructor_alu_rx_with_flags_paired(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3965.
    return v4.clone();
}

// Generated as internal constructor for term aluop_sub.
pub fn constructor_aluop_sub<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 3972.
            return ALUOp::Sub32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3973.
            return ALUOp::Sub32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3974.
            return ALUOp::Sub32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3975.
            return ALUOp::Sub64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub", "src/isa/s390x/inst.isle line 3971"
    )
}

// Generated as internal constructor for term aluop_sub_sext16.
pub fn constructor_aluop_sub_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 3978.
            return ALUOp::Sub32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 3979.
            return ALUOp::Sub32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 3980.
            return ALUOp::Sub64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext16", "src/isa/s390x/inst.isle line 3977"
    )
}

// Generated as internal constructor for term aluop_sub_sext32.
pub fn constructor_aluop_sub_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 3983.
        return ALUOp::Sub64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_sext32", "src/isa/s390x/inst.isle line 3982"
    )
}

// Generated as internal constructor for term sub_reg.
pub fn constructor_sub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3986.
    return v4;
}

// Generated as internal constructor for term sub_reg_sext32.
pub fn constructor_sub_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3989.
    return v4;
}

// Generated as internal constructor for term sub_mem.
pub fn constructor_sub_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_sub(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3992.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext16.
pub fn constructor_sub_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3995.
    return v4;
}

// Generated as internal constructor for term sub_mem_sext32.
pub fn constructor_sub_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 3998.
    return v4;
}

// Generated as internal constructor for term vecop_sub.
pub fn constructor_vecop_sub<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I128 => {
            // Rule at src/isa/s390x/inst.isle line 4005.
            return VecBinaryOp::Sub128;
        }
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4001.
            return VecBinaryOp::Sub8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4002.
            return VecBinaryOp::Sub16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4003.
            return VecBinaryOp::Sub32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4004.
            return VecBinaryOp::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_sub", "src/isa/s390x/inst.isle line 4000"
    )
}

// Generated as internal constructor for term vec_sub.
pub fn constructor_vec_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_sub(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4008.
    return v4;
}

// Generated as internal constructor for term aluop_sub_logical.
pub fn constructor_aluop_sub_logical<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4014.
            return ALUOp::SubLogical32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4015.
            return ALUOp::SubLogical64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical", "src/isa/s390x/inst.isle line 4013"
    )
}

// Generated as internal constructor for term aluop_sub_logical_zext32.
pub fn constructor_aluop_sub_logical_zext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4018.
        return ALUOp::SubLogical64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_sub_logical_zext32", "src/isa/s390x/inst.isle line 4017"
    )
}

// Generated as internal constructor for term sub_logical_reg.
pub fn constructor_sub_logical_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4021.
    return v4;
}

// Generated as internal constructor for term sub_logical_reg_zext32.
pub fn constructor_sub_logical_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical_zext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4024.
    return v4;
}

// Generated as internal constructor for term sub_logical_zimm32.
pub fn constructor_sub_logical_zimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_ruimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4027.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem.
pub fn constructor_sub_logical_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4030.
    return v4;
}

// Generated as internal constructor for term sub_logical_mem_zext32.
pub fn constructor_sub_logical_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_sub_logical(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4033.
    return v4;
}

// Generated as internal constructor for term aluop_mul.
pub fn constructor_aluop_mul<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4039.
            return ALUOp::Mul32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4040.
            return ALUOp::Mul32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4041.
            return ALUOp::Mul32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4042.
            return ALUOp::Mul64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul", "src/isa/s390x/inst.isle line 4038"
    )
}

// Generated as internal constructor for term aluop_mul_sext16.
pub fn constructor_aluop_mul_sext16<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    match arg0 {
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4045.
            return ALUOp::Mul32Ext16;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4046.
            return ALUOp::Mul32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4047.
            return ALUOp::Mul64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext16", "src/isa/s390x/inst.isle line 4044"
    )
}

// Generated as internal constructor for term aluop_mul_sext32.
pub fn constructor_aluop_mul_sext32<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4050.
        return ALUOp::Mul64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_mul_sext32", "src/isa/s390x/inst.isle line 4049"
    )
}

// Generated as internal constructor for term mul_reg.
pub fn constructor_mul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4053.
    return v4;
}

// Generated as internal constructor for term mul_reg_sext32.
pub fn constructor_mul_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4056.
    return v4;
}

// Generated as internal constructor for term mul_simm16.
pub fn constructor_mul_simm16<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i16) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm16(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4059.
    return v4;
}

// Generated as internal constructor for term mul_simm32.
pub fn constructor_mul_simm32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: i32) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rsimm32(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4062.
    return v4;
}

// Generated as internal constructor for term mul_mem.
pub fn constructor_mul_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_mul(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4065.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext16.
pub fn constructor_mul_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext16(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4068.
    return v4;
}

// Generated as internal constructor for term mul_mem_sext32.
pub fn constructor_mul_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    let v3 = &constructor_aluop_mul_sext32(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4071.
    return v4;
}

// Generated as internal constructor for term vecop_mul.
pub fn constructor_vecop_mul<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4074.
            return VecBinaryOp::Mul8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4075.
            return VecBinaryOp::Mul16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4076.
            return VecBinaryOp::Mul32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_mul", "src/isa/s390x/inst.isle line 4073"
    )
}

// Generated as internal constructor for term vec_mul.
pub fn constructor_vec_mul<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_mul(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4080.
    return v4;
}

// Generated as internal constructor for term vecop_umulhi.
pub fn constructor_vecop_umulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4083.
            return VecBinaryOp::UMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4084.
            return VecBinaryOp::UMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4085.
            return VecBinaryOp::UMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umulhi", "src/isa/s390x/inst.isle line 4082"
    )
}

// Generated as internal constructor for term vec_umulhi.
pub fn constructor_vec_umulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4089.
    return v4;
}

// Generated as internal constructor for term vecop_smulhi.
pub fn constructor_vecop_smulhi<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4092.
            return VecBinaryOp::SMulHi8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4093.
            return VecBinaryOp::SMulHi16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4094.
            return VecBinaryOp::SMulHi32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smulhi", "src/isa/s390x/inst.isle line 4091"
    )
}

// Generated as internal constructor for term vec_smulhi.
pub fn constructor_vec_smulhi<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smulhi(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4098.
    return v4;
}

// Generated as internal constructor for term vecop_umul_even.
pub fn constructor_vecop_umul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4101.
            return VecBinaryOp::UMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4102.
            return VecBinaryOp::UMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4103.
            return VecBinaryOp::UMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_even", "src/isa/s390x/inst.isle line 4100"
    )
}

// Generated as internal constructor for term vec_umul_even.
pub fn constructor_vec_umul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4107.
    return v4;
}

// Generated as internal constructor for term vecop_smul_even.
pub fn constructor_vecop_smul_even<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4110.
            return VecBinaryOp::SMulEven8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4111.
            return VecBinaryOp::SMulEven16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4112.
            return VecBinaryOp::SMulEven32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_even", "src/isa/s390x/inst.isle line 4109"
    )
}

// Generated as internal constructor for term vec_smul_even.
pub fn constructor_vec_smul_even<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_even(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4116.
    return v4;
}

// Generated as internal constructor for term vecop_umul_odd.
pub fn constructor_vecop_umul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4119.
            return VecBinaryOp::UMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4120.
            return VecBinaryOp::UMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4121.
            return VecBinaryOp::UMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umul_odd", "src/isa/s390x/inst.isle line 4118"
    )
}

// Generated as internal constructor for term vec_umul_odd.
pub fn constructor_vec_umul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4125.
    return v4;
}

// Generated as internal constructor for term vecop_smul_odd.
pub fn constructor_vecop_smul_odd<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4128.
            return VecBinaryOp::SMulOdd8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4129.
            return VecBinaryOp::SMulOdd16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4130.
            return VecBinaryOp::SMulOdd32x4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smul_odd", "src/isa/s390x/inst.isle line 4127"
    )
}

// Generated as internal constructor for term vec_smul_odd.
pub fn constructor_vec_smul_odd<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smul_odd(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4134.
    return v4;
}

// Generated as internal constructor for term udivmod.
pub fn constructor_udivmod<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: RegPair,
    arg2: Reg,
) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_udivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4140.
            return v3;
        }
        I64 => {
            let v4 = constructor_udivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4141.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "udivmod", "src/isa/s390x/inst.isle line 4139"
    )
}

// Generated as internal constructor for term sdivmod.
pub fn constructor_sdivmod<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> RegPair {
    match arg0 {
        I32 => {
            let v3 = constructor_sdivmod32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4147.
            return v3;
        }
        I64 => {
            let v4 = constructor_sdivmod64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4148.
            return v4;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sdivmod", "src/isa/s390x/inst.isle line 4146"
    )
}

// Generated as internal constructor for term vecop_umax.
pub fn constructor_vecop_umax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4154.
            return VecBinaryOp::UMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4155.
            return VecBinaryOp::UMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4156.
            return VecBinaryOp::UMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4157.
            return VecBinaryOp::UMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umax", "src/isa/s390x/inst.isle line 4153"
    )
}

// Generated as internal constructor for term vec_umax.
pub fn constructor_vec_umax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4160.
    return v4;
}

// Generated as internal constructor for term vecop_smax.
pub fn constructor_vecop_smax<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4166.
            return VecBinaryOp::SMax8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4167.
            return VecBinaryOp::SMax16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4168.
            return VecBinaryOp::SMax32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4169.
            return VecBinaryOp::SMax64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smax", "src/isa/s390x/inst.isle line 4165"
    )
}

// Generated as internal constructor for term vec_smax.
pub fn constructor_vec_smax<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smax(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4172.
    return v4;
}

// Generated as internal constructor for term vecop_umin.
pub fn constructor_vecop_umin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4178.
            return VecBinaryOp::UMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4179.
            return VecBinaryOp::UMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4180.
            return VecBinaryOp::UMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4181.
            return VecBinaryOp::UMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_umin", "src/isa/s390x/inst.isle line 4177"
    )
}

// Generated as internal constructor for term vec_umin.
pub fn constructor_vec_umin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_umin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4184.
    return v4;
}

// Generated as internal constructor for term vecop_smin.
pub fn constructor_vecop_smin<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4190.
            return VecBinaryOp::SMin8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4191.
            return VecBinaryOp::SMin16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4192.
            return VecBinaryOp::SMin32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4193.
            return VecBinaryOp::SMin64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_smin", "src/isa/s390x/inst.isle line 4189"
    )
}

// Generated as internal constructor for term vec_smin.
pub fn constructor_vec_smin<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_smin(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4196.
    return v4;
}

// Generated as internal constructor for term vecop_uavg.
pub fn constructor_vecop_uavg<C: Context>(ctx: &mut C, arg0: Type) -> VecBinaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4202.
            return VecBinaryOp::UAvg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4203.
            return VecBinaryOp::UAvg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4204.
            return VecBinaryOp::UAvg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4205.
            return VecBinaryOp::UAvg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_uavg", "src/isa/s390x/inst.isle line 4201"
    )
}

// Generated as internal constructor for term vec_uavg.
pub fn constructor_vec_uavg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vecop_uavg(ctx, arg0);
    let v4 = constructor_vec_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4208.
    return v4;
}

// Generated as internal constructor for term aluop_and.
pub fn constructor_aluop_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4215.
        return ALUOp::And64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4214.
        return ALUOp::And32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and", "src/isa/s390x/inst.isle line 4213"
    )
}

// Generated as internal constructor for term and_reg.
pub fn constructor_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4218.
    return v4;
}

// Generated as internal constructor for term and_uimm16shifted.
pub fn constructor_and_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4221.
    return v4;
}

// Generated as internal constructor for term and_uimm32shifted.
pub fn constructor_and_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4224.
    return v4;
}

// Generated as internal constructor for term and_mem.
pub fn constructor_and_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_and(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4227.
    return v4;
}

// Generated as internal constructor for term vec_and.
pub fn constructor_vec_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::And128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4230.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and", "src/isa/s390x/inst.isle line 4229"
    )
}

// Generated as internal constructor for term aluop_or.
pub fn constructor_aluop_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4237.
        return ALUOp::Orr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4236.
        return ALUOp::Orr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or", "src/isa/s390x/inst.isle line 4235"
    )
}

// Generated as internal constructor for term or_reg.
pub fn constructor_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4240.
    return v4;
}

// Generated as internal constructor for term or_uimm16shifted.
pub fn constructor_or_uimm16shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm16Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm16shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4243.
    return v4;
}

// Generated as internal constructor for term or_uimm32shifted.
pub fn constructor_or_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4246.
    return v4;
}

// Generated as internal constructor for term or_mem.
pub fn constructor_or_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_or(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4249.
    return v4;
}

// Generated as internal constructor for term vec_or.
pub fn constructor_vec_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Orr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4252.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or", "src/isa/s390x/inst.isle line 4251"
    )
}

// Generated as internal constructor for term aluop_xor.
pub fn constructor_aluop_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4259.
        return ALUOp::Xor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4258.
        return ALUOp::Xor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_xor", "src/isa/s390x/inst.isle line 4257"
    )
}

// Generated as internal constructor for term xor_reg.
pub fn constructor_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4262.
    return v4;
}

// Generated as internal constructor for term xor_uimm32shifted.
pub fn constructor_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: UImm32Shifted,
) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_ruimm32shifted(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4265.
    return v4;
}

// Generated as internal constructor for term xor_mem.
pub fn constructor_xor_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: &MemArg) -> Reg {
    let v3 = &constructor_aluop_xor(ctx, arg0);
    let v4 = constructor_alu_rx(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4268.
    return v4;
}

// Generated as internal constructor for term push_xor_uimm32shifted.
pub fn constructor_push_xor_uimm32shifted<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: UImm32Shifted,
) -> Reg {
    let v5 = &constructor_aluop_xor(ctx, arg1);
    let v6 = constructor_push_alu_uimm32shifted(ctx, arg0, v5, arg2, arg3, arg4);
    // Rule at src/isa/s390x/inst.isle line 4271.
    return v6;
}

// Generated as internal constructor for term vec_xor.
pub fn constructor_vec_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::Xor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4275.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_xor", "src/isa/s390x/inst.isle line 4274"
    )
}

// Generated as internal constructor for term not_reg.
pub fn constructor_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v8 = C::gpr64_ty(ctx, arg0);
    if let Some(v9) = v8 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v10 = constructor_xor_uimm32shifted(ctx, v9, arg1, v6);
        let v12 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v13 = constructor_xor_uimm32shifted(ctx, v9, v10, v12);
        // Rule at src/isa/s390x/inst.isle line 4283.
        return v13;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v7 = constructor_xor_uimm32shifted(ctx, v2, arg1, v6);
        // Rule at src/isa/s390x/inst.isle line 4281.
        return v7;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "not_reg", "src/isa/s390x/inst.isle line 4280"
    )
}

// Generated as internal constructor for term push_not_reg.
pub fn constructor_push_not_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v10 = C::gpr64_ty(ctx, arg1);
    if let Some(v11) = v10 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v12 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, arg3, v8);
        let v14 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x20);
        let v15 = constructor_push_xor_uimm32shifted(ctx, arg0, v11, arg2, v12, v14);
        // Rule at src/isa/s390x/inst.isle line 4291.
        return v15;
    }
    let v2 = C::gpr32_ty(ctx, arg1);
    if let Some(v3) = v2 {
        let v8 = C::uimm32shifted(ctx, 0xFFFFFFFF, 0x0);
        let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, v3, arg2, arg3, v8);
        // Rule at src/isa/s390x/inst.isle line 4289.
        return v9;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_not_reg", "src/isa/s390x/inst.isle line 4288"
    )
}

// Generated as internal constructor for term vec_not.
pub fn constructor_vec_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = constructor_vec_not_or(ctx, arg0, arg1, arg1);
    // Rule at src/isa/s390x/inst.isle line 4296.
    return v2;
}

// Generated as internal constructor for term aluop_not_and.
pub fn constructor_aluop_not_and<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4303.
        return ALUOp::NotAnd64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4302.
        return ALUOp::NotAnd32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_and", "src/isa/s390x/inst.isle line 4301"
    )
}

// Generated as internal constructor for term not_and_reg.
pub fn constructor_not_and_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_and(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4306.
    return v4;
}

// Generated as internal constructor for term vec_not_and.
pub fn constructor_vec_not_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotAnd128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4309.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_and", "src/isa/s390x/inst.isle line 4308"
    )
}

// Generated as internal constructor for term aluop_not_or.
pub fn constructor_aluop_not_or<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4316.
        return ALUOp::NotOrr64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4315.
        return ALUOp::NotOrr32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_or", "src/isa/s390x/inst.isle line 4314"
    )
}

// Generated as internal constructor for term not_or_reg.
pub fn constructor_not_or_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_or(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4319.
    return v4;
}

// Generated as internal constructor for term vec_not_or.
pub fn constructor_vec_not_or<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotOrr128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4322.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_or", "src/isa/s390x/inst.isle line 4321"
    )
}

// Generated as internal constructor for term aluop_not_xor.
pub fn constructor_aluop_not_xor<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4329.
        return ALUOp::NotXor64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4328.
        return ALUOp::NotXor32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_not_xor", "src/isa/s390x/inst.isle line 4327"
    )
}

// Generated as internal constructor for term not_xor_reg.
pub fn constructor_not_xor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_not_xor(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4332.
    return v4;
}

// Generated as internal constructor for term vec_not_xor.
pub fn constructor_vec_not_xor<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::NotXor128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4335.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_not_xor", "src/isa/s390x/inst.isle line 4334"
    )
}

// Generated as internal constructor for term aluop_and_not.
pub fn constructor_aluop_and_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4342.
        return ALUOp::AndNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4341.
        return ALUOp::AndNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_and_not", "src/isa/s390x/inst.isle line 4340"
    )
}

// Generated as internal constructor for term and_not_reg.
pub fn constructor_and_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_and_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4345.
    return v4;
}

// Generated as internal constructor for term vec_and_not.
pub fn constructor_vec_and_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::AndNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4348.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_and_not", "src/isa/s390x/inst.isle line 4347"
    )
}

// Generated as internal constructor for term aluop_or_not.
pub fn constructor_aluop_or_not<C: Context>(ctx: &mut C, arg0: Type) -> ALUOp {
    let v4 = C::gpr64_ty(ctx, arg0);
    if let Some(v5) = v4 {
        // Rule at src/isa/s390x/inst.isle line 4355.
        return ALUOp::OrrNot64;
    }
    let v1 = C::gpr32_ty(ctx, arg0);
    if let Some(v2) = v1 {
        // Rule at src/isa/s390x/inst.isle line 4354.
        return ALUOp::OrrNot32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "aluop_or_not", "src/isa/s390x/inst.isle line 4353"
    )
}

// Generated as internal constructor for term or_not_reg.
pub fn constructor_or_not_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_aluop_or_not(ctx, arg0);
    let v4 = constructor_alu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4358.
    return v4;
}

// Generated as internal constructor for term vec_or_not.
pub fn constructor_vec_or_not<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::vr128_ty(ctx, arg0);
    if let Some(v2) = v1 {
        let v6 = constructor_vec_rrr(ctx, v2, &VecBinaryOp::OrrNot128, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4361.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_or_not", "src/isa/s390x/inst.isle line 4360"
    )
}

// Generated as internal constructor for term vec_bitpermute.
pub fn constructor_vec_bitpermute<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I64X2, &VecBinaryOp::BitPermute128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4367.
    return v4;
}

// Generated as internal constructor for term unaryop_abs.
pub fn constructor_unaryop_abs<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4373.
            return UnaryOp::Abs32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4374.
            return UnaryOp::Abs64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs", "src/isa/s390x/inst.isle line 4372"
    )
}

// Generated as internal constructor for term unaryop_abs_sext32.
pub fn constructor_unaryop_abs_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4377.
        return UnaryOp::Abs64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_abs_sext32", "src/isa/s390x/inst.isle line 4376"
    )
}

// Generated as internal constructor for term abs_reg.
pub fn constructor_abs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4380.
    return v3;
}

// Generated as internal constructor for term abs_reg_sext32.
pub fn constructor_abs_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_abs_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4383.
    return v3;
}

// Generated as internal constructor for term vecop_abs.
pub fn constructor_vecop_abs<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4386.
            return VecUnaryOp::Abs8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4387.
            return VecUnaryOp::Abs16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4388.
            return VecUnaryOp::Abs32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4389.
            return VecUnaryOp::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_abs", "src/isa/s390x/inst.isle line 4385"
    )
}

// Generated as internal constructor for term vec_abs.
pub fn constructor_vec_abs<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_abs(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4392.
    return v3;
}

// Generated as internal constructor for term unaryop_neg.
pub fn constructor_unaryop_neg<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4398.
            return UnaryOp::Neg32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4399.
            return UnaryOp::Neg32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4400.
            return UnaryOp::Neg32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4401.
            return UnaryOp::Neg64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg", "src/isa/s390x/inst.isle line 4397"
    )
}

// Generated as internal constructor for term unaryop_neg_sext32.
pub fn constructor_unaryop_neg_sext32<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4404.
        return UnaryOp::Neg64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_neg_sext32", "src/isa/s390x/inst.isle line 4403"
    )
}

// Generated as internal constructor for term neg_reg.
pub fn constructor_neg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4407.
    return v3;
}

// Generated as internal constructor for term neg_reg_sext32.
pub fn constructor_neg_reg_sext32<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_neg_sext32(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4410.
    return v3;
}

// Generated as internal constructor for term vecop_neg.
pub fn constructor_vecop_neg<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4413.
            return VecUnaryOp::Neg8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4414.
            return VecUnaryOp::Neg16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4415.
            return VecUnaryOp::Neg32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4416.
            return VecUnaryOp::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_neg", "src/isa/s390x/inst.isle line 4412"
    )
}

// Generated as internal constructor for term vec_neg.
pub fn constructor_vec_neg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_neg(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4419.
    return v3;
}

// Generated as internal constructor for term unaryop_bswap.
pub fn constructor_unaryop_bswap<C: Context>(ctx: &mut C, arg0: Type) -> UnaryOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4425.
            return UnaryOp::BSwap32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4426.
            return UnaryOp::BSwap64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "unaryop_bswap", "src/isa/s390x/inst.isle line 4424"
    )
}

// Generated as internal constructor for term bswap_reg.
pub fn constructor_bswap_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_unaryop_bswap(ctx, arg0);
    let v3 = constructor_unary_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4429.
    return v3;
}

// Generated as internal constructor for term push_bswap_reg.
pub fn constructor_push_bswap_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_unaryop_bswap(ctx, arg1);
    let v5 = constructor_push_unary(ctx, arg0, v4, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4432.
    return v5;
}

// Generated as internal constructor for term shiftop_rot.
pub fn constructor_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4438.
            return ShiftOp::RotL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4439.
            return ShiftOp::RotL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_rot", "src/isa/s390x/inst.isle line 4437"
    )
}

// Generated as internal constructor for term rot_reg.
pub fn constructor_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4442.
    return v5;
}

// Generated as internal constructor for term rot_imm.
pub fn constructor_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4446.
    return v5;
}

// Generated as internal constructor for term rot_imm_reg.
pub fn constructor_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_shiftop_rot(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4450.
    return v5;
}

// Generated as internal constructor for term push_rot_imm_reg.
pub fn constructor_push_rot_imm_reg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: u8,
    arg5: Reg,
) -> Reg {
    let v6 = &constructor_shiftop_rot(ctx, arg1);
    let v7 = constructor_push_shift(ctx, arg0, v6, arg2, arg3, arg4, arg5);
    // Rule at src/isa/s390x/inst.isle line 4454.
    return v7;
}

// Generated as internal constructor for term vec_shiftop_rot.
pub fn constructor_vec_shiftop_rot<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4458.
            return VecShiftOp::RotL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4459.
            return VecShiftOp::RotL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4460.
            return VecShiftOp::RotL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4461.
            return VecShiftOp::RotL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_rot", "src/isa/s390x/inst.isle line 4457"
    )
}

// Generated as internal constructor for term vec_rot_reg.
pub fn constructor_vec_rot_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4464.
    return v5;
}

// Generated as internal constructor for term vec_rot_imm.
pub fn constructor_vec_rot_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_rot(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4468.
    return v5;
}

// Generated as internal constructor for term shiftop_lshl.
pub fn constructor_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/inst.isle line 4475.
            return ShiftOp::LShL32;
        }
        I16 => {
            // Rule at src/isa/s390x/inst.isle line 4476.
            return ShiftOp::LShL32;
        }
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4477.
            return ShiftOp::LShL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4478.
            return ShiftOp::LShL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshl", "src/isa/s390x/inst.isle line 4474"
    )
}

// Generated as internal constructor for term lshl_reg.
pub fn constructor_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4481.
    return v5;
}

// Generated as internal constructor for term lshl_imm.
pub fn constructor_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4485.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshl.
pub fn constructor_vec_shiftop_lshl<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4489.
            return VecShiftOp::LShL8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4490.
            return VecShiftOp::LShL16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4491.
            return VecShiftOp::LShL32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4492.
            return VecShiftOp::LShL64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshl", "src/isa/s390x/inst.isle line 4488"
    )
}

// Generated as internal constructor for term vec_lshl_reg.
pub fn constructor_vec_lshl_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4495.
    return v5;
}

// Generated as internal constructor for term vec_lshl_imm.
pub fn constructor_vec_lshl_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshl(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4499.
    return v5;
}

// Generated as internal constructor for term vec_lshl_by_byte.
pub fn constructor_vec_lshl_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4503.
    return v4;
}

// Generated as internal constructor for term vec_lshl_by_bit.
pub fn constructor_vec_lshl_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShLByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4506.
    return v4;
}

// Generated as internal constructor for term shiftop_lshr.
pub fn constructor_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4512.
            return ShiftOp::LShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4513.
            return ShiftOp::LShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_lshr", "src/isa/s390x/inst.isle line 4511"
    )
}

// Generated as internal constructor for term lshr_reg.
pub fn constructor_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4516.
    return v5;
}

// Generated as internal constructor for term lshr_imm.
pub fn constructor_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4520.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_lshr.
pub fn constructor_vec_shiftop_lshr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4524.
            return VecShiftOp::LShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4525.
            return VecShiftOp::LShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4526.
            return VecShiftOp::LShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4527.
            return VecShiftOp::LShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_lshr", "src/isa/s390x/inst.isle line 4523"
    )
}

// Generated as internal constructor for term vec_lshr_reg.
pub fn constructor_vec_lshr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4530.
    return v5;
}

// Generated as internal constructor for term vec_lshr_imm.
pub fn constructor_vec_lshr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_lshr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4534.
    return v5;
}

// Generated as internal constructor for term vec_lshr_by_byte.
pub fn constructor_vec_lshr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4538.
    return v4;
}

// Generated as internal constructor for term vec_lshr_by_bit.
pub fn constructor_vec_lshr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::LShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4541.
    return v4;
}

// Generated as internal constructor for term shiftop_ashr.
pub fn constructor_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> ShiftOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4547.
            return ShiftOp::AShR32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4548.
            return ShiftOp::AShR64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "shiftop_ashr", "src/isa/s390x/inst.isle line 4546"
    )
}

// Generated as internal constructor for term ashr_reg.
pub fn constructor_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4551.
    return v5;
}

// Generated as internal constructor for term ashr_imm.
pub fn constructor_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4555.
    return v5;
}

// Generated as internal constructor for term vec_shiftop_ashr.
pub fn constructor_vec_shiftop_ashr<C: Context>(ctx: &mut C, arg0: Type) -> VecShiftOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4559.
            return VecShiftOp::AShR8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4560.
            return VecShiftOp::AShR16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4561.
            return VecShiftOp::AShR32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4562.
            return VecShiftOp::AShR64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_shiftop_ashr", "src/isa/s390x/inst.isle line 4558"
    )
}

// Generated as internal constructor for term vec_ashr_reg.
pub fn constructor_vec_ashr_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, 0x0, arg2);
    // Rule at src/isa/s390x/inst.isle line 4565.
    return v5;
}

// Generated as internal constructor for term vec_ashr_imm.
pub fn constructor_vec_ashr_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: u8) -> Reg {
    let v3 = &constructor_vec_shiftop_ashr(ctx, arg0);
    let v4 = C::zero_reg(ctx);
    let v5 = constructor_vec_shift_rr(ctx, arg0, v3, arg1, arg2, v4);
    // Rule at src/isa/s390x/inst.isle line 4569.
    return v5;
}

// Generated as internal constructor for term vec_ashr_by_byte.
pub fn constructor_vec_ashr_by_byte<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByByte128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4573.
    return v4;
}

// Generated as internal constructor for term vec_ashr_by_bit.
pub fn constructor_vec_ashr_by_bit<C: Context>(ctx: &mut C, arg0: Reg, arg1: Reg) -> Reg {
    let v4 = constructor_vec_rrr(ctx, I8X16, &VecBinaryOp::AShRByBit128, arg0, arg1);
    // Rule at src/isa/s390x/inst.isle line 4576.
    return v4;
}

// Generated as internal constructor for term popcnt_byte.
pub fn constructor_popcnt_byte<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntByte, arg0);
    // Rule at src/isa/s390x/inst.isle line 4582.
    return v3;
}

// Generated as internal constructor for term popcnt_reg.
pub fn constructor_popcnt_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Reg {
    let v3 = constructor_unary_rr(ctx, I64, &UnaryOp::PopcntReg, arg0);
    // Rule at src/isa/s390x/inst.isle line 4585.
    return v3;
}

// Generated as internal constructor for term vecop_popcnt.
pub fn constructor_vecop_popcnt<C: Context>(ctx: &mut C, arg0: Type) -> VecUnaryOp {
    match arg0 {
        I8X16 => {
            // Rule at src/isa/s390x/inst.isle line 4588.
            return VecUnaryOp::Popcnt8x16;
        }
        I16X8 => {
            // Rule at src/isa/s390x/inst.isle line 4589.
            return VecUnaryOp::Popcnt16x8;
        }
        I32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4590.
            return VecUnaryOp::Popcnt32x4;
        }
        I64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4591.
            return VecUnaryOp::Popcnt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_popcnt", "src/isa/s390x/inst.isle line 4587"
    )
}

// Generated as internal constructor for term vec_popcnt.
pub fn constructor_vec_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_vecop_popcnt(ctx, arg0);
    let v3 = constructor_vec_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4594.
    return v3;
}

// Generated as internal constructor for term atomic_rmw_and.
pub fn constructor_atomic_rmw_and<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::And32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4600.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::And64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4601.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_and", "src/isa/s390x/inst.isle line 4599"
    )
}

// Generated as internal constructor for term atomic_rmw_or.
pub fn constructor_atomic_rmw_or<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Orr32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4604.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Orr64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4605.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_or", "src/isa/s390x/inst.isle line 4603"
    )
}

// Generated as internal constructor for term atomic_rmw_xor.
pub fn constructor_atomic_rmw_xor<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Xor32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4608.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Xor64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4609.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_xor", "src/isa/s390x/inst.isle line 4607"
    )
}

// Generated as internal constructor for term atomic_rmw_add.
pub fn constructor_atomic_rmw_add<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v5 = constructor_atomic_rmw_impl(ctx, I32, &ALUOp::Add32, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4612.
            return v5;
        }
        I64 => {
            let v8 = constructor_atomic_rmw_impl(ctx, I64, &ALUOp::Add64, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4613.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_add", "src/isa/s390x/inst.isle line 4611"
    )
}

// Generated as internal constructor for term atomic_cas_impl.
pub fn constructor_atomic_cas_impl<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: &MemArg,
) -> Reg {
    match arg0 {
        I32 => {
            let v4 = constructor_atomic_cas32(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4619.
            return v4;
        }
        I64 => {
            let v5 = constructor_atomic_cas64(ctx, arg1, arg2, arg3);
            // Rule at src/isa/s390x/inst.isle line 4620.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_impl", "src/isa/s390x/inst.isle line 4618"
    )
}

// Generated as internal constructor for term push_atomic_cas.
pub fn constructor_push_atomic_cas<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: WritableReg,
    arg3: Reg,
    arg4: &MemArg,
) -> Reg {
    match arg1 {
        I32 => {
            let v5 = constructor_push_atomic_cas32(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4623.
            return v5;
        }
        I64 => {
            let v6 = constructor_push_atomic_cas64(ctx, arg0, arg2, arg3, arg4);
            // Rule at src/isa/s390x/inst.isle line 4624.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "push_atomic_cas", "src/isa/s390x/inst.isle line 4622"
    )
}

// Generated as internal constructor for term fpuop2_add.
pub fn constructor_fpuop2_add<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4630.
            return FPUOp2::Add32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4631.
            return FPUOp2::Add64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4632.
            return FPUOp2::Add32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4633.
            return FPUOp2::Add64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_add", "src/isa/s390x/inst.isle line 4629"
    )
}

// Generated as internal constructor for term fadd_reg.
pub fn constructor_fadd_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_add(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4636.
    return v4;
}

// Generated as internal constructor for term fpuop2_sub.
pub fn constructor_fpuop2_sub<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4642.
            return FPUOp2::Sub32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4643.
            return FPUOp2::Sub64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4644.
            return FPUOp2::Sub32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4645.
            return FPUOp2::Sub64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_sub", "src/isa/s390x/inst.isle line 4641"
    )
}

// Generated as internal constructor for term fsub_reg.
pub fn constructor_fsub_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_sub(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4648.
    return v4;
}

// Generated as internal constructor for term fpuop2_mul.
pub fn constructor_fpuop2_mul<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4654.
            return FPUOp2::Mul32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4655.
            return FPUOp2::Mul64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4656.
            return FPUOp2::Mul32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4657.
            return FPUOp2::Mul64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_mul", "src/isa/s390x/inst.isle line 4653"
    )
}

// Generated as internal constructor for term fmul_reg.
pub fn constructor_fmul_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_mul(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4660.
    return v4;
}

// Generated as internal constructor for term fpuop2_div.
pub fn constructor_fpuop2_div<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4666.
            return FPUOp2::Div32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4667.
            return FPUOp2::Div64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4668.
            return FPUOp2::Div32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4669.
            return FPUOp2::Div64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_div", "src/isa/s390x/inst.isle line 4665"
    )
}

// Generated as internal constructor for term fdiv_reg.
pub fn constructor_fdiv_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_div(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4672.
    return v4;
}

// Generated as internal constructor for term fpuop2_min.
pub fn constructor_fpuop2_min<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4678.
            return FPUOp2::Min32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4679.
            return FPUOp2::Min64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4680.
            return FPUOp2::Min32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4681.
            return FPUOp2::Min64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min", "src/isa/s390x/inst.isle line 4677"
    )
}

// Generated as internal constructor for term fmin_reg.
pub fn constructor_fmin_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_min(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4684.
    return v4;
}

// Generated as internal constructor for term fpuop2_max.
pub fn constructor_fpuop2_max<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4690.
            return FPUOp2::Max32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4691.
            return FPUOp2::Max64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4692.
            return FPUOp2::Max32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4693.
            return FPUOp2::Max64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max", "src/isa/s390x/inst.isle line 4689"
    )
}

// Generated as internal constructor for term fmax_reg.
pub fn constructor_fmax_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v3 = &constructor_fpuop2_max(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4696.
    return v4;
}

// Generated as internal constructor for term fpuop2_min_pseudo.
pub fn constructor_fpuop2_min_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4702.
            return FPUOp2::MinPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4703.
            return FPUOp2::MinPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4704.
            return FPUOp2::MinPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4705.
            return FPUOp2::MinPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_min_pseudo", "src/isa/s390x/inst.isle line 4701"
    )
}

// Generated as internal constructor for term fmin_pseudo_reg.
pub fn constructor_fmin_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_min_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4708.
    return v4;
}

// Generated as internal constructor for term fpuop2_max_pseudo.
pub fn constructor_fpuop2_max_pseudo<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp2 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4714.
            return FPUOp2::MaxPseudo32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4715.
            return FPUOp2::MaxPseudo64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4716.
            return FPUOp2::MaxPseudo32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4717.
            return FPUOp2::MaxPseudo64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop2_max_pseudo", "src/isa/s390x/inst.isle line 4713"
    )
}

// Generated as internal constructor for term fmax_pseudo_reg.
pub fn constructor_fmax_pseudo_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> Reg {
    let v3 = &constructor_fpuop2_max_pseudo(ctx, arg0);
    let v4 = constructor_fpu_rrr(ctx, arg0, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4720.
    return v4;
}

// Generated as internal constructor for term fpuop3_fma.
pub fn constructor_fpuop3_fma<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp3 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4726.
            return FPUOp3::MAdd32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4727.
            return FPUOp3::MAdd64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4728.
            return FPUOp3::MAdd32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4729.
            return FPUOp3::MAdd64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop3_fma", "src/isa/s390x/inst.isle line 4725"
    )
}

// Generated as internal constructor for term fma_reg.
pub fn constructor_fma_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    let v4 = &constructor_fpuop3_fma(ctx, arg0);
    let v5 = constructor_fpu_rrrr(ctx, arg0, v4, arg1, arg2, arg3);
    // Rule at src/isa/s390x/inst.isle line 4732.
    return v5;
}

// Generated as internal constructor for term fpuop1_sqrt.
pub fn constructor_fpuop1_sqrt<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4738.
            return FPUOp1::Sqrt32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4739.
            return FPUOp1::Sqrt64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4740.
            return FPUOp1::Sqrt32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4741.
            return FPUOp1::Sqrt64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_sqrt", "src/isa/s390x/inst.isle line 4737"
    )
}

// Generated as internal constructor for term sqrt_reg.
pub fn constructor_sqrt_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_sqrt(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4744.
    return v3;
}

// Generated as internal constructor for term fpuop1_neg.
pub fn constructor_fpuop1_neg<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4750.
            return FPUOp1::Neg32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4751.
            return FPUOp1::Neg64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4752.
            return FPUOp1::Neg32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4753.
            return FPUOp1::Neg64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_neg", "src/isa/s390x/inst.isle line 4749"
    )
}

// Generated as internal constructor for term fneg_reg.
pub fn constructor_fneg_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_neg(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4756.
    return v3;
}

// Generated as internal constructor for term fpuop1_abs.
pub fn constructor_fpuop1_abs<C: Context>(ctx: &mut C, arg0: Type) -> FPUOp1 {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4762.
            return FPUOp1::Abs32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4763.
            return FPUOp1::Abs64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4764.
            return FPUOp1::Abs32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4765.
            return FPUOp1::Abs64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuop1_abs", "src/isa/s390x/inst.isle line 4761"
    )
}

// Generated as internal constructor for term fabs_reg.
pub fn constructor_fabs_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuop1_abs(ctx, arg0);
    let v3 = constructor_fpu_rr(ctx, arg0, v2, arg1);
    // Rule at src/isa/s390x/inst.isle line 4768.
    return v3;
}

// Generated as internal constructor for term fpuroundop_round.
pub fn constructor_fpuroundop_round<C: Context>(ctx: &mut C, arg0: Type) -> FpuRoundOp {
    match arg0 {
        F32 => {
            // Rule at src/isa/s390x/inst.isle line 4774.
            return FpuRoundOp::Round32;
        }
        F64 => {
            // Rule at src/isa/s390x/inst.isle line 4775.
            return FpuRoundOp::Round64;
        }
        F32X4 => {
            // Rule at src/isa/s390x/inst.isle line 4776.
            return FpuRoundOp::Round32x4;
        }
        F64X2 => {
            // Rule at src/isa/s390x/inst.isle line 4777.
            return FpuRoundOp::Round64x2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpuroundop_round", "src/isa/s390x/inst.isle line 4773"
    )
}

// Generated as internal constructor for term ceil_reg.
pub fn constructor_ceil_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToPosInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4780.
    return v4;
}

// Generated as internal constructor for term floor_reg.
pub fn constructor_floor_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNegInfinity, arg1);
    // Rule at src/isa/s390x/inst.isle line 4784.
    return v4;
}

// Generated as internal constructor for term trunc_reg.
pub fn constructor_trunc_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToZero, arg1);
    // Rule at src/isa/s390x/inst.isle line 4788.
    return v4;
}

// Generated as internal constructor for term nearest_reg.
pub fn constructor_nearest_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    let v2 = &constructor_fpuroundop_round(ctx, arg0);
    let v4 = constructor_fpu_round(ctx, arg0, v2, &FpuRoundMode::ToNearestTiesToEven, arg1);
    // Rule at src/isa/s390x/inst.isle line 4792.
    return v4;
}

// Generated as internal constructor for term fpromote_reg.
pub fn constructor_fpromote_reg<C: Context>(ctx: &mut C, arg0: Type, arg1: Type, arg2: Reg) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4799.
        return arg2;
    }
    match arg0 {
        F64 => {
            if arg1 == F32 {
                let v5 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32To64, arg2);
                // Rule at src/isa/s390x/inst.isle line 4800.
                return v5;
            }
        }
        F64X2 => {
            if arg1 == F32X4 {
                let v7 = constructor_fpu_rr(ctx, F64, &FPUOp1::Cvt32x4To64x2, arg2);
                // Rule at src/isa/s390x/inst.isle line 4802.
                return v7;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fpromote_reg", "src/isa/s390x/inst.isle line 4798"
    )
}

// Generated as internal constructor for term fdemote_reg.
pub fn constructor_fdemote_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Type,
    arg2: &FpuRoundMode,
    arg3: Reg,
) -> Reg {
    if arg0 == arg1 {
        // Rule at src/isa/s390x/inst.isle line 4809.
        return arg3;
    }
    match arg0 {
        F32 => {
            if arg1 == F64 {
                let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::Cvt64To32, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4810.
                return v6;
            }
        }
        F32X4 => {
            if arg1 == F64X2 {
                let v9 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::Cvt64x2To32x4, arg2, arg3);
                // Rule at src/isa/s390x/inst.isle line 4812.
                return v9;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fdemote_reg", "src/isa/s390x/inst.isle line 4808"
    )
}

// Generated as internal constructor for term fcvt_from_uint_reg.
pub fn constructor_fcvt_from_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromUInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4819.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromUInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4821.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4823.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4825.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_uint_reg", "src/isa/s390x/inst.isle line 4818"
    )
}

// Generated as internal constructor for term fcvt_from_sint_reg.
pub fn constructor_fcvt_from_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v7 = C::zero_reg(ctx);
            let v8 = constructor_vec_insert_lane_undef(ctx, I32X4, arg2, 0x0, v7);
            let v9 = constructor_fpu_round(ctx, F32, &FpuRoundOp::FromSInt32, arg1, v8);
            // Rule at src/isa/s390x/inst.isle line 4832.
            return v9;
        }
        F64 => {
            let v7 = C::zero_reg(ctx);
            let v13 = constructor_vec_insert_lane_undef(ctx, I64X2, arg2, 0x0, v7);
            let v14 = constructor_fpu_round(ctx, F64, &FpuRoundOp::FromSInt64, arg1, v13);
            // Rule at src/isa/s390x/inst.isle line 4834.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::FromSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4836.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::FromSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4838.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_from_sint_reg", "src/isa/s390x/inst.isle line 4831"
    )
}

// Generated as internal constructor for term fcvt_flt_ty.
pub fn constructor_fcvt_flt_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4845.
                    return F32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4846.
                return F64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4847.
                return F64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_flt_ty", "src/isa/s390x/inst.isle line 4844"
    )
}

// Generated as internal constructor for term fcvt_int_ty.
pub fn constructor_fcvt_int_ty<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Type {
    match arg1 {
        F32 => {
            let v1 = C::fits_in_32(ctx, arg0);
            if let Some(v2) = v1 {
                let v4 = C::vxrs_ext2_enabled(ctx, arg1);
                if let Some(v5) = v4 {
                    // Rule at src/isa/s390x/inst.isle line 4850.
                    return I32;
                }
            }
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4851.
                return I64;
            }
        }
        F64 => {
            let v7 = C::fits_in_64(ctx, arg0);
            if let Some(v8) = v7 {
                // Rule at src/isa/s390x/inst.isle line 4852.
                return I64;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_int_ty", "src/isa/s390x/inst.isle line 4849"
    )
}

// Generated as internal constructor for term fcvt_to_uint_reg.
pub fn constructor_fcvt_to_uint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToUInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, I32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4858.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToUInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, I64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4860.
            return v14;
        }
        F32X4 => {
            let v17 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToUInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4862.
            return v17;
        }
        F64X2 => {
            let v20 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToUInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4864.
            return v20;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_reg", "src/isa/s390x/inst.isle line 4857"
    )
}

// Generated as internal constructor for term fcvt_to_uint_ub.
pub fn constructor_fcvt_to_uint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_uint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4868.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_uint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4870.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_ub", "src/isa/s390x/inst.isle line 4867"
    )
}

// Generated as internal constructor for term fcvt_to_uint_lb.
pub fn constructor_fcvt_to_uint_lb<C: Context>(ctx: &mut C, arg0: Type) -> Reg {
    match arg0 {
        F32 => {
            let v2 = C::fcvt_to_uint_lb32(ctx);
            let v3 = constructor_imm(ctx, F32, v2);
            // Rule at src/isa/s390x/inst.isle line 4874.
            return v3;
        }
        F64 => {
            let v5 = C::fcvt_to_uint_lb64(ctx);
            let v6 = constructor_imm(ctx, F64, v5);
            // Rule at src/isa/s390x/inst.isle line 4875.
            return v6;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_uint_lb", "src/isa/s390x/inst.isle line 4873"
    )
}

// Generated as internal constructor for term fcvt_to_sint_reg.
pub fn constructor_fcvt_to_sint_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &FpuRoundMode,
    arg2: Reg,
) -> Reg {
    match arg0 {
        F32 => {
            let v6 = constructor_fpu_round(ctx, F32, &FpuRoundOp::ToSInt32, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v9 = constructor_vec_extract_lane(ctx, F32X4, v6, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4890.
            return v9;
        }
        F64 => {
            let v13 = constructor_fpu_round(ctx, F64, &FpuRoundOp::ToSInt64, arg1, arg2);
            let v8 = C::zero_reg(ctx);
            let v14 = constructor_vec_extract_lane(ctx, F64X2, v13, 0x0, v8);
            // Rule at src/isa/s390x/inst.isle line 4892.
            return v14;
        }
        F32X4 => {
            let v16 = constructor_fpu_round(ctx, F32X4, &FpuRoundOp::ToSInt32x4, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4894.
            return v16;
        }
        F64X2 => {
            let v18 = constructor_fpu_round(ctx, F64X2, &FpuRoundOp::ToSInt64x2, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 4896.
            return v18;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_reg", "src/isa/s390x/inst.isle line 4889"
    )
}

// Generated as internal constructor for term fcvt_to_sint_ub.
pub fn constructor_fcvt_to_sint_ub<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_ub32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4900.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_ub64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4902.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_ub", "src/isa/s390x/inst.isle line 4899"
    )
}

// Generated as internal constructor for term fcvt_to_sint_lb.
pub fn constructor_fcvt_to_sint_lb<C: Context>(ctx: &mut C, arg0: Type, arg1: Type) -> Reg {
    match arg0 {
        F32 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v4 = C::fcvt_to_sint_lb32(ctx, v3);
            let v5 = constructor_imm(ctx, F32, v4);
            // Rule at src/isa/s390x/inst.isle line 4906.
            return v5;
        }
        F64 => {
            let v3 = C::ty_bits(ctx, arg1);
            let v7 = C::fcvt_to_sint_lb64(ctx, v3);
            let v8 = constructor_imm(ctx, F64, v7);
            // Rule at src/isa/s390x/inst.isle line 4908.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcvt_to_sint_lb", "src/isa/s390x/inst.isle line 4905"
    )
}

// Generated as internal constructor for term cmpop_cmps.
pub fn constructor_cmpop_cmps<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4924.
            return CmpOp::CmpS32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4925.
            return CmpOp::CmpS64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps", "src/isa/s390x/inst.isle line 4923"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext16.
pub fn constructor_cmpop_cmps_sext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4928.
            return CmpOp::CmpS32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4929.
            return CmpOp::CmpS64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext16", "src/isa/s390x/inst.isle line 4927"
    )
}

// Generated as internal constructor for term cmpop_cmps_sext32.
pub fn constructor_cmpop_cmps_sext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4932.
        return CmpOp::CmpS64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmps_sext32", "src/isa/s390x/inst.isle line 4931"
    )
}

// Generated as internal constructor for term icmps_reg.
pub fn constructor_icmps_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4935.
    return v4.clone();
}

// Generated as internal constructor for term icmps_reg_sext32.
pub fn constructor_icmps_reg_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4938.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm16.
pub fn constructor_icmps_simm16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i16,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm16(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4941.
    return v4.clone();
}

// Generated as internal constructor for term icmps_simm32.
pub fn constructor_icmps_simm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: i32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rsimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4944.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem.
pub fn constructor_icmps_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4947.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext16.
pub fn constructor_icmps_mem_sext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4950.
    return v4.clone();
}

// Generated as internal constructor for term icmps_mem_sext32.
pub fn constructor_icmps_mem_sext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmps_sext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4953.
    return v4.clone();
}

// Generated as internal constructor for term cmpop_cmpu.
pub fn constructor_cmpop_cmpu<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4959.
            return CmpOp::CmpL32;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4960.
            return CmpOp::CmpL64;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu", "src/isa/s390x/inst.isle line 4958"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext16.
pub fn constructor_cmpop_cmpu_zext16<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    match arg0 {
        I32 => {
            // Rule at src/isa/s390x/inst.isle line 4963.
            return CmpOp::CmpL32Ext16;
        }
        I64 => {
            // Rule at src/isa/s390x/inst.isle line 4964.
            return CmpOp::CmpL64Ext16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext16", "src/isa/s390x/inst.isle line 4962"
    )
}

// Generated as internal constructor for term cmpop_cmpu_zext32.
pub fn constructor_cmpop_cmpu_zext32<C: Context>(ctx: &mut C, arg0: Type) -> CmpOp {
    if arg0 == I64 {
        // Rule at src/isa/s390x/inst.isle line 4967.
        return CmpOp::CmpL64Ext32;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cmpop_cmpu_zext32", "src/isa/s390x/inst.isle line 4966"
    )
}

// Generated as internal constructor for term icmpu_reg.
pub fn constructor_icmpu_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4970.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_reg_zext32.
pub fn constructor_icmpu_reg_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rr(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4973.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_uimm32.
pub fn constructor_icmpu_uimm32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u32,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_ruimm32(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4976.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem.
pub fn constructor_icmpu_mem<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4979.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext16.
pub fn constructor_icmpu_mem_zext16<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext16(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4982.
    return v4.clone();
}

// Generated as internal constructor for term icmpu_mem_zext32.
pub fn constructor_icmpu_mem_zext32<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
) -> ProducesFlags {
    let v3 = &constructor_cmpop_cmpu_zext32(ctx, arg0);
    let v4 = &constructor_cmp_rx(ctx, v3, arg1, arg2);
    // Rule at src/isa/s390x/inst.isle line 4985.
    return v4.clone();
}

// Generated as internal constructor for term vecop_int_cmpeq.
pub fn constructor_vecop_int_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 4991.
                    return VecIntCmpOp::CmpEq8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 4992.
                    return VecIntCmpOp::CmpEq16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 4993.
                    return VecIntCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 4994.
                    return VecIntCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmpeq", "src/isa/s390x/inst.isle line 4990"
    )
}

// Generated as internal constructor for term vec_cmpeq.
pub fn constructor_vec_cmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4997.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeq", "src/isa/s390x/inst.isle line 4996"
    )
}

// Generated as internal constructor for term vec_cmpeqs.
pub fn constructor_vec_cmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmpeq(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 4999.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmpeqs", "src/isa/s390x/inst.isle line 4998"
    )
}

// Generated as internal constructor for term vecop_int_cmph.
pub fn constructor_vecop_int_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 5002.
                    return VecIntCmpOp::SCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 5003.
                    return VecIntCmpOp::SCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5004.
                    return VecIntCmpOp::SCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5005.
                    return VecIntCmpOp::SCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmph", "src/isa/s390x/inst.isle line 5001"
    )
}

// Generated as internal constructor for term vec_cmph.
pub fn constructor_vec_cmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5008.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmph", "src/isa/s390x/inst.isle line 5007"
    )
}

// Generated as internal constructor for term vec_cmphs.
pub fn constructor_vec_cmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmph(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5010.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphs", "src/isa/s390x/inst.isle line 5009"
    )
}

// Generated as internal constructor for term vecop_int_cmphl.
pub fn constructor_vecop_int_cmphl<C: Context>(ctx: &mut C, arg0: Type) -> VecIntCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                if v2.1 == 0x10 {
                    // Rule at src/isa/s390x/inst.isle line 5013.
                    return VecIntCmpOp::UCmpHi8x16;
                }
            }
            0x10 => {
                if v2.1 == 0x8 {
                    // Rule at src/isa/s390x/inst.isle line 5014.
                    return VecIntCmpOp::UCmpHi16x8;
                }
            }
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5015.
                    return VecIntCmpOp::UCmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5016.
                    return VecIntCmpOp::UCmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_int_cmphl", "src/isa/s390x/inst.isle line 5012"
    )
}

// Generated as internal constructor for term vec_cmphl.
pub fn constructor_vec_cmphl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = constructor_vec_int_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5019.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphl", "src/isa/s390x/inst.isle line 5018"
    )
}

// Generated as internal constructor for term vec_cmphls.
pub fn constructor_vec_cmphls<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_int_cmphl(ctx, v2);
        let v6 = &constructor_vec_int_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5021.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_cmphls", "src/isa/s390x/inst.isle line 5020"
    )
}

// Generated as internal constructor for term fcmp_reg.
pub fn constructor_fcmp_reg<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    match arg0 {
        F32 => {
            let v3 = &constructor_fpu_cmp32(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5027.
            return v3.clone();
        }
        F64 => {
            let v4 = &constructor_fpu_cmp64(ctx, arg1, arg2);
            // Rule at src/isa/s390x/inst.isle line 5028.
            return v4.clone();
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "fcmp_reg", "src/isa/s390x/inst.isle line 5026"
    )
}

// Generated as internal constructor for term vecop_float_cmpeq.
pub fn constructor_vecop_float_cmpeq<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5034.
                    return VecFloatCmpOp::CmpEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5035.
                    return VecFloatCmpOp::CmpEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmpeq", "src/isa/s390x/inst.isle line 5033"
    )
}

// Generated as internal constructor for term vec_fcmpeq.
pub fn constructor_vec_fcmpeq<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5038.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeq", "src/isa/s390x/inst.isle line 5037"
    )
}

// Generated as internal constructor for term vec_fcmpeqs.
pub fn constructor_vec_fcmpeqs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmpeq(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5040.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmpeqs", "src/isa/s390x/inst.isle line 5039"
    )
}

// Generated as internal constructor for term vecop_float_cmph.
pub fn constructor_vecop_float_cmph<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5043.
                    return VecFloatCmpOp::CmpHi32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5044.
                    return VecFloatCmpOp::CmpHi64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmph", "src/isa/s390x/inst.isle line 5042"
    )
}

// Generated as internal constructor for term vec_fcmph.
pub fn constructor_vec_fcmph<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5047.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmph", "src/isa/s390x/inst.isle line 5046"
    )
}

// Generated as internal constructor for term vec_fcmphs.
pub fn constructor_vec_fcmphs<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmph(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5049.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphs", "src/isa/s390x/inst.isle line 5048"
    )
}

// Generated as internal constructor for term vecop_float_cmphe.
pub fn constructor_vecop_float_cmphe<C: Context>(ctx: &mut C, arg0: Type) -> VecFloatCmpOp {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x20 => {
                if v2.1 == 0x4 {
                    // Rule at src/isa/s390x/inst.isle line 5052.
                    return VecFloatCmpOp::CmpHiEq32x4;
                }
            }
            0x40 => {
                if v2.1 == 0x2 {
                    // Rule at src/isa/s390x/inst.isle line 5053.
                    return VecFloatCmpOp::CmpHiEq64x2;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vecop_float_cmphe", "src/isa/s390x/inst.isle line 5051"
    )
}

// Generated as internal constructor for term vec_fcmphe.
pub fn constructor_vec_fcmphe<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = constructor_vec_float_cmp(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5056.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphe", "src/isa/s390x/inst.isle line 5055"
    )
}

// Generated as internal constructor for term vec_fcmphes.
pub fn constructor_vec_fcmphes<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: Reg,
) -> ProducesFlags {
    let v1 = C::ty_vec128(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = &constructor_vecop_float_cmphe(ctx, v2);
        let v6 = &constructor_vec_float_cmps(ctx, v2, v5, arg1, arg2);
        // Rule at src/isa/s390x/inst.isle line 5058.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_fcmphes", "src/isa/s390x/inst.isle line 5057"
    )
}

// Generated as internal constructor for term lower.
pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
    let v4 = &C::inst_data(ctx, arg0);
    match v4 {
        &InstructionData::AtomicCas {
            opcode: ref v2102,
            args: ref v2103,
            flags: v2104,
        } => {
            if let &Opcode::AtomicCas = v2102 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v630 = C::ty_32_or_64(ctx, v3);
                    if let Some(v631) = v630 {
                        let v2109 = C::bigendian(ctx, v2104);
                        if let Some(v2110) = v2109 {
                            let v2105 = C::unpack_value_array_3(ctx, v2103);
                            let v2111 = C::put_in_reg(ctx, v2105.1);
                            let v2112 = C::put_in_reg(ctx, v2105.2);
                            let v2054 = C::zero_offset(ctx);
                            let v2113 = &constructor_lower_address(ctx, v2104, v2105.0, v2054);
                            let v2114 = constructor_atomic_cas_impl(ctx, v631, v2111, v2112, v2113);
                            let v2115 = constructor_output_reg(ctx, v2114);
                            let v2116 = Some(v2115);
                            // Rule at src/isa/s390x/lower.isle line 3120.
                            return v2116;
                        }
                        let v2117 = C::littleendian(ctx, v2104);
                        if let Some(v2118) = v2117 {
                            let v2105 = C::unpack_value_array_3(ctx, v2103);
                            let v2111 = C::put_in_reg(ctx, v2105.1);
                            let v2119 = constructor_bswap_reg(ctx, v631, v2111);
                            let v2120 = C::put_in_reg(ctx, v2105.2);
                            let v2121 = constructor_bswap_reg(ctx, v631, v2120);
                            let v2122 = C::zero_offset(ctx);
                            let v2123 = &constructor_lower_address(ctx, v2104, v2105.0, v2122);
                            let v2124 = constructor_atomic_cas_impl(ctx, v631, v2119, v2121, v2123);
                            let v2125 = constructor_bswap_reg(ctx, v631, v2124);
                            let v2126 = constructor_output_reg(ctx, v2125);
                            let v2127 = Some(v2126);
                            // Rule at src/isa/s390x/lower.isle line 3127.
                            return v2127;
                        }
                    }
                    let v456 = C::ty_8_or_16(ctx, v3);
                    if let Some(v457) = v456 {
                        let v2105 = C::unpack_value_array_3(ctx, v2103);
                        let v2111 = C::put_in_reg(ctx, v2105.1);
                        let v2112 = C::put_in_reg(ctx, v2105.2);
                        let v2128 = C::put_in_reg(ctx, v2105.0);
                        let v2129 = constructor_casloop_bitshift(ctx, v2128);
                        let v2130 = constructor_casloop_aligned_addr(ctx, v2128);
                        let v2131 = &C::inst_builder_new(ctx);
                        let v2132 = constructor_casloop_val_reg(ctx);
                        let v2133 = C::writable_reg_to_reg(ctx, v2132);
                        let v2134 =
                            constructor_casloop_rotate_in(ctx, v2131, v457, v2104, v2129, v2133);
                        let v2135 = constructor_casloop_tmp_reg(ctx);
                        let v2136 = constructor_atomic_cas_body(
                            ctx, v2131, v457, v2104, v2135, v2134, v2111, v2112,
                        );
                        let v2137 =
                            constructor_casloop_rotate_out(ctx, v2131, v457, v2104, v2129, v2136);
                        let v2138 = constructor_casloop_subword(
                            ctx, v2131, v457, v2104, v2130, v2129, v2137,
                        );
                        let v2139 = constructor_output_reg(ctx, v2138);
                        let v2140 = Some(v2139);
                        // Rule at src/isa/s390x/lower.isle line 3134.
                        return v2140;
                    }
                }
            }
        }
        &InstructionData::AtomicRmw {
            opcode: ref v2036,
            args: ref v2037,
            flags: v2038,
            op: ref v2039,
        } => {
            if let &Opcode::AtomicRmw = v2036 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v630 = C::ty_32_or_64(ctx, v3);
                    if let Some(v631) = v630 {
                        match v2039 {
                            &AtomicRmwOp::Add => {
                                let v2043 = C::bigendian(ctx, v2038);
                                if let Some(v2044) = v2043 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2046 = C::zero_offset(ctx);
                                    let v2047 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2046);
                                    let v2074 = constructor_atomic_rmw_add(ctx, v631, v2045, v2047);
                                    let v2075 = constructor_output_reg(ctx, v2074);
                                    let v2076 = Some(v2075);
                                    // Rule at src/isa/s390x/lower.isle line 2900.
                                    return v2076;
                                }
                            }
                            &AtomicRmwOp::And => {
                                let v2043 = C::bigendian(ctx, v2038);
                                if let Some(v2044) = v2043 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2046 = C::zero_offset(ctx);
                                    let v2047 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2046);
                                    let v2048 = constructor_atomic_rmw_and(ctx, v631, v2045, v2047);
                                    let v2049 = constructor_output_reg(ctx, v2048);
                                    let v2050 = Some(v2049);
                                    // Rule at src/isa/s390x/lower.isle line 2864.
                                    return v2050;
                                }
                                let v2051 = C::littleendian(ctx, v2038);
                                if let Some(v2052) = v2051 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2053 = constructor_bswap_reg(ctx, v631, v2045);
                                    let v2054 = C::zero_offset(ctx);
                                    let v2055 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2054);
                                    let v2056 = constructor_atomic_rmw_and(ctx, v631, v2053, v2055);
                                    let v2057 = constructor_bswap_reg(ctx, v631, v2056);
                                    let v2058 = constructor_output_reg(ctx, v2057);
                                    let v2059 = Some(v2058);
                                    // Rule at src/isa/s390x/lower.isle line 2870.
                                    return v2059;
                                }
                            }
                            &AtomicRmwOp::Or => {
                                let v2043 = C::bigendian(ctx, v2038);
                                if let Some(v2044) = v2043 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2046 = C::zero_offset(ctx);
                                    let v2047 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2046);
                                    let v2060 = constructor_atomic_rmw_or(ctx, v631, v2045, v2047);
                                    let v2061 = constructor_output_reg(ctx, v2060);
                                    let v2062 = Some(v2061);
                                    // Rule at src/isa/s390x/lower.isle line 2876.
                                    return v2062;
                                }
                                let v2051 = C::littleendian(ctx, v2038);
                                if let Some(v2052) = v2051 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2053 = constructor_bswap_reg(ctx, v631, v2045);
                                    let v2054 = C::zero_offset(ctx);
                                    let v2055 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2054);
                                    let v2063 = constructor_atomic_rmw_or(ctx, v631, v2053, v2055);
                                    let v2064 = constructor_bswap_reg(ctx, v631, v2063);
                                    let v2065 = constructor_output_reg(ctx, v2064);
                                    let v2066 = Some(v2065);
                                    // Rule at src/isa/s390x/lower.isle line 2882.
                                    return v2066;
                                }
                            }
                            &AtomicRmwOp::Sub => {
                                let v2043 = C::bigendian(ctx, v2038);
                                if let Some(v2044) = v2043 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2077 = constructor_neg_reg(ctx, v631, v2045);
                                    let v2054 = C::zero_offset(ctx);
                                    let v2055 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2054);
                                    let v2078 = constructor_atomic_rmw_add(ctx, v631, v2077, v2055);
                                    let v2079 = constructor_output_reg(ctx, v2078);
                                    let v2080 = Some(v2079);
                                    // Rule at src/isa/s390x/lower.isle line 2906.
                                    return v2080;
                                }
                            }
                            &AtomicRmwOp::Xor => {
                                let v2043 = C::bigendian(ctx, v2038);
                                if let Some(v2044) = v2043 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2046 = C::zero_offset(ctx);
                                    let v2047 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2046);
                                    let v2067 = constructor_atomic_rmw_xor(ctx, v631, v2045, v2047);
                                    let v2068 = constructor_output_reg(ctx, v2067);
                                    let v2069 = Some(v2068);
                                    // Rule at src/isa/s390x/lower.isle line 2888.
                                    return v2069;
                                }
                                let v2051 = C::littleendian(ctx, v2038);
                                if let Some(v2052) = v2051 {
                                    let v2040 = C::unpack_value_array_2(ctx, v2037);
                                    let v2045 = C::put_in_reg(ctx, v2040.1);
                                    let v2053 = constructor_bswap_reg(ctx, v631, v2045);
                                    let v2054 = C::zero_offset(ctx);
                                    let v2055 =
                                        &constructor_lower_address(ctx, v2038, v2040.0, v2054);
                                    let v2070 = constructor_atomic_rmw_xor(ctx, v631, v2053, v2055);
                                    let v2071 = constructor_bswap_reg(ctx, v631, v2070);
                                    let v2072 = constructor_output_reg(ctx, v2071);
                                    let v2073 = Some(v2072);
                                    // Rule at src/isa/s390x/lower.isle line 2894.
                                    return v2073;
                                }
                            }
                            _ => {}
                        }
                        let v2040 = C::unpack_value_array_2(ctx, v2037);
                        let v2045 = C::put_in_reg(ctx, v2040.1);
                        let v2081 = C::put_in_reg(ctx, v2040.0);
                        let v2082 = &C::inst_builder_new(ctx);
                        let v2083 = constructor_casloop_val_reg(ctx);
                        let v2085 = constructor_casloop_tmp_reg(ctx);
                        let v2084 = C::writable_reg_to_reg(ctx, v2083);
                        let v2086 = constructor_atomic_rmw_body(
                            ctx, v2082, v631, v2038, v2039, v2085, v2084, v2045,
                        );
                        let v2087 = constructor_casloop(ctx, v2082, v631, v2038, v2081, v2086);
                        let v2088 = constructor_output_reg(ctx, v2087);
                        let v2089 = Some(v2088);
                        // Rule at src/isa/s390x/lower.isle line 2915.
                        return v2089;
                    }
                    let v456 = C::ty_8_or_16(ctx, v3);
                    if let Some(v457) = v456 {
                        let v2040 = C::unpack_value_array_2(ctx, v2037);
                        let v2045 = C::put_in_reg(ctx, v2040.1);
                        let v2081 = C::put_in_reg(ctx, v2040.0);
                        let v2090 = constructor_casloop_bitshift(ctx, v2081);
                        let v2091 = constructor_casloop_aligned_addr(ctx, v2081);
                        let v2092 = &C::inst_builder_new(ctx);
                        let v2093 = constructor_casloop_val_reg(ctx);
                        let v2094 = C::writable_reg_to_reg(ctx, v2093);
                        let v2095 =
                            constructor_casloop_rotate_in(ctx, v2092, v457, v2038, v2090, v2094);
                        let v2096 = constructor_casloop_tmp_reg(ctx);
                        let v2097 = constructor_atomic_rmw_body(
                            ctx, v2092, v457, v2038, v2039, v2096, v2095, v2045,
                        );
                        let v2098 =
                            constructor_casloop_rotate_out(ctx, v2092, v457, v2038, v2090, v2097);
                        let v2099 = constructor_casloop_subword(
                            ctx, v2092, v457, v2038, v2091, v2090, v2098,
                        );
                        let v2100 = constructor_output_reg(ctx, v2099);
                        let v2101 = Some(v2100);
                        // Rule at src/isa/s390x/lower.isle line 2927.
                        return v2101;
                    }
                }
            }
        }
        &InstructionData::Binary {
            opcode: ref v40,
            args: ref v41,
        } => {
            match v40 {
                &Opcode::Swizzle => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v1806 = &C::lane_order(ctx);
                            match v1806 {
                                &LaneOrder::LittleEndian => {
                                    let v1814 = constructor_vec_imm(ctx, v170, 0x0);
                                    let v42 = C::unpack_value_array_2(ctx, v41);
                                    let v46 = C::put_in_reg(ctx, v42.0);
                                    let v1816 = constructor_vec_imm_splat(ctx, I8X16, 0xEF);
                                    let v488 = C::put_in_reg(ctx, v42.1);
                                    let v1817 = constructor_vec_not(ctx, I8X16, v488);
                                    let v1818 = constructor_vec_umax(ctx, I8X16, v1816, v1817);
                                    let v1819 =
                                        constructor_vec_permute(ctx, v170, v1814, v46, v1818);
                                    let v1820 = constructor_output_reg(ctx, v1819);
                                    let v1821 = Some(v1820);
                                    // Rule at src/isa/s390x/lower.isle line 2227.
                                    return v1821;
                                }
                                &LaneOrder::BigEndian => {
                                    let v42 = C::unpack_value_array_2(ctx, v41);
                                    let v67 = C::put_in_reg(ctx, v42.0);
                                    let v1807 = constructor_vec_imm(ctx, v170, 0x0);
                                    let v1809 = constructor_vec_imm_splat(ctx, I8X16, 0x10);
                                    let v488 = C::put_in_reg(ctx, v42.1);
                                    let v1810 = constructor_vec_umin(ctx, I8X16, v1809, v488);
                                    let v1811 =
                                        constructor_vec_permute(ctx, v170, v67, v1807, v1810);
                                    let v1812 = constructor_output_reg(ctx, v1811);
                                    let v1813 = Some(v1812);
                                    // Rule at src/isa/s390x/lower.isle line 2208.
                                    return v1813;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Smin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v360 = constructor_put_in_reg_sext32(ctx, v42.0);
                            let v361 = constructor_put_in_reg_sext32(ctx, v42.1);
                            let v332 = constructor_ty_ext32(ctx, v66);
                            let v362 = &constructor_icmps_reg(ctx, v332, v360, v361);
                            let v377 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
                            let v378 = &constructor_bool(ctx, v362, v377);
                            let v379 = constructor_select_bool_reg(ctx, v66, v378, v361, v360);
                            let v380 = constructor_output_reg(ctx, v379);
                            let v381 = Some(v380);
                            // Rule at src/isa/s390x/lower.isle line 309.
                            return v381;
                        }
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v382 = &constructor_vec_int128_scmphi(ctx, v67, v68);
                            let v383 = constructor_select_bool_reg(ctx, I128, v382, v68, v67);
                            let v384 = constructor_output_reg(ctx, v383);
                            let v385 = Some(v384);
                            // Rule at src/isa/s390x/lower.isle line 317.
                            return v385;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v386 = constructor_vec_smin(ctx, v170, v67, v68);
                            let v387 = constructor_output_reg(ctx, v386);
                            let v388 = Some(v387);
                            // Rule at src/isa/s390x/lower.isle line 324.
                            return v388;
                        }
                    }
                }
                &Opcode::Umin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v331 = constructor_put_in_reg_zext32(ctx, v42.1);
                            let v332 = constructor_ty_ext32(ctx, v66);
                            let v333 = &constructor_icmpu_reg(ctx, v332, v330, v331);
                            let v348 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
                            let v349 = &constructor_bool(ctx, v333, v348);
                            let v350 = constructor_select_bool_reg(ctx, v66, v349, v331, v330);
                            let v351 = constructor_output_reg(ctx, v350);
                            let v352 = Some(v351);
                            // Rule at src/isa/s390x/lower.isle line 265.
                            return v352;
                        }
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v353 = &constructor_vec_int128_ucmphi(ctx, v67, v68);
                            let v354 = constructor_select_bool_reg(ctx, I128, v353, v68, v67);
                            let v355 = constructor_output_reg(ctx, v354);
                            let v356 = Some(v355);
                            // Rule at src/isa/s390x/lower.isle line 273.
                            return v356;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v357 = constructor_vec_umin(ctx, v170, v67, v68);
                            let v358 = constructor_output_reg(ctx, v357);
                            let v359 = Some(v358);
                            // Rule at src/isa/s390x/lower.isle line 280.
                            return v359;
                        }
                    }
                }
                &Opcode::Smax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v360 = constructor_put_in_reg_sext32(ctx, v42.0);
                            let v361 = constructor_put_in_reg_sext32(ctx, v42.1);
                            let v332 = constructor_ty_ext32(ctx, v66);
                            let v362 = &constructor_icmps_reg(ctx, v332, v360, v361);
                            let v364 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
                            let v365 = &constructor_bool(ctx, v362, v364);
                            let v366 = constructor_select_bool_reg(ctx, v66, v365, v361, v360);
                            let v367 = constructor_output_reg(ctx, v366);
                            let v368 = Some(v367);
                            // Rule at src/isa/s390x/lower.isle line 287.
                            return v368;
                        }
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v369 = &constructor_vec_int128_scmphi(ctx, v68, v67);
                            let v370 = constructor_select_bool_reg(ctx, I128, v369, v68, v67);
                            let v371 = constructor_output_reg(ctx, v370);
                            let v372 = Some(v371);
                            // Rule at src/isa/s390x/lower.isle line 295.
                            return v372;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v373 = constructor_vec_smax(ctx, v170, v67, v68);
                            let v374 = constructor_output_reg(ctx, v373);
                            let v375 = Some(v374);
                            // Rule at src/isa/s390x/lower.isle line 302.
                            return v375;
                        }
                    }
                }
                &Opcode::Umax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v331 = constructor_put_in_reg_zext32(ctx, v42.1);
                            let v332 = constructor_ty_ext32(ctx, v66);
                            let v333 = &constructor_icmpu_reg(ctx, v332, v330, v331);
                            let v335 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
                            let v336 = &constructor_bool(ctx, v333, v335);
                            let v337 = constructor_select_bool_reg(ctx, v66, v336, v331, v330);
                            let v338 = constructor_output_reg(ctx, v337);
                            let v339 = Some(v338);
                            // Rule at src/isa/s390x/lower.isle line 243.
                            return v339;
                        }
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v340 = &constructor_vec_int128_ucmphi(ctx, v68, v67);
                            let v341 = constructor_select_bool_reg(ctx, I128, v340, v68, v67);
                            let v342 = constructor_output_reg(ctx, v341);
                            let v343 = Some(v342);
                            // Rule at src/isa/s390x/lower.isle line 251.
                            return v343;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v344 = constructor_vec_umax(ctx, v170, v67, v68);
                            let v345 = constructor_output_reg(ctx, v344);
                            let v346 = Some(v345);
                            // Rule at src/isa/s390x/lower.isle line 258.
                            return v346;
                        }
                    }
                }
                &Opcode::AvgRound => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v389 = constructor_vec_uavg(ctx, v170, v67, v68);
                            let v390 = constructor_output_reg(ctx, v389);
                            let v391 = Some(v390);
                            // Rule at src/isa/s390x/lower.isle line 331.
                            return v391;
                        }
                    }
                }
                &Opcode::UaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v171 = constructor_vec_add(ctx, v170, v67, v68);
                            let v172 = C::put_in_reg(ctx, v42.0);
                            let v173 = constructor_vec_cmphl(ctx, v170, v172, v171);
                            let v174 = constructor_vec_or(ctx, v170, v171, v173);
                            let v175 = constructor_output_reg(ctx, v174);
                            let v176 = Some(v175);
                            // Rule at src/isa/s390x/lower.isle line 109.
                            return v176;
                        }
                    }
                }
                &Opcode::SaddSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v177 = constructor_vec_widen_type(ctx, v170);
                            let v178 = constructor_vec_widen_type(ctx, v170);
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v180 = constructor_vec_unpacks_high(ctx, v170, v179);
                            let v181 = C::put_in_reg(ctx, v42.1);
                            let v182 = constructor_vec_unpacks_high(ctx, v170, v181);
                            let v183 = constructor_vec_add(ctx, v178, v180, v182);
                            let v184 = constructor_vec_widen_type(ctx, v170);
                            let v185 = C::put_in_reg(ctx, v42.0);
                            let v186 = constructor_vec_unpacks_low(ctx, v170, v185);
                            let v187 = C::put_in_reg(ctx, v42.1);
                            let v188 = constructor_vec_unpacks_low(ctx, v170, v187);
                            let v189 = constructor_vec_add(ctx, v184, v186, v188);
                            let v190 = constructor_vec_pack_ssat(ctx, v177, v183, v189);
                            let v191 = constructor_output_reg(ctx, v190);
                            let v192 = Some(v191);
                            // Rule at src/isa/s390x/lower.isle line 117.
                            return v192;
                        }
                    }
                }
                &Opcode::UsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v281 = constructor_vec_sub(ctx, v170, v67, v68);
                            let v172 = C::put_in_reg(ctx, v42.0);
                            let v181 = C::put_in_reg(ctx, v42.1);
                            let v282 = constructor_vec_cmphl(ctx, v170, v172, v181);
                            let v283 = constructor_vec_and(ctx, v170, v281, v282);
                            let v284 = constructor_output_reg(ctx, v283);
                            let v285 = Some(v284);
                            // Rule at src/isa/s390x/lower.isle line 181.
                            return v285;
                        }
                    }
                }
                &Opcode::SsubSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v177 = constructor_vec_widen_type(ctx, v170);
                            let v178 = constructor_vec_widen_type(ctx, v170);
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v180 = constructor_vec_unpacks_high(ctx, v170, v179);
                            let v181 = C::put_in_reg(ctx, v42.1);
                            let v182 = constructor_vec_unpacks_high(ctx, v170, v181);
                            let v286 = constructor_vec_sub(ctx, v178, v180, v182);
                            let v184 = constructor_vec_widen_type(ctx, v170);
                            let v185 = C::put_in_reg(ctx, v42.0);
                            let v186 = constructor_vec_unpacks_low(ctx, v170, v185);
                            let v187 = C::put_in_reg(ctx, v42.1);
                            let v188 = constructor_vec_unpacks_low(ctx, v170, v187);
                            let v287 = constructor_vec_sub(ctx, v184, v186, v188);
                            let v288 = constructor_vec_pack_ssat(ctx, v177, v286, v287);
                            let v289 = constructor_output_reg(ctx, v288);
                            let v290 = Some(v289);
                            // Rule at src/isa/s390x/lower.isle line 188.
                            return v290;
                        }
                    }
                }
                &Opcode::Iadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v82 = C::def_inst(ctx, v42.0);
                            if let Some(v83) = v82 {
                                let v84 = &C::inst_data(ctx, v83);
                                if let &InstructionData::Unary {
                                    opcode: ref v85,
                                    arg: v86,
                                } = v84
                                {
                                    if let &Opcode::Sextend = v85 {
                                        let v87 = C::value_type(ctx, v86);
                                        if v87 == I32 {
                                            let v45 = C::put_in_reg(ctx, v42.1);
                                            let v88 = C::put_in_reg(ctx, v86);
                                            let v89 =
                                                constructor_add_reg_sext32(ctx, v66, v45, v88);
                                            let v90 = constructor_output_reg(ctx, v89);
                                            let v91 = Some(v90);
                                            // Rule at src/isa/s390x/lower.isle line 66.
                                            return v91;
                                        }
                                    }
                                }
                            }
                            let v97 = C::i16_from_value(ctx, v42.0);
                            if let Some(v98) = v97 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v99 = constructor_add_simm16(ctx, v66, v45, v98);
                                let v100 = constructor_output_reg(ctx, v99);
                                let v101 = Some(v100);
                                // Rule at src/isa/s390x/lower.isle line 72.
                                return v101;
                            }
                            let v107 = C::i32_from_value(ctx, v42.0);
                            if let Some(v108) = v107 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v109 = constructor_add_simm32(ctx, v66, v45, v108);
                                let v110 = constructor_output_reg(ctx, v109);
                                let v111 = Some(v110);
                                // Rule at src/isa/s390x/lower.isle line 76.
                                return v111;
                            }
                            let v131 = C::sinkable_inst(ctx, v42.0);
                            if let Some(v132) = v131 {
                                let v133 = &C::inst_data(ctx, v132);
                                if let &InstructionData::Load {
                                    opcode: ref v134,
                                    arg: v135,
                                    flags: v136,
                                    offset: v137,
                                } = v133
                                {
                                    match v134 {
                                        &Opcode::Load => {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v128 = C::value_type(ctx, v42.0);
                                                let v129 = C::ty_32_or_64(ctx, v128);
                                                if let Some(v130) = v129 {
                                                    let v45 = C::put_in_reg(ctx, v42.1);
                                                    let v140 = &constructor_sink_load(ctx, v132);
                                                    let v141 =
                                                        constructor_add_mem(ctx, v66, v45, v140);
                                                    let v142 = constructor_output_reg(ctx, v141);
                                                    let v143 = Some(v142);
                                                    // Rule at src/isa/s390x/lower.isle line 82.
                                                    return v143;
                                                }
                                                if v128 == I16 {
                                                    let v45 = C::put_in_reg(ctx, v42.1);
                                                    let v140 = &constructor_sink_load(ctx, v132);
                                                    let v147 = constructor_add_mem_sext16(
                                                        ctx, v66, v45, v140,
                                                    );
                                                    let v148 = constructor_output_reg(ctx, v147);
                                                    let v149 = Some(v148);
                                                    // Rule at src/isa/s390x/lower.isle line 88.
                                                    return v149;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v154 = &constructor_sink_sload16(ctx, v132);
                                                let v155 =
                                                    constructor_add_mem_sext16(ctx, v66, v45, v154);
                                                let v156 = constructor_output_reg(ctx, v155);
                                                let v157 = Some(v156);
                                                // Rule at src/isa/s390x/lower.isle line 94.
                                                return v157;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v162 = &constructor_sink_sload32(ctx, v132);
                                                let v163 =
                                                    constructor_add_mem_sext32(ctx, v66, v45, v162);
                                                let v164 = constructor_output_reg(ctx, v163);
                                                let v165 = Some(v164);
                                                // Rule at src/isa/s390x/lower.isle line 98.
                                                return v165;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v72 = C::def_inst(ctx, v42.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::Unary {
                                    opcode: ref v75,
                                    arg: v76,
                                } = v74
                                {
                                    if let &Opcode::Sextend = v75 {
                                        let v77 = C::value_type(ctx, v76);
                                        if v77 == I32 {
                                            let v67 = C::put_in_reg(ctx, v42.0);
                                            let v78 = C::put_in_reg(ctx, v76);
                                            let v79 =
                                                constructor_add_reg_sext32(ctx, v66, v67, v78);
                                            let v80 = constructor_output_reg(ctx, v79);
                                            let v81 = Some(v80);
                                            // Rule at src/isa/s390x/lower.isle line 64.
                                            return v81;
                                        }
                                    }
                                }
                            }
                            let v92 = C::i16_from_value(ctx, v42.1);
                            if let Some(v93) = v92 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v94 = constructor_add_simm16(ctx, v66, v67, v93);
                                let v95 = constructor_output_reg(ctx, v94);
                                let v96 = Some(v95);
                                // Rule at src/isa/s390x/lower.isle line 70.
                                return v96;
                            }
                            let v102 = C::i32_from_value(ctx, v42.1);
                            if let Some(v103) = v102 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v104 = constructor_add_simm32(ctx, v66, v67, v103);
                                let v105 = constructor_output_reg(ctx, v104);
                                let v106 = Some(v105);
                                // Rule at src/isa/s390x/lower.isle line 74.
                                return v106;
                            }
                            let v115 = C::sinkable_inst(ctx, v42.1);
                            if let Some(v116) = v115 {
                                let v117 = &C::inst_data(ctx, v116);
                                if let &InstructionData::Load {
                                    opcode: ref v118,
                                    arg: v119,
                                    flags: v120,
                                    offset: v121,
                                } = v117
                                {
                                    match v118 {
                                        &Opcode::Load => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v112 = C::value_type(ctx, v42.1);
                                                let v113 = C::ty_32_or_64(ctx, v112);
                                                if let Some(v114) = v113 {
                                                    let v67 = C::put_in_reg(ctx, v42.0);
                                                    let v124 = &constructor_sink_load(ctx, v116);
                                                    let v125 =
                                                        constructor_add_mem(ctx, v66, v67, v124);
                                                    let v126 = constructor_output_reg(ctx, v125);
                                                    let v127 = Some(v126);
                                                    // Rule at src/isa/s390x/lower.isle line 80.
                                                    return v127;
                                                }
                                                if v112 == I16 {
                                                    let v67 = C::put_in_reg(ctx, v42.0);
                                                    let v124 = &constructor_sink_load(ctx, v116);
                                                    let v144 = constructor_add_mem_sext16(
                                                        ctx, v66, v67, v124,
                                                    );
                                                    let v145 = constructor_output_reg(ctx, v144);
                                                    let v146 = Some(v145);
                                                    // Rule at src/isa/s390x/lower.isle line 86.
                                                    return v146;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v150 = &constructor_sink_sload16(ctx, v116);
                                                let v151 =
                                                    constructor_add_mem_sext16(ctx, v66, v67, v150);
                                                let v152 = constructor_output_reg(ctx, v151);
                                                let v153 = Some(v152);
                                                // Rule at src/isa/s390x/lower.isle line 92.
                                                return v153;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v158 = &constructor_sink_sload32(ctx, v116);
                                                let v159 =
                                                    constructor_add_mem_sext32(ctx, v66, v67, v158);
                                                let v160 = constructor_output_reg(ctx, v159);
                                                let v161 = Some(v160);
                                                // Rule at src/isa/s390x/lower.isle line 96.
                                                return v161;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v166 = constructor_vec_add(ctx, v39, v67, v68);
                            let v167 = constructor_output_reg(ctx, v166);
                            let v168 = Some(v167);
                            // Rule at src/isa/s390x/lower.isle line 102.
                            return v168;
                        }
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v69 = constructor_add_reg(ctx, v66, v67, v68);
                            let v70 = constructor_output_reg(ctx, v69);
                            let v71 = Some(v70);
                            // Rule at src/isa/s390x/lower.isle line 60.
                            return v71;
                        }
                    }
                }
                &Opcode::Isub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v72 = C::def_inst(ctx, v42.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::Unary {
                                    opcode: ref v75,
                                    arg: v76,
                                } = v74
                                {
                                    if let &Opcode::Sextend = v75 {
                                        let v77 = C::value_type(ctx, v76);
                                        if v77 == I32 {
                                            let v67 = C::put_in_reg(ctx, v42.0);
                                            let v78 = C::put_in_reg(ctx, v76);
                                            let v253 =
                                                constructor_sub_reg_sext32(ctx, v66, v67, v78);
                                            let v254 = constructor_output_reg(ctx, v253);
                                            let v255 = Some(v254);
                                            // Rule at src/isa/s390x/lower.isle line 150.
                                            return v255;
                                        }
                                    }
                                }
                            }
                            let v256 = C::i16_from_negated_value(ctx, v42.1);
                            if let Some(v257) = v256 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v258 = constructor_add_simm16(ctx, v66, v67, v257);
                                let v259 = constructor_output_reg(ctx, v258);
                                let v260 = Some(v259);
                                // Rule at src/isa/s390x/lower.isle line 154.
                                return v260;
                            }
                            let v261 = C::i32_from_negated_value(ctx, v42.1);
                            if let Some(v262) = v261 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v263 = constructor_add_simm32(ctx, v66, v67, v262);
                                let v264 = constructor_output_reg(ctx, v263);
                                let v265 = Some(v264);
                                // Rule at src/isa/s390x/lower.isle line 156.
                                return v265;
                            }
                            let v115 = C::sinkable_inst(ctx, v42.1);
                            if let Some(v116) = v115 {
                                let v117 = &C::inst_data(ctx, v116);
                                if let &InstructionData::Load {
                                    opcode: ref v118,
                                    arg: v119,
                                    flags: v120,
                                    offset: v121,
                                } = v117
                                {
                                    match v118 {
                                        &Opcode::Load => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v112 = C::value_type(ctx, v42.1);
                                                let v113 = C::ty_32_or_64(ctx, v112);
                                                if let Some(v114) = v113 {
                                                    let v67 = C::put_in_reg(ctx, v42.0);
                                                    let v124 = &constructor_sink_load(ctx, v116);
                                                    let v266 =
                                                        constructor_sub_mem(ctx, v66, v67, v124);
                                                    let v267 = constructor_output_reg(ctx, v266);
                                                    let v268 = Some(v267);
                                                    // Rule at src/isa/s390x/lower.isle line 160.
                                                    return v268;
                                                }
                                                if v112 == I16 {
                                                    let v67 = C::put_in_reg(ctx, v42.0);
                                                    let v124 = &constructor_sink_load(ctx, v116);
                                                    let v269 = constructor_sub_mem_sext16(
                                                        ctx, v66, v67, v124,
                                                    );
                                                    let v270 = constructor_output_reg(ctx, v269);
                                                    let v271 = Some(v270);
                                                    // Rule at src/isa/s390x/lower.isle line 164.
                                                    return v271;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v150 = &constructor_sink_sload16(ctx, v116);
                                                let v272 =
                                                    constructor_sub_mem_sext16(ctx, v66, v67, v150);
                                                let v273 = constructor_output_reg(ctx, v272);
                                                let v274 = Some(v273);
                                                // Rule at src/isa/s390x/lower.isle line 168.
                                                return v274;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v158 = &constructor_sink_sload32(ctx, v116);
                                                let v275 =
                                                    constructor_sub_mem_sext32(ctx, v66, v67, v158);
                                                let v276 = constructor_output_reg(ctx, v275);
                                                let v277 = Some(v276);
                                                // Rule at src/isa/s390x/lower.isle line 170.
                                                return v277;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v278 = constructor_vec_sub(ctx, v39, v67, v68);
                            let v279 = constructor_output_reg(ctx, v278);
                            let v280 = Some(v279);
                            // Rule at src/isa/s390x/lower.isle line 174.
                            return v280;
                        }
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v250 = constructor_sub_reg(ctx, v66, v67, v68);
                            let v251 = constructor_output_reg(ctx, v250);
                            let v252 = Some(v251);
                            // Rule at src/isa/s390x/lower.isle line 146.
                            return v252;
                        }
                    }
                }
                &Opcode::Imul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v82 = C::def_inst(ctx, v42.0);
                        if let Some(v83) = v82 {
                            let v84 = &C::inst_data(ctx, v83);
                            if let &InstructionData::Unary {
                                opcode: ref v85,
                                arg: v86,
                            } = v84
                            {
                                match v85 {
                                    &Opcode::Uextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v72 = C::def_inst(ctx, v42.1);
                                            if let Some(v73) = v72 {
                                                let v74 = &C::inst_data(ctx, v73);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v75,
                                                    arg: v76,
                                                } = v74
                                                {
                                                    if let &Opcode::Uextend = v75 {
                                                        let v440 =
                                                            constructor_put_in_reg_zext64(ctx, v86);
                                                        let v441 =
                                                            constructor_put_in_reg_zext64(ctx, v76);
                                                        let v442 =
                                                            constructor_umul_wide(ctx, v440, v441);
                                                        let v443 = C::regpair_hi(ctx, v442);
                                                        let v444 = C::regpair_lo(ctx, v442);
                                                        let v445 = constructor_mov_to_vec128(
                                                            ctx, I64X2, v443, v444,
                                                        );
                                                        let v446 =
                                                            constructor_output_reg(ctx, v445);
                                                        let v447 = Some(v446);
                                                        // Rule at src/isa/s390x/lower.isle line 413.
                                                        return v447;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    &Opcode::Sextend => {
                                        let v3 = C::value_type(ctx, v2);
                                        if v3 == I128 {
                                            let v72 = C::def_inst(ctx, v42.1);
                                            if let Some(v73) = v72 {
                                                let v74 = &C::inst_data(ctx, v73);
                                                if let &InstructionData::Unary {
                                                    opcode: ref v75,
                                                    arg: v76,
                                                } = v74
                                                {
                                                    if let &Opcode::Sextend = v75 {
                                                        let v448 =
                                                            constructor_put_in_reg_sext64(ctx, v86);
                                                        let v449 =
                                                            constructor_put_in_reg_sext64(ctx, v76);
                                                        let v450 =
                                                            constructor_smul_wide(ctx, v448, v449);
                                                        let v451 = C::regpair_hi(ctx, v450);
                                                        let v452 = C::regpair_lo(ctx, v450);
                                                        let v453 = constructor_mov_to_vec128(
                                                            ctx, I64X2, v451, v452,
                                                        );
                                                        let v454 =
                                                            constructor_output_reg(ctx, v453);
                                                        let v455 = Some(v454);
                                                        // Rule at src/isa/s390x/lower.isle line 417.
                                                        return v455;
                                                    }
                                                }
                                            }
                                        }
                                        let v65 = C::fits_in_64(ctx, v3);
                                        if let Some(v66) = v65 {
                                            let v87 = C::value_type(ctx, v86);
                                            if v87 == I32 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v88 = C::put_in_reg(ctx, v86);
                                                let v398 =
                                                    constructor_mul_reg_sext32(ctx, v66, v45, v88);
                                                let v399 = constructor_output_reg(ctx, v398);
                                                let v400 = Some(v399);
                                                // Rule at src/isa/s390x/lower.isle line 344.
                                                return v400;
                                            }
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v97 = C::i16_from_value(ctx, v42.0);
                            if let Some(v98) = v97 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v404 = constructor_mul_simm16(ctx, v66, v45, v98);
                                let v405 = constructor_output_reg(ctx, v404);
                                let v406 = Some(v405);
                                // Rule at src/isa/s390x/lower.isle line 350.
                                return v406;
                            }
                            let v107 = C::i32_from_value(ctx, v42.0);
                            if let Some(v108) = v107 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v410 = constructor_mul_simm32(ctx, v66, v45, v108);
                                let v411 = constructor_output_reg(ctx, v410);
                                let v412 = Some(v411);
                                // Rule at src/isa/s390x/lower.isle line 354.
                                return v412;
                            }
                            let v131 = C::sinkable_inst(ctx, v42.0);
                            if let Some(v132) = v131 {
                                let v133 = &C::inst_data(ctx, v132);
                                if let &InstructionData::Load {
                                    opcode: ref v134,
                                    arg: v135,
                                    flags: v136,
                                    offset: v137,
                                } = v133
                                {
                                    match v134 {
                                        &Opcode::Load => {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v128 = C::value_type(ctx, v42.0);
                                                let v129 = C::ty_32_or_64(ctx, v128);
                                                if let Some(v130) = v129 {
                                                    let v45 = C::put_in_reg(ctx, v42.1);
                                                    let v140 = &constructor_sink_load(ctx, v132);
                                                    let v416 =
                                                        constructor_mul_mem(ctx, v66, v45, v140);
                                                    let v417 = constructor_output_reg(ctx, v416);
                                                    let v418 = Some(v417);
                                                    // Rule at src/isa/s390x/lower.isle line 360.
                                                    return v418;
                                                }
                                                if v128 == I16 {
                                                    let v45 = C::put_in_reg(ctx, v42.1);
                                                    let v140 = &constructor_sink_load(ctx, v132);
                                                    let v422 = constructor_mul_mem_sext16(
                                                        ctx, v66, v45, v140,
                                                    );
                                                    let v423 = constructor_output_reg(ctx, v422);
                                                    let v424 = Some(v423);
                                                    // Rule at src/isa/s390x/lower.isle line 366.
                                                    return v424;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v154 = &constructor_sink_sload16(ctx, v132);
                                                let v428 =
                                                    constructor_mul_mem_sext16(ctx, v66, v45, v154);
                                                let v429 = constructor_output_reg(ctx, v428);
                                                let v430 = Some(v429);
                                                // Rule at src/isa/s390x/lower.isle line 372.
                                                return v430;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v162 = &constructor_sink_sload32(ctx, v132);
                                                let v434 =
                                                    constructor_mul_mem_sext32(ctx, v66, v45, v162);
                                                let v435 = constructor_output_reg(ctx, v434);
                                                let v436 = Some(v435);
                                                // Rule at src/isa/s390x/lower.isle line 376.
                                                return v436;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                            let v72 = C::def_inst(ctx, v42.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::Unary {
                                    opcode: ref v75,
                                    arg: v76,
                                } = v74
                                {
                                    if let &Opcode::Sextend = v75 {
                                        let v77 = C::value_type(ctx, v76);
                                        if v77 == I32 {
                                            let v67 = C::put_in_reg(ctx, v42.0);
                                            let v78 = C::put_in_reg(ctx, v76);
                                            let v395 =
                                                constructor_mul_reg_sext32(ctx, v66, v67, v78);
                                            let v396 = constructor_output_reg(ctx, v395);
                                            let v397 = Some(v396);
                                            // Rule at src/isa/s390x/lower.isle line 342.
                                            return v397;
                                        }
                                    }
                                }
                            }
                            let v92 = C::i16_from_value(ctx, v42.1);
                            if let Some(v93) = v92 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v401 = constructor_mul_simm16(ctx, v66, v67, v93);
                                let v402 = constructor_output_reg(ctx, v401);
                                let v403 = Some(v402);
                                // Rule at src/isa/s390x/lower.isle line 348.
                                return v403;
                            }
                            let v102 = C::i32_from_value(ctx, v42.1);
                            if let Some(v103) = v102 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v407 = constructor_mul_simm32(ctx, v66, v67, v103);
                                let v408 = constructor_output_reg(ctx, v407);
                                let v409 = Some(v408);
                                // Rule at src/isa/s390x/lower.isle line 352.
                                return v409;
                            }
                            let v115 = C::sinkable_inst(ctx, v42.1);
                            if let Some(v116) = v115 {
                                let v117 = &C::inst_data(ctx, v116);
                                if let &InstructionData::Load {
                                    opcode: ref v118,
                                    arg: v119,
                                    flags: v120,
                                    offset: v121,
                                } = v117
                                {
                                    match v118 {
                                        &Opcode::Load => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v112 = C::value_type(ctx, v42.1);
                                                let v113 = C::ty_32_or_64(ctx, v112);
                                                if let Some(v114) = v113 {
                                                    let v67 = C::put_in_reg(ctx, v42.0);
                                                    let v124 = &constructor_sink_load(ctx, v116);
                                                    let v413 =
                                                        constructor_mul_mem(ctx, v66, v67, v124);
                                                    let v414 = constructor_output_reg(ctx, v413);
                                                    let v415 = Some(v414);
                                                    // Rule at src/isa/s390x/lower.isle line 358.
                                                    return v415;
                                                }
                                                if v112 == I16 {
                                                    let v67 = C::put_in_reg(ctx, v42.0);
                                                    let v124 = &constructor_sink_load(ctx, v116);
                                                    let v419 = constructor_mul_mem_sext16(
                                                        ctx, v66, v67, v124,
                                                    );
                                                    let v420 = constructor_output_reg(ctx, v419);
                                                    let v421 = Some(v420);
                                                    // Rule at src/isa/s390x/lower.isle line 364.
                                                    return v421;
                                                }
                                            }
                                        }
                                        &Opcode::Sload16 => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v150 = &constructor_sink_sload16(ctx, v116);
                                                let v425 =
                                                    constructor_mul_mem_sext16(ctx, v66, v67, v150);
                                                let v426 = constructor_output_reg(ctx, v425);
                                                let v427 = Some(v426);
                                                // Rule at src/isa/s390x/lower.isle line 370.
                                                return v427;
                                            }
                                        }
                                        &Opcode::Sload32 => {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v158 = &constructor_sink_sload32(ctx, v116);
                                                let v431 =
                                                    constructor_mul_mem_sext32(ctx, v66, v67, v158);
                                                let v432 = constructor_output_reg(ctx, v431);
                                                let v433 = Some(v432);
                                                // Rule at src/isa/s390x/lower.isle line 374.
                                                return v433;
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                            }
                        }
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v437 = constructor_vec_mul_impl(ctx, v39, v67, v68);
                            let v438 = constructor_output_reg(ctx, v437);
                            let v439 = Some(v438);
                            // Rule at src/isa/s390x/lower.isle line 381.
                            return v439;
                        }
                        if let Some(v66) = v65 {
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v392 = constructor_mul_reg(ctx, v66, v67, v68);
                            let v393 = constructor_output_reg(ctx, v392);
                            let v394 = Some(v393);
                            // Rule at src/isa/s390x/lower.isle line 338.
                            return v394;
                        }
                    }
                }
                &Opcode::Umulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v464 = constructor_put_in_reg_zext64(ctx, v42.0);
                                let v465 = constructor_put_in_reg_zext64(ctx, v42.1);
                                let v467 = constructor_mul_reg(ctx, I64, v464, v465);
                                let v469 = constructor_lshr_imm(ctx, I64, v467, 0x20);
                                let v470 = constructor_output_reg(ctx, v469);
                                let v471 = Some(v470);
                                // Rule at src/isa/s390x/lower.isle line 431.
                                return v471;
                            }
                            I64 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v472 = constructor_umul_wide(ctx, v67, v68);
                                let v473 = C::regpair_hi(ctx, v472);
                                let v474 = constructor_output_reg(ctx, v473);
                                let v475 = Some(v474);
                                // Rule at src/isa/s390x/lower.isle line 438.
                                return v475;
                            }
                            I8X16 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v476 = constructor_vec_umulhi(ctx, I8X16, v67, v68);
                                let v477 = constructor_output_reg(ctx, v476);
                                let v478 = Some(v477);
                                // Rule at src/isa/s390x/lower.isle line 443.
                                return v478;
                            }
                            I16X8 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v480 = constructor_vec_umulhi(ctx, I16X8, v67, v68);
                                let v481 = constructor_output_reg(ctx, v480);
                                let v482 = Some(v481);
                                // Rule at src/isa/s390x/lower.isle line 444.
                                return v482;
                            }
                            I32X4 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v484 = constructor_vec_umulhi(ctx, I32X4, v67, v68);
                                let v485 = constructor_output_reg(ctx, v484);
                                let v486 = Some(v485);
                                // Rule at src/isa/s390x/lower.isle line 445.
                                return v486;
                            }
                            I64X2 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v56 = C::zero_reg(ctx);
                                let v487 = constructor_vec_extract_lane(ctx, I64X2, v67, 0x0, v56);
                                let v488 = C::put_in_reg(ctx, v42.1);
                                let v489 = C::zero_reg(ctx);
                                let v490 =
                                    constructor_vec_extract_lane(ctx, I64X2, v488, 0x0, v489);
                                let v491 = constructor_umul_wide(ctx, v487, v490);
                                let v492 = C::regpair_hi(ctx, v491);
                                let v185 = C::put_in_reg(ctx, v42.0);
                                let v493 = C::zero_reg(ctx);
                                let v494 =
                                    constructor_vec_extract_lane(ctx, I64X2, v185, 0x1, v493);
                                let v495 = C::put_in_reg(ctx, v42.1);
                                let v496 = C::zero_reg(ctx);
                                let v497 =
                                    constructor_vec_extract_lane(ctx, I64X2, v495, 0x1, v496);
                                let v498 = constructor_umul_wide(ctx, v494, v497);
                                let v499 = C::regpair_hi(ctx, v498);
                                let v500 = constructor_mov_to_vec128(ctx, I64X2, v492, v499);
                                let v501 = constructor_output_reg(ctx, v500);
                                let v502 = Some(v501);
                                // Rule at src/isa/s390x/lower.isle line 449.
                                return v502;
                            }
                            _ => {}
                        }
                        let v456 = C::ty_8_or_16(ctx, v3);
                        if let Some(v457) = v456 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v331 = constructor_put_in_reg_zext32(ctx, v42.1);
                            let v459 = constructor_mul_reg(ctx, I32, v330, v331);
                            let v460 = C::ty_bits(ctx, v457);
                            let v461 = constructor_lshr_imm(ctx, I32, v459, v460);
                            let v462 = constructor_output_reg(ctx, v461);
                            let v463 = Some(v462);
                            // Rule at src/isa/s390x/lower.isle line 424.
                            return v463;
                        }
                    }
                }
                &Opcode::Smulhi => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v507 = constructor_put_in_reg_sext64(ctx, v42.0);
                                let v508 = constructor_put_in_reg_sext64(ctx, v42.1);
                                let v509 = constructor_mul_reg(ctx, I64, v507, v508);
                                let v510 = constructor_ashr_imm(ctx, I64, v509, 0x20);
                                let v511 = constructor_output_reg(ctx, v510);
                                let v512 = Some(v511);
                                // Rule at src/isa/s390x/lower.isle line 469.
                                return v512;
                            }
                            I64 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v513 = constructor_smul_wide(ctx, v67, v68);
                                let v514 = C::regpair_hi(ctx, v513);
                                let v515 = constructor_output_reg(ctx, v514);
                                let v516 = Some(v515);
                                // Rule at src/isa/s390x/lower.isle line 476.
                                return v516;
                            }
                            I8X16 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v517 = constructor_vec_smulhi(ctx, I8X16, v67, v68);
                                let v518 = constructor_output_reg(ctx, v517);
                                let v519 = Some(v518);
                                // Rule at src/isa/s390x/lower.isle line 481.
                                return v519;
                            }
                            I16X8 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v520 = constructor_vec_smulhi(ctx, I16X8, v67, v68);
                                let v521 = constructor_output_reg(ctx, v520);
                                let v522 = Some(v521);
                                // Rule at src/isa/s390x/lower.isle line 482.
                                return v522;
                            }
                            I32X4 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v523 = constructor_vec_smulhi(ctx, I32X4, v67, v68);
                                let v524 = constructor_output_reg(ctx, v523);
                                let v525 = Some(v524);
                                // Rule at src/isa/s390x/lower.isle line 483.
                                return v525;
                            }
                            I64X2 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v56 = C::zero_reg(ctx);
                                let v487 = constructor_vec_extract_lane(ctx, I64X2, v67, 0x0, v56);
                                let v488 = C::put_in_reg(ctx, v42.1);
                                let v489 = C::zero_reg(ctx);
                                let v490 =
                                    constructor_vec_extract_lane(ctx, I64X2, v488, 0x0, v489);
                                let v526 = constructor_smul_wide(ctx, v487, v490);
                                let v527 = C::regpair_hi(ctx, v526);
                                let v528 = constructor_copy_reg(ctx, I64, v527);
                                let v529 = C::put_in_reg(ctx, v42.0);
                                let v530 = C::zero_reg(ctx);
                                let v531 =
                                    constructor_vec_extract_lane(ctx, I64X2, v529, 0x1, v530);
                                let v532 = C::put_in_reg(ctx, v42.1);
                                let v533 = C::zero_reg(ctx);
                                let v534 =
                                    constructor_vec_extract_lane(ctx, I64X2, v532, 0x1, v533);
                                let v535 = constructor_smul_wide(ctx, v531, v534);
                                let v536 = C::regpair_hi(ctx, v535);
                                let v537 = constructor_mov_to_vec128(ctx, I64X2, v528, v536);
                                let v538 = constructor_output_reg(ctx, v537);
                                let v539 = Some(v538);
                                // Rule at src/isa/s390x/lower.isle line 487.
                                return v539;
                            }
                            _ => {}
                        }
                        let v456 = C::ty_8_or_16(ctx, v3);
                        if let Some(v457) = v456 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v360 = constructor_put_in_reg_sext32(ctx, v42.0);
                            let v361 = constructor_put_in_reg_sext32(ctx, v42.1);
                            let v503 = constructor_mul_reg(ctx, I32, v360, v361);
                            let v460 = C::ty_bits(ctx, v457);
                            let v504 = constructor_ashr_imm(ctx, I32, v503, v460);
                            let v505 = constructor_output_reg(ctx, v504);
                            let v506 = Some(v505);
                            // Rule at src/isa/s390x/lower.isle line 462.
                            return v506;
                        }
                    }
                }
                &Opcode::SqmulRoundSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v177 = constructor_vec_widen_type(ctx, v170);
                            let v178 = constructor_vec_widen_type(ctx, v170);
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v180 = constructor_vec_unpacks_high(ctx, v170, v179);
                            let v181 = C::put_in_reg(ctx, v42.1);
                            let v182 = constructor_vec_unpacks_high(ctx, v170, v181);
                            let v540 = constructor_sqmul_impl(ctx, v178, v180, v182);
                            let v184 = constructor_vec_widen_type(ctx, v170);
                            let v185 = C::put_in_reg(ctx, v42.0);
                            let v186 = constructor_vec_unpacks_low(ctx, v170, v185);
                            let v187 = C::put_in_reg(ctx, v42.1);
                            let v188 = constructor_vec_unpacks_low(ctx, v170, v187);
                            let v541 = constructor_sqmul_impl(ctx, v184, v186, v188);
                            let v542 = constructor_vec_pack_ssat(ctx, v177, v540, v541);
                            let v543 = constructor_output_reg(ctx, v542);
                            let v544 = Some(v543);
                            // Rule at src/isa/s390x/lower.isle line 500.
                            return v544;
                        }
                    }
                }
                &Opcode::Udiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v291 = constructor_ty_ext32(ctx, v66);
                            let v546 = constructor_imm(ctx, v291, 0x0);
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v547 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v548 = C::regpair(ctx, v546, v547);
                            let v549 = constructor_put_in_reg_zext32(ctx, v42.1);
                            let v550 = constructor_ty_ext32(ctx, v66);
                            let v551 = constructor_udivmod(ctx, v550, v548, v549);
                            let v552 = C::regpair_lo(ctx, v551);
                            let v553 = constructor_output_reg(ctx, v552);
                            let v554 = Some(v553);
                            // Rule at src/isa/s390x/lower.isle line 538.
                            return v554;
                        }
                    }
                }
                &Opcode::Sdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v558 = constructor_div_overflow_check_needed(ctx, v42.1);
                            let v559 = constructor_put_in_reg_sext64(ctx, v42.0);
                            let v560 = constructor_put_in_reg_sext32(ctx, v42.1);
                            let v561 = constructor_ty_ext32(ctx, v66);
                            let v562 = constructor_maybe_trap_if_sdiv_overflow(
                                ctx, v558, v561, v66, v559, v560,
                            );
                            let v563 = constructor_sdivmod(ctx, v561, v559, v560);
                            let v564 = C::regpair_lo(ctx, v563);
                            let v565 = constructor_output_reg(ctx, v564);
                            let v566 = Some(v565);
                            // Rule at src/isa/s390x/lower.isle line 582.
                            return v566;
                        }
                    }
                }
                &Opcode::Urem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v291 = constructor_ty_ext32(ctx, v66);
                            let v546 = constructor_imm(ctx, v291, 0x0);
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v547 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v548 = C::regpair(ctx, v546, v547);
                            let v549 = constructor_put_in_reg_zext32(ctx, v42.1);
                            let v550 = constructor_ty_ext32(ctx, v66);
                            let v551 = constructor_udivmod(ctx, v550, v548, v549);
                            let v555 = C::regpair_hi(ctx, v551);
                            let v556 = constructor_output_reg(ctx, v555);
                            let v557 = Some(v556);
                            // Rule at src/isa/s390x/lower.isle line 556.
                            return v557;
                        }
                    }
                }
                &Opcode::Srem => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v558 = constructor_div_overflow_check_needed(ctx, v42.1);
                            let v559 = constructor_put_in_reg_sext64(ctx, v42.0);
                            let v560 = constructor_put_in_reg_sext32(ctx, v42.1);
                            let v561 = constructor_ty_ext32(ctx, v66);
                            let v567 =
                                constructor_maybe_avoid_srem_overflow(ctx, v558, v561, v559, v560);
                            let v568 = constructor_sdivmod(ctx, v561, v567, v560);
                            let v569 = C::regpair_hi(ctx, v568);
                            let v570 = constructor_output_reg(ctx, v569);
                            let v571 = Some(v570);
                            // Rule at src/isa/s390x/lower.isle line 601.
                            return v571;
                        }
                    }
                }
                &Opcode::Band => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v82 = C::def_inst(ctx, v42.0);
                            if let Some(v83) = v82 {
                                let v84 = &C::inst_data(ctx, v83);
                                if let &InstructionData::Unary {
                                    opcode: ref v85,
                                    arg: v86,
                                } = v84
                                {
                                    if let &Opcode::Bnot = v85 {
                                        let v45 = C::put_in_reg(ctx, v42.1);
                                        let v88 = C::put_in_reg(ctx, v86);
                                        let v846 = constructor_vec_and_not(ctx, v39, v45, v88);
                                        let v847 = constructor_output_reg(ctx, v846);
                                        let v848 = Some(v847);
                                        // Rule at src/isa/s390x/lower.isle line 1034.
                                        return v848;
                                    }
                                }
                            }
                            let v72 = C::def_inst(ctx, v42.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::Unary {
                                    opcode: ref v75,
                                    arg: v76,
                                } = v74
                                {
                                    if let &Opcode::Bnot = v75 {
                                        let v67 = C::put_in_reg(ctx, v42.0);
                                        let v78 = C::put_in_reg(ctx, v76);
                                        let v843 = constructor_vec_and_not(ctx, v39, v67, v78);
                                        let v844 = constructor_output_reg(ctx, v843);
                                        let v845 = Some(v844);
                                        // Rule at src/isa/s390x/lower.isle line 1032.
                                        return v845;
                                    }
                                }
                            }
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v779 = C::mie2_enabled(ctx, v3);
                            if let Some(v780) = v779 {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v82 = C::def_inst(ctx, v42.0);
                                if let Some(v83) = v82 {
                                    let v84 = &C::inst_data(ctx, v83);
                                    if let &InstructionData::Unary {
                                        opcode: ref v85,
                                        arg: v86,
                                    } = v84
                                    {
                                        if let &Opcode::Bnot = v85 {
                                            let v45 = C::put_in_reg(ctx, v42.1);
                                            let v88 = C::put_in_reg(ctx, v86);
                                            let v840 = constructor_and_not_reg(ctx, v66, v45, v88);
                                            let v841 = constructor_output_reg(ctx, v840);
                                            let v842 = Some(v841);
                                            // Rule at src/isa/s390x/lower.isle line 1028.
                                            return v842;
                                        }
                                    }
                                }
                                let v72 = C::def_inst(ctx, v42.1);
                                if let Some(v73) = v72 {
                                    let v74 = &C::inst_data(ctx, v73);
                                    if let &InstructionData::Unary {
                                        opcode: ref v75,
                                        arg: v76,
                                    } = v74
                                    {
                                        if let &Opcode::Bnot = v75 {
                                            let v67 = C::put_in_reg(ctx, v42.0);
                                            let v78 = C::put_in_reg(ctx, v76);
                                            let v837 = constructor_and_not_reg(ctx, v66, v67, v78);
                                            let v838 = constructor_output_reg(ctx, v837);
                                            let v839 = Some(v838);
                                            // Rule at src/isa/s390x/lower.isle line 1026.
                                            return v839;
                                        }
                                    }
                                }
                            }
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v813 = C::uimm16shifted_from_inverted_value(ctx, v42.0);
                            if let Some(v814) = v813 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v815 = constructor_and_uimm16shifted(ctx, v66, v45, v814);
                                let v816 = constructor_output_reg(ctx, v815);
                                let v817 = Some(v816);
                                // Rule at src/isa/s390x/lower.isle line 1004.
                                return v817;
                            }
                            let v808 = C::uimm16shifted_from_inverted_value(ctx, v42.1);
                            if let Some(v809) = v808 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v810 = constructor_and_uimm16shifted(ctx, v66, v67, v809);
                                let v811 = constructor_output_reg(ctx, v810);
                                let v812 = Some(v811);
                                // Rule at src/isa/s390x/lower.isle line 1002.
                                return v812;
                            }
                            let v823 = C::uimm32shifted_from_inverted_value(ctx, v42.0);
                            if let Some(v824) = v823 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v825 = constructor_and_uimm32shifted(ctx, v66, v45, v824);
                                let v826 = constructor_output_reg(ctx, v825);
                                let v827 = Some(v826);
                                // Rule at src/isa/s390x/lower.isle line 1008.
                                return v827;
                            }
                            let v818 = C::uimm32shifted_from_inverted_value(ctx, v42.1);
                            if let Some(v819) = v818 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v820 = constructor_and_uimm32shifted(ctx, v66, v67, v819);
                                let v821 = constructor_output_reg(ctx, v820);
                                let v822 = Some(v821);
                                // Rule at src/isa/s390x/lower.isle line 1006.
                                return v822;
                            }
                            let v128 = C::value_type(ctx, v42.0);
                            let v129 = C::ty_32_or_64(ctx, v128);
                            if let Some(v130) = v129 {
                                let v131 = C::sinkable_inst(ctx, v42.0);
                                if let Some(v132) = v131 {
                                    let v133 = &C::inst_data(ctx, v132);
                                    if let &InstructionData::Load {
                                        opcode: ref v134,
                                        arg: v135,
                                        flags: v136,
                                        offset: v137,
                                    } = v133
                                    {
                                        if let &Opcode::Load = v134 {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v140 = &constructor_sink_load(ctx, v132);
                                                let v831 = constructor_and_mem(ctx, v66, v45, v140);
                                                let v832 = constructor_output_reg(ctx, v831);
                                                let v833 = Some(v832);
                                                // Rule at src/isa/s390x/lower.isle line 1014.
                                                return v833;
                                            }
                                        }
                                    }
                                }
                            }
                            let v112 = C::value_type(ctx, v42.1);
                            let v113 = C::ty_32_or_64(ctx, v112);
                            if let Some(v114) = v113 {
                                let v115 = C::sinkable_inst(ctx, v42.1);
                                if let Some(v116) = v115 {
                                    let v117 = &C::inst_data(ctx, v116);
                                    if let &InstructionData::Load {
                                        opcode: ref v118,
                                        arg: v119,
                                        flags: v120,
                                        offset: v121,
                                    } = v117
                                    {
                                        if let &Opcode::Load = v118 {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v124 = &constructor_sink_load(ctx, v116);
                                                let v828 = constructor_and_mem(ctx, v66, v67, v124);
                                                let v829 = constructor_output_reg(ctx, v828);
                                                let v830 = Some(v829);
                                                // Rule at src/isa/s390x/lower.isle line 1012.
                                                return v830;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v834 = constructor_vec_and(ctx, v39, v67, v68);
                            let v835 = constructor_output_reg(ctx, v834);
                            let v836 = Some(v835);
                            // Rule at src/isa/s390x/lower.isle line 1018.
                            return v836;
                        }
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v805 = constructor_and_reg(ctx, v66, v67, v68);
                            let v806 = constructor_output_reg(ctx, v805);
                            let v807 = Some(v806);
                            // Rule at src/isa/s390x/lower.isle line 998.
                            return v807;
                        }
                    }
                }
                &Opcode::Bor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v82 = C::def_inst(ctx, v42.0);
                            if let Some(v83) = v82 {
                                let v84 = &C::inst_data(ctx, v83);
                                if let &InstructionData::Unary {
                                    opcode: ref v85,
                                    arg: v86,
                                } = v84
                                {
                                    if let &Opcode::Bnot = v85 {
                                        let v45 = C::put_in_reg(ctx, v42.1);
                                        let v88 = C::put_in_reg(ctx, v86);
                                        let v890 = constructor_vec_or_not(ctx, v39, v45, v88);
                                        let v891 = constructor_output_reg(ctx, v890);
                                        let v892 = Some(v891);
                                        // Rule at src/isa/s390x/lower.isle line 1076.
                                        return v892;
                                    }
                                }
                            }
                            let v72 = C::def_inst(ctx, v42.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::Unary {
                                    opcode: ref v75,
                                    arg: v76,
                                } = v74
                                {
                                    if let &Opcode::Bnot = v75 {
                                        let v67 = C::put_in_reg(ctx, v42.0);
                                        let v78 = C::put_in_reg(ctx, v76);
                                        let v887 = constructor_vec_or_not(ctx, v39, v67, v78);
                                        let v888 = constructor_output_reg(ctx, v887);
                                        let v889 = Some(v888);
                                        // Rule at src/isa/s390x/lower.isle line 1074.
                                        return v889;
                                    }
                                }
                            }
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v779 = C::mie2_enabled(ctx, v3);
                            if let Some(v780) = v779 {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v82 = C::def_inst(ctx, v42.0);
                                if let Some(v83) = v82 {
                                    let v84 = &C::inst_data(ctx, v83);
                                    if let &InstructionData::Unary {
                                        opcode: ref v85,
                                        arg: v86,
                                    } = v84
                                    {
                                        if let &Opcode::Bnot = v85 {
                                            let v45 = C::put_in_reg(ctx, v42.1);
                                            let v88 = C::put_in_reg(ctx, v86);
                                            let v884 = constructor_or_not_reg(ctx, v66, v45, v88);
                                            let v885 = constructor_output_reg(ctx, v884);
                                            let v886 = Some(v885);
                                            // Rule at src/isa/s390x/lower.isle line 1070.
                                            return v886;
                                        }
                                    }
                                }
                                let v72 = C::def_inst(ctx, v42.1);
                                if let Some(v73) = v72 {
                                    let v74 = &C::inst_data(ctx, v73);
                                    if let &InstructionData::Unary {
                                        opcode: ref v75,
                                        arg: v76,
                                    } = v74
                                    {
                                        if let &Opcode::Bnot = v75 {
                                            let v67 = C::put_in_reg(ctx, v42.0);
                                            let v78 = C::put_in_reg(ctx, v76);
                                            let v881 = constructor_or_not_reg(ctx, v66, v67, v78);
                                            let v882 = constructor_output_reg(ctx, v881);
                                            let v883 = Some(v882);
                                            // Rule at src/isa/s390x/lower.isle line 1068.
                                            return v883;
                                        }
                                    }
                                }
                            }
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v857 = C::uimm16shifted_from_value(ctx, v42.0);
                            if let Some(v858) = v857 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v859 = constructor_or_uimm16shifted(ctx, v66, v45, v858);
                                let v860 = constructor_output_reg(ctx, v859);
                                let v861 = Some(v860);
                                // Rule at src/isa/s390x/lower.isle line 1046.
                                return v861;
                            }
                            let v852 = C::uimm16shifted_from_value(ctx, v42.1);
                            if let Some(v853) = v852 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v854 = constructor_or_uimm16shifted(ctx, v66, v67, v853);
                                let v855 = constructor_output_reg(ctx, v854);
                                let v856 = Some(v855);
                                // Rule at src/isa/s390x/lower.isle line 1044.
                                return v856;
                            }
                            let v867 = C::uimm32shifted_from_value(ctx, v42.0);
                            if let Some(v868) = v867 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v869 = constructor_or_uimm32shifted(ctx, v66, v45, v868);
                                let v870 = constructor_output_reg(ctx, v869);
                                let v871 = Some(v870);
                                // Rule at src/isa/s390x/lower.isle line 1050.
                                return v871;
                            }
                            let v862 = C::uimm32shifted_from_value(ctx, v42.1);
                            if let Some(v863) = v862 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v864 = constructor_or_uimm32shifted(ctx, v66, v67, v863);
                                let v865 = constructor_output_reg(ctx, v864);
                                let v866 = Some(v865);
                                // Rule at src/isa/s390x/lower.isle line 1048.
                                return v866;
                            }
                            let v128 = C::value_type(ctx, v42.0);
                            let v129 = C::ty_32_or_64(ctx, v128);
                            if let Some(v130) = v129 {
                                let v131 = C::sinkable_inst(ctx, v42.0);
                                if let Some(v132) = v131 {
                                    let v133 = &C::inst_data(ctx, v132);
                                    if let &InstructionData::Load {
                                        opcode: ref v134,
                                        arg: v135,
                                        flags: v136,
                                        offset: v137,
                                    } = v133
                                    {
                                        if let &Opcode::Load = v134 {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v140 = &constructor_sink_load(ctx, v132);
                                                let v875 = constructor_or_mem(ctx, v66, v45, v140);
                                                let v876 = constructor_output_reg(ctx, v875);
                                                let v877 = Some(v876);
                                                // Rule at src/isa/s390x/lower.isle line 1056.
                                                return v877;
                                            }
                                        }
                                    }
                                }
                            }
                            let v112 = C::value_type(ctx, v42.1);
                            let v113 = C::ty_32_or_64(ctx, v112);
                            if let Some(v114) = v113 {
                                let v115 = C::sinkable_inst(ctx, v42.1);
                                if let Some(v116) = v115 {
                                    let v117 = &C::inst_data(ctx, v116);
                                    if let &InstructionData::Load {
                                        opcode: ref v118,
                                        arg: v119,
                                        flags: v120,
                                        offset: v121,
                                    } = v117
                                    {
                                        if let &Opcode::Load = v118 {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v124 = &constructor_sink_load(ctx, v116);
                                                let v872 = constructor_or_mem(ctx, v66, v67, v124);
                                                let v873 = constructor_output_reg(ctx, v872);
                                                let v874 = Some(v873);
                                                // Rule at src/isa/s390x/lower.isle line 1054.
                                                return v874;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v878 = constructor_vec_or(ctx, v39, v67, v68);
                            let v879 = constructor_output_reg(ctx, v878);
                            let v880 = Some(v879);
                            // Rule at src/isa/s390x/lower.isle line 1060.
                            return v880;
                        }
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v849 = constructor_or_reg(ctx, v66, v67, v68);
                            let v850 = constructor_output_reg(ctx, v849);
                            let v851 = Some(v850);
                            // Rule at src/isa/s390x/lower.isle line 1040.
                            return v851;
                        }
                    }
                }
                &Opcode::Bxor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v82 = C::def_inst(ctx, v42.0);
                            if let Some(v83) = v82 {
                                let v84 = &C::inst_data(ctx, v83);
                                if let &InstructionData::Unary {
                                    opcode: ref v85,
                                    arg: v86,
                                } = v84
                                {
                                    if let &Opcode::Bnot = v85 {
                                        let v45 = C::put_in_reg(ctx, v42.1);
                                        let v88 = C::put_in_reg(ctx, v86);
                                        let v920 = constructor_vec_not_xor(ctx, v39, v45, v88);
                                        let v921 = constructor_output_reg(ctx, v920);
                                        let v922 = Some(v921);
                                        // Rule at src/isa/s390x/lower.isle line 1115.
                                        return v922;
                                    }
                                }
                            }
                            let v72 = C::def_inst(ctx, v42.1);
                            if let Some(v73) = v72 {
                                let v74 = &C::inst_data(ctx, v73);
                                if let &InstructionData::Unary {
                                    opcode: ref v75,
                                    arg: v76,
                                } = v74
                                {
                                    if let &Opcode::Bnot = v75 {
                                        let v67 = C::put_in_reg(ctx, v42.0);
                                        let v78 = C::put_in_reg(ctx, v76);
                                        let v917 = constructor_vec_not_xor(ctx, v39, v67, v78);
                                        let v918 = constructor_output_reg(ctx, v917);
                                        let v919 = Some(v918);
                                        // Rule at src/isa/s390x/lower.isle line 1113.
                                        return v919;
                                    }
                                }
                            }
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v779 = C::mie2_enabled(ctx, v3);
                            if let Some(v780) = v779 {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v82 = C::def_inst(ctx, v42.0);
                                if let Some(v83) = v82 {
                                    let v84 = &C::inst_data(ctx, v83);
                                    if let &InstructionData::Unary {
                                        opcode: ref v85,
                                        arg: v86,
                                    } = v84
                                    {
                                        if let &Opcode::Bnot = v85 {
                                            let v45 = C::put_in_reg(ctx, v42.1);
                                            let v88 = C::put_in_reg(ctx, v86);
                                            let v914 = constructor_not_xor_reg(ctx, v66, v45, v88);
                                            let v915 = constructor_output_reg(ctx, v914);
                                            let v916 = Some(v915);
                                            // Rule at src/isa/s390x/lower.isle line 1109.
                                            return v916;
                                        }
                                    }
                                }
                                let v72 = C::def_inst(ctx, v42.1);
                                if let Some(v73) = v72 {
                                    let v74 = &C::inst_data(ctx, v73);
                                    if let &InstructionData::Unary {
                                        opcode: ref v75,
                                        arg: v76,
                                    } = v74
                                    {
                                        if let &Opcode::Bnot = v75 {
                                            let v67 = C::put_in_reg(ctx, v42.0);
                                            let v78 = C::put_in_reg(ctx, v76);
                                            let v911 = constructor_not_xor_reg(ctx, v66, v67, v78);
                                            let v912 = constructor_output_reg(ctx, v911);
                                            let v913 = Some(v912);
                                            // Rule at src/isa/s390x/lower.isle line 1107.
                                            return v913;
                                        }
                                    }
                                }
                            }
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v867 = C::uimm32shifted_from_value(ctx, v42.0);
                            if let Some(v868) = v867 {
                                let v45 = C::put_in_reg(ctx, v42.1);
                                let v899 = constructor_xor_uimm32shifted(ctx, v66, v45, v868);
                                let v900 = constructor_output_reg(ctx, v899);
                                let v901 = Some(v900);
                                // Rule at src/isa/s390x/lower.isle line 1089.
                                return v901;
                            }
                            let v862 = C::uimm32shifted_from_value(ctx, v42.1);
                            if let Some(v863) = v862 {
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v896 = constructor_xor_uimm32shifted(ctx, v66, v67, v863);
                                let v897 = constructor_output_reg(ctx, v896);
                                let v898 = Some(v897);
                                // Rule at src/isa/s390x/lower.isle line 1087.
                                return v898;
                            }
                            let v128 = C::value_type(ctx, v42.0);
                            let v129 = C::ty_32_or_64(ctx, v128);
                            if let Some(v130) = v129 {
                                let v131 = C::sinkable_inst(ctx, v42.0);
                                if let Some(v132) = v131 {
                                    let v133 = &C::inst_data(ctx, v132);
                                    if let &InstructionData::Load {
                                        opcode: ref v134,
                                        arg: v135,
                                        flags: v136,
                                        offset: v137,
                                    } = v133
                                    {
                                        if let &Opcode::Load = v134 {
                                            let v138 = C::bigendian(ctx, v136);
                                            if let Some(v139) = v138 {
                                                let v45 = C::put_in_reg(ctx, v42.1);
                                                let v140 = &constructor_sink_load(ctx, v132);
                                                let v905 = constructor_xor_mem(ctx, v66, v45, v140);
                                                let v906 = constructor_output_reg(ctx, v905);
                                                let v907 = Some(v906);
                                                // Rule at src/isa/s390x/lower.isle line 1095.
                                                return v907;
                                            }
                                        }
                                    }
                                }
                            }
                            let v112 = C::value_type(ctx, v42.1);
                            let v113 = C::ty_32_or_64(ctx, v112);
                            if let Some(v114) = v113 {
                                let v115 = C::sinkable_inst(ctx, v42.1);
                                if let Some(v116) = v115 {
                                    let v117 = &C::inst_data(ctx, v116);
                                    if let &InstructionData::Load {
                                        opcode: ref v118,
                                        arg: v119,
                                        flags: v120,
                                        offset: v121,
                                    } = v117
                                    {
                                        if let &Opcode::Load = v118 {
                                            let v122 = C::bigendian(ctx, v120);
                                            if let Some(v123) = v122 {
                                                let v67 = C::put_in_reg(ctx, v42.0);
                                                let v124 = &constructor_sink_load(ctx, v116);
                                                let v902 = constructor_xor_mem(ctx, v66, v67, v124);
                                                let v903 = constructor_output_reg(ctx, v902);
                                                let v904 = Some(v903);
                                                // Rule at src/isa/s390x/lower.isle line 1093.
                                                return v904;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v908 = constructor_vec_xor(ctx, v39, v67, v68);
                            let v909 = constructor_output_reg(ctx, v908);
                            let v910 = Some(v909);
                            // Rule at src/isa/s390x/lower.isle line 1099.
                            return v910;
                        }
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v68 = C::put_in_reg(ctx, v42.1);
                            let v893 = constructor_xor_reg(ctx, v66, v67, v68);
                            let v894 = constructor_output_reg(ctx, v893);
                            let v895 = Some(v894);
                            // Rule at src/isa/s390x/lower.isle line 1083.
                            return v895;
                        }
                    }
                }
                &Opcode::Rotl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v664 = constructor_amt_vr(ctx, v42.1);
                            let v665 = constructor_vec_neg(ctx, I8X16, v664);
                            let v666 = constructor_vec_lshl_by_byte(ctx, v67, v664);
                            let v667 = constructor_vec_lshl_by_bit(ctx, v666, v664);
                            let v668 = constructor_vec_lshr_by_byte(ctx, v67, v665);
                            let v669 = constructor_vec_lshr_by_bit(ctx, v668, v665);
                            let v670 = constructor_vec_or(ctx, I128, v667, v669);
                            let v671 = constructor_output_reg(ctx, v670);
                            let v672 = Some(v671);
                            // Rule at src/isa/s390x/lower.isle line 810.
                            return v672;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v587 = C::mask_amt_imm(ctx, v170, v578);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v661 = constructor_vec_rot_imm(ctx, v170, v46, v587);
                                let v662 = constructor_output_reg(ctx, v661);
                                let v663 = Some(v662);
                                // Rule at src/isa/s390x/lower.isle line 804.
                                return v663;
                            }
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v658 = constructor_vec_rot_reg(ctx, v170, v67, v583);
                            let v659 = constructor_output_reg(ctx, v658);
                            let v660 = Some(v659);
                            // Rule at src/isa/s390x/lower.isle line 800.
                            return v660;
                        }
                        let v456 = C::ty_8_or_16(ctx, v3);
                        if let Some(v457) = v456 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v649 = C::i64_from_negated_value(ctx, v42.1);
                                if let Some(v650) = v649 {
                                    let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                                    let v639 = constructor_ty_ext32(ctx, v457);
                                    let v651 = C::mask_amt_imm(ctx, v457, v578);
                                    let v652 = C::mask_amt_imm(ctx, v457, v650);
                                    let v653 = constructor_lshl_imm(ctx, v639, v330, v651);
                                    let v654 = constructor_lshr_imm(ctx, v639, v330, v652);
                                    let v655 = constructor_or_reg(ctx, v457, v653, v654);
                                    let v656 = constructor_output_reg(ctx, v655);
                                    let v657 = Some(v656);
                                    // Rule at src/isa/s390x/lower.isle line 790.
                                    return v657;
                                }
                            }
                            let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v639 = constructor_ty_ext32(ctx, v457);
                            let v640 = constructor_amt_reg(ctx, v42.1);
                            let v641 = constructor_neg_reg(ctx, I32, v640);
                            let v642 = constructor_mask_amt_reg(ctx, v457, v640);
                            let v643 = constructor_mask_amt_reg(ctx, v457, v641);
                            let v644 = constructor_lshl_reg(ctx, v639, v330, v642);
                            let v645 = constructor_lshr_reg(ctx, v639, v330, v643);
                            let v646 = constructor_or_reg(ctx, v457, v644, v645);
                            let v647 = constructor_output_reg(ctx, v646);
                            let v648 = Some(v647);
                            // Rule at src/isa/s390x/lower.isle line 778.
                            return v648;
                        }
                        let v630 = C::ty_32_or_64(ctx, v3);
                        if let Some(v631) = v630 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v635 = C::mask_amt_imm(ctx, v631, v578);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v636 = constructor_rot_imm(ctx, v631, v46, v635);
                                let v637 = constructor_output_reg(ctx, v636);
                                let v638 = Some(v637);
                                // Rule at src/isa/s390x/lower.isle line 772.
                                return v638;
                            }
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v632 = constructor_rot_reg(ctx, v631, v67, v583);
                            let v633 = constructor_output_reg(ctx, v632);
                            let v634 = Some(v633);
                            // Rule at src/isa/s390x/lower.isle line 768.
                            return v634;
                        }
                    }
                }
                &Opcode::Rotr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v664 = constructor_amt_vr(ctx, v42.1);
                            let v665 = constructor_vec_neg(ctx, I8X16, v664);
                            let v698 = constructor_vec_lshl_by_byte(ctx, v67, v665);
                            let v699 = constructor_vec_lshl_by_bit(ctx, v698, v665);
                            let v700 = constructor_vec_lshr_by_byte(ctx, v67, v664);
                            let v701 = constructor_vec_lshr_by_bit(ctx, v700, v664);
                            let v702 = constructor_vec_or(ctx, I128, v699, v701);
                            let v703 = constructor_output_reg(ctx, v702);
                            let v704 = Some(v703);
                            // Rule at src/isa/s390x/lower.isle line 870.
                            return v704;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v649 = C::i64_from_negated_value(ctx, v42.1);
                            if let Some(v650) = v649 {
                                let v694 = C::mask_amt_imm(ctx, v170, v650);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v695 = constructor_vec_rot_imm(ctx, v170, v46, v694);
                                let v696 = constructor_output_reg(ctx, v695);
                                let v697 = Some(v696);
                                // Rule at src/isa/s390x/lower.isle line 864.
                                return v697;
                            }
                            let v572 = constructor_amt_reg(ctx, v42.1);
                            let v673 = constructor_neg_reg(ctx, I32, v572);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v691 = constructor_vec_rot_reg(ctx, v170, v179, v673);
                            let v692 = constructor_output_reg(ctx, v691);
                            let v693 = Some(v692);
                            // Rule at src/isa/s390x/lower.isle line 858.
                            return v693;
                        }
                        let v456 = C::ty_8_or_16(ctx, v3);
                        if let Some(v457) = v456 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v649 = C::i64_from_negated_value(ctx, v42.1);
                                if let Some(v650) = v649 {
                                    let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                                    let v639 = constructor_ty_ext32(ctx, v457);
                                    let v651 = C::mask_amt_imm(ctx, v457, v578);
                                    let v652 = C::mask_amt_imm(ctx, v457, v650);
                                    let v686 = constructor_lshl_imm(ctx, v639, v330, v652);
                                    let v687 = constructor_lshr_imm(ctx, v639, v330, v651);
                                    let v688 = constructor_or_reg(ctx, v457, v686, v687);
                                    let v689 = constructor_output_reg(ctx, v688);
                                    let v690 = Some(v689);
                                    // Rule at src/isa/s390x/lower.isle line 847.
                                    return v690;
                                }
                            }
                            let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v639 = constructor_ty_ext32(ctx, v457);
                            let v640 = constructor_amt_reg(ctx, v42.1);
                            let v641 = constructor_neg_reg(ctx, I32, v640);
                            let v642 = constructor_mask_amt_reg(ctx, v457, v640);
                            let v643 = constructor_mask_amt_reg(ctx, v457, v641);
                            let v681 = constructor_lshl_reg(ctx, v639, v330, v643);
                            let v682 = constructor_lshr_reg(ctx, v639, v330, v642);
                            let v683 = constructor_or_reg(ctx, v457, v681, v682);
                            let v684 = constructor_output_reg(ctx, v683);
                            let v685 = Some(v684);
                            // Rule at src/isa/s390x/lower.isle line 835.
                            return v685;
                        }
                        let v630 = C::ty_32_or_64(ctx, v3);
                        if let Some(v631) = v630 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v649 = C::i64_from_negated_value(ctx, v42.1);
                            if let Some(v650) = v649 {
                                let v677 = C::mask_amt_imm(ctx, v631, v650);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v678 = constructor_rot_imm(ctx, v631, v46, v677);
                                let v679 = constructor_output_reg(ctx, v678);
                                let v680 = Some(v679);
                                // Rule at src/isa/s390x/lower.isle line 829.
                                return v680;
                            }
                            let v572 = constructor_amt_reg(ctx, v42.1);
                            let v673 = constructor_neg_reg(ctx, I32, v572);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v674 = constructor_rot_reg(ctx, v631, v179, v673);
                            let v675 = constructor_output_reg(ctx, v674);
                            let v676 = Some(v675);
                            // Rule at src/isa/s390x/lower.isle line 823.
                            return v676;
                        }
                    }
                }
                &Opcode::Ishl => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v591 = constructor_amt_vr(ctx, v42.1);
                            let v46 = C::put_in_reg(ctx, v42.0);
                            let v592 = constructor_vec_lshl_by_byte(ctx, v46, v591);
                            let v593 = constructor_vec_lshl_by_bit(ctx, v592, v591);
                            let v594 = constructor_output_reg(ctx, v593);
                            let v595 = Some(v594);
                            // Rule at src/isa/s390x/lower.isle line 698.
                            return v595;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v587 = C::mask_amt_imm(ctx, v170, v578);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v588 = constructor_vec_lshl_imm(ctx, v170, v46, v587);
                                let v589 = constructor_output_reg(ctx, v588);
                                let v590 = Some(v589);
                                // Rule at src/isa/s390x/lower.isle line 693.
                                return v590;
                            }
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v584 = constructor_vec_lshl_reg(ctx, v170, v67, v583);
                            let v585 = constructor_output_reg(ctx, v584);
                            let v586 = Some(v585);
                            // Rule at src/isa/s390x/lower.isle line 689.
                            return v586;
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v579 = C::mask_amt_imm(ctx, v66, v578);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v580 = constructor_lshl_imm(ctx, v66, v46, v579);
                                let v581 = constructor_output_reg(ctx, v580);
                                let v582 = Some(v581);
                                // Rule at src/isa/s390x/lower.isle line 684.
                                return v582;
                            }
                            let v572 = constructor_amt_reg(ctx, v42.1);
                            let v573 = constructor_mask_amt_reg(ctx, v66, v572);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v574 = constructor_lshl_reg(ctx, v66, v179, v573);
                            let v575 = constructor_output_reg(ctx, v574);
                            let v576 = Some(v575);
                            // Rule at src/isa/s390x/lower.isle line 679.
                            return v576;
                        }
                    }
                }
                &Opcode::Ushr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v591 = constructor_amt_vr(ctx, v42.1);
                            let v46 = C::put_in_reg(ctx, v42.0);
                            let v610 = constructor_vec_lshr_by_byte(ctx, v46, v591);
                            let v611 = constructor_vec_lshr_by_bit(ctx, v610, v591);
                            let v612 = constructor_output_reg(ctx, v611);
                            let v613 = Some(v612);
                            // Rule at src/isa/s390x/lower.isle line 729.
                            return v613;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v587 = C::mask_amt_imm(ctx, v170, v578);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v607 = constructor_vec_lshr_imm(ctx, v170, v46, v587);
                                let v608 = constructor_output_reg(ctx, v607);
                                let v609 = Some(v608);
                                // Rule at src/isa/s390x/lower.isle line 724.
                                return v609;
                            }
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v604 = constructor_vec_lshr_reg(ctx, v170, v67, v583);
                            let v605 = constructor_output_reg(ctx, v604);
                            let v606 = Some(v605);
                            // Rule at src/isa/s390x/lower.isle line 720.
                            return v606;
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                                let v600 = C::mask_amt_imm(ctx, v66, v578);
                                let v332 = constructor_ty_ext32(ctx, v66);
                                let v601 = constructor_lshr_imm(ctx, v332, v330, v600);
                                let v602 = constructor_output_reg(ctx, v601);
                                let v603 = Some(v602);
                                // Rule at src/isa/s390x/lower.isle line 714.
                                return v603;
                            }
                            let v330 = constructor_put_in_reg_zext32(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v596 = constructor_mask_amt_reg(ctx, v66, v583);
                            let v561 = constructor_ty_ext32(ctx, v66);
                            let v597 = constructor_lshr_reg(ctx, v561, v330, v596);
                            let v598 = constructor_output_reg(ctx, v597);
                            let v599 = Some(v598);
                            // Rule at src/isa/s390x/lower.isle line 707.
                            return v599;
                        }
                    }
                }
                &Opcode::Sshr => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I128 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v591 = constructor_amt_vr(ctx, v42.1);
                            let v46 = C::put_in_reg(ctx, v42.0);
                            let v626 = constructor_vec_ashr_by_byte(ctx, v46, v591);
                            let v627 = constructor_vec_ashr_by_bit(ctx, v626, v591);
                            let v628 = constructor_output_reg(ctx, v627);
                            let v629 = Some(v628);
                            // Rule at src/isa/s390x/lower.isle line 760.
                            return v629;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v587 = C::mask_amt_imm(ctx, v170, v578);
                                let v46 = C::put_in_reg(ctx, v42.0);
                                let v623 = constructor_vec_ashr_imm(ctx, v170, v46, v587);
                                let v624 = constructor_output_reg(ctx, v623);
                                let v625 = Some(v624);
                                // Rule at src/isa/s390x/lower.isle line 755.
                                return v625;
                            }
                            let v67 = C::put_in_reg(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v620 = constructor_vec_ashr_reg(ctx, v170, v67, v583);
                            let v621 = constructor_output_reg(ctx, v620);
                            let v622 = Some(v621);
                            // Rule at src/isa/s390x/lower.isle line 751.
                            return v622;
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v577 = C::i64_from_value(ctx, v42.1);
                            if let Some(v578) = v577 {
                                let v360 = constructor_put_in_reg_sext32(ctx, v42.0);
                                let v600 = C::mask_amt_imm(ctx, v66, v578);
                                let v332 = constructor_ty_ext32(ctx, v66);
                                let v617 = constructor_ashr_imm(ctx, v332, v360, v600);
                                let v618 = constructor_output_reg(ctx, v617);
                                let v619 = Some(v618);
                                // Rule at src/isa/s390x/lower.isle line 745.
                                return v619;
                            }
                            let v360 = constructor_put_in_reg_sext32(ctx, v42.0);
                            let v583 = constructor_amt_reg(ctx, v42.1);
                            let v596 = constructor_mask_amt_reg(ctx, v66, v583);
                            let v561 = constructor_ty_ext32(ctx, v66);
                            let v614 = constructor_ashr_reg(ctx, v561, v360, v596);
                            let v615 = constructor_output_reg(ctx, v614);
                            let v616 = Some(v615);
                            // Rule at src/isa/s390x/lower.isle line 738.
                            return v616;
                        }
                    }
                }
                &Opcode::Fadd => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1096 = constructor_fadd_reg(ctx, v3, v67, v68);
                        let v1097 = constructor_output_reg(ctx, v1096);
                        let v1098 = Some(v1097);
                        // Rule at src/isa/s390x/lower.isle line 1362.
                        return v1098;
                    }
                }
                &Opcode::Fsub => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1099 = constructor_fsub_reg(ctx, v3, v67, v68);
                        let v1100 = constructor_output_reg(ctx, v1099);
                        let v1101 = Some(v1100);
                        // Rule at src/isa/s390x/lower.isle line 1369.
                        return v1101;
                    }
                }
                &Opcode::Fmul => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1102 = constructor_fmul_reg(ctx, v3, v67, v68);
                        let v1103 = constructor_output_reg(ctx, v1102);
                        let v1104 = Some(v1103);
                        // Rule at src/isa/s390x/lower.isle line 1376.
                        return v1104;
                    }
                }
                &Opcode::Fdiv => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1105 = constructor_fdiv_reg(ctx, v3, v67, v68);
                        let v1106 = constructor_output_reg(ctx, v1105);
                        let v1107 = Some(v1106);
                        // Rule at src/isa/s390x/lower.isle line 1383.
                        return v1107;
                    }
                }
                &Opcode::Fcopysign => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v1115 = constructor_imm(ctx, F32, 0x7FFFFFFF);
                                let v1116 = constructor_vec_select(ctx, F32, v67, v68, v1115);
                                let v1117 = constructor_output_reg(ctx, v1116);
                                let v1118 = Some(v1117);
                                // Rule at src/isa/s390x/lower.isle line 1404.
                                return v1118;
                            }
                            F64 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v1120 = constructor_imm(ctx, F64, 0x7FFFFFFFFFFFFFFF);
                                let v1121 = constructor_vec_select(ctx, F64, v67, v68, v1120);
                                let v1122 = constructor_output_reg(ctx, v1121);
                                let v1123 = Some(v1122);
                                // Rule at src/isa/s390x/lower.isle line 1406.
                                return v1123;
                            }
                            F32X4 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v1126 = constructor_vec_imm_bit_mask(ctx, F32X4, 0x1, 0x1F);
                                let v1127 = constructor_vec_select(ctx, F32X4, v67, v68, v1126);
                                let v1128 = constructor_output_reg(ctx, v1127);
                                let v1129 = Some(v1128);
                                // Rule at src/isa/s390x/lower.isle line 1408.
                                return v1129;
                            }
                            F64X2 => {
                                let v42 = C::unpack_value_array_2(ctx, v41);
                                let v67 = C::put_in_reg(ctx, v42.0);
                                let v68 = C::put_in_reg(ctx, v42.1);
                                let v1131 = constructor_vec_imm_bit_mask(ctx, F64X2, 0x1, 0x3F);
                                let v1132 = constructor_vec_select(ctx, F64X2, v67, v68, v1131);
                                let v1133 = constructor_output_reg(ctx, v1132);
                                let v1134 = Some(v1133);
                                // Rule at src/isa/s390x/lower.isle line 1410.
                                return v1134;
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Fmin => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1108 = constructor_fmin_reg(ctx, v3, v67, v68);
                        let v1109 = constructor_output_reg(ctx, v1108);
                        let v1110 = Some(v1109);
                        // Rule at src/isa/s390x/lower.isle line 1390.
                        return v1110;
                    }
                }
                &Opcode::Fmax => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v3 = C::value_type(ctx, v2);
                        let v1111 = constructor_fmax_reg(ctx, v3, v67, v68);
                        let v1112 = constructor_output_reg(ctx, v1111);
                        let v1113 = Some(v1112);
                        // Rule at src/isa/s390x/lower.isle line 1397.
                        return v1113;
                    }
                }
                &Opcode::Snarrow => {
                    let v42 = C::unpack_value_array_2(ctx, v41);
                    let v128 = C::value_type(ctx, v42.0);
                    let v751 = C::ty_vec128(ctx, v128);
                    if let Some(v752) = v751 {
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v753 = constructor_vec_pack_ssat_lane_order(ctx, v752, v67, v68);
                        let v754 = constructor_output_reg(ctx, v753);
                        let v755 = Some(v754);
                        // Rule at src/isa/s390x/lower.isle line 929.
                        return v755;
                    }
                }
                &Opcode::Unarrow => {
                    let v42 = C::unpack_value_array_2(ctx, v41);
                    let v128 = C::value_type(ctx, v42.0);
                    let v751 = C::ty_vec128(ctx, v128);
                    if let Some(v752) = v751 {
                        let v759 = constructor_vec_imm(ctx, v752, 0x0);
                        let v46 = C::put_in_reg(ctx, v42.0);
                        let v760 = constructor_vec_smax(ctx, v752, v46, v759);
                        let v488 = C::put_in_reg(ctx, v42.1);
                        let v761 = constructor_vec_smax(ctx, v752, v488, v759);
                        let v762 = constructor_vec_pack_usat_lane_order(ctx, v752, v760, v761);
                        let v763 = constructor_output_reg(ctx, v762);
                        let v764 = Some(v763);
                        // Rule at src/isa/s390x/lower.isle line 941.
                        return v764;
                    }
                }
                &Opcode::Uunarrow => {
                    let v42 = C::unpack_value_array_2(ctx, v41);
                    let v128 = C::value_type(ctx, v42.0);
                    let v751 = C::ty_vec128(ctx, v128);
                    if let Some(v752) = v751 {
                        let v67 = C::put_in_reg(ctx, v42.0);
                        let v68 = C::put_in_reg(ctx, v42.1);
                        let v756 = constructor_vec_pack_usat_lane_order(ctx, v752, v67, v68);
                        let v757 = constructor_output_reg(ctx, v756);
                        let v758 = Some(v757);
                        // Rule at src/isa/s390x/lower.isle line 935.
                        return v758;
                    }
                }
                &Opcode::IaddPairwise => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v42 = C::unpack_value_array_2(ctx, v41);
                        let v72 = C::def_inst(ctx, v42.1);
                        if let Some(v73) = v72 {
                            let v74 = &C::inst_data(ctx, v73);
                            if let &InstructionData::Binary {
                                opcode: ref v226,
                                args: ref v227,
                            } = v74
                            {
                                if let &Opcode::Imul = v226 {
                                    let v82 = C::def_inst(ctx, v42.0);
                                    if let Some(v83) = v82 {
                                        let v84 = &C::inst_data(ctx, v83);
                                        if let &InstructionData::Binary {
                                            opcode: ref v210,
                                            args: ref v211,
                                        } = v84
                                        {
                                            if let &Opcode::Imul = v210 {
                                                let v212 = C::unpack_value_array_2(ctx, v211);
                                                let v215 = C::def_inst(ctx, v212.0);
                                                if let Some(v216) = v215 {
                                                    let v217 = &C::inst_data(ctx, v216);
                                                    if let &InstructionData::Unary {
                                                        opcode: ref v218,
                                                        arg: v219,
                                                    } = v217
                                                    {
                                                        if let &Opcode::SwidenLow = v218 {
                                                            let v221 = C::def_inst(ctx, v212.1);
                                                            if let Some(v222) = v221 {
                                                                let v223 = &C::inst_data(ctx, v222);
                                                                if let &InstructionData::Unary {
                                                                    opcode: ref v224,
                                                                    arg: v225,
                                                                } = v223
                                                                {
                                                                    if let &Opcode::SwidenLow = v224
                                                                    {
                                                                        let v228 =
                                                                            C::unpack_value_array_2(
                                                                                ctx, v227,
                                                                            );
                                                                        let v231 = C::def_inst(
                                                                            ctx, v228.0,
                                                                        );
                                                                        if let Some(v232) = v231 {
                                                                            let v233 =
                                                                                &C::inst_data(
                                                                                    ctx, v232,
                                                                                );
                                                                            if let &InstructionData::Unary {
                                                                                opcode: ref v234,
                                                                                arg: v235,
                                                                            } = v233 {
                                                                                if let &Opcode::SwidenHigh = v234 {
                                                                                    if v219 == v235 {
                                                                                        let v236 = C::def_inst(ctx, v228.1);
                                                                                        if let Some(v237) = v236 {
                                                                                            let v238 = &C::inst_data(ctx, v237);
                                                                                            if let &InstructionData::Unary {
                                                                                                opcode: ref v239,
                                                                                                arg: v240,
                                                                                            } = v238 {
                                                                                                if let &Opcode::SwidenHigh = v239 {
                                                                                                    if v225 == v240 {
                                                                                                        let v241 = C::put_in_reg(ctx, v219);
                                                                                                        let v242 = C::put_in_reg(ctx, v225);
                                                                                                        let v220 = C::value_type(ctx, v219);
                                                                                                        let v243 = constructor_vec_smul_even(ctx, v220, v241, v242);
                                                                                                        let v244 = C::put_in_reg(ctx, v219);
                                                                                                        let v245 = C::put_in_reg(ctx, v225);
                                                                                                        let v246 = constructor_vec_smul_odd(ctx, v220, v244, v245);
                                                                                                        let v3 = C::value_type(ctx, v2);
                                                                                                        let v247 = constructor_vec_add(ctx, v3, v243, v246);
                                                                                                        let v248 = constructor_output_reg(ctx, v247);
                                                                                                        let v249 = Some(v248);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 135.
                                                                                                        return v249;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v193 = C::multi_lane(ctx, v3);
                        if let Some(v194) = v193 {
                            let v198 = C::u32_as_u64(ctx, v194.0);
                            let v199 = constructor_vec_imm_splat(ctx, I8X16, v198);
                            let v200 = constructor_vec_widen_type(ctx, v3);
                            let v179 = C::put_in_reg(ctx, v42.0);
                            let v172 = C::put_in_reg(ctx, v42.0);
                            let v201 = constructor_vec_lshr_by_byte(ctx, v172, v199);
                            let v202 = constructor_vec_add(ctx, v3, v179, v201);
                            let v203 = C::put_in_reg(ctx, v42.1);
                            let v204 = C::put_in_reg(ctx, v42.1);
                            let v205 = constructor_vec_lshr_by_byte(ctx, v204, v199);
                            let v206 = constructor_vec_add(ctx, v3, v203, v205);
                            let v207 = constructor_vec_pack_lane_order(ctx, v200, v202, v206);
                            let v208 = constructor_output_reg(ctx, v207);
                            let v209 = Some(v208);
                            // Rule at src/isa/s390x/lower.isle line 128.
                            return v209;
                        }
                    }
                }
                &Opcode::Iconcat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v42 = C::unpack_value_array_2(ctx, v41);
                            let v45 = C::put_in_reg(ctx, v42.1);
                            let v46 = C::put_in_reg(ctx, v42.0);
                            let v47 = constructor_mov_to_vec128(ctx, v39, v45, v46);
                            let v48 = constructor_output_reg(ctx, v47);
                            let v49 = Some(v48);
                            // Rule at src/isa/s390x/lower.isle line 44.
                            return v49;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::BinaryImm8 {
            opcode: ref v1432,
            arg: v1433,
            imm: v1434,
        } => {
            if let &Opcode::Extractlane = v1432 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1437 = C::ty_int_ref_scalar_64(ctx, v3);
                    if let Some(v1438) = v1437 {
                        let v1439 = C::put_in_reg(ctx, v1433);
                        let v1435 = C::value_type(ctx, v1433);
                        let v1436 = C::u8_from_uimm8(ctx, v1434);
                        let v1440 = C::be_lane_idx(ctx, v1435, v1436);
                        let v725 = C::zero_reg(ctx);
                        let v1441 = constructor_vec_extract_lane(ctx, v1435, v1439, v1440, v725);
                        let v1442 = constructor_output_reg(ctx, v1441);
                        let v1443 = Some(v1442);
                        // Rule at src/isa/s390x/lower.isle line 1882.
                        return v1443;
                    }
                    let v1358 = C::ty_scalar_float(ctx, v3);
                    if let Some(v1359) = v1358 {
                        let v1439 = C::put_in_reg(ctx, v1433);
                        let v1435 = C::value_type(ctx, v1433);
                        let v1436 = C::u8_from_uimm8(ctx, v1434);
                        let v1440 = C::be_lane_idx(ctx, v1435, v1436);
                        let v1444 = constructor_vec_replicate_lane(ctx, v1435, v1439, v1440);
                        let v1445 = constructor_output_reg(ctx, v1444);
                        let v1446 = Some(v1445);
                        // Rule at src/isa/s390x/lower.isle line 1888.
                        return v1446;
                    }
                }
            }
        }
        &InstructionData::Call {
            opcode: ref v2511,
            args: v2512,
            func_ref: v2513,
        } => {
            match v2511 {
                &Opcode::Call => {
                    let v2515 = C::func_ref_data(ctx, v2513);
                    let v2519 = C::reloc_distance_near(ctx, v2515.2);
                    if let Some(v2520) = v2519 {
                        let v2521 = C::abi_sig(ctx, v2515.0);
                        let v2523 = C::abi_num_args(ctx, v2521);
                        let v2524 = C::range(ctx, 0x0, v2523);
                        let v2514 = C::value_list_slice(ctx, v2512);
                        let v2525 = &constructor_lower_call_args(ctx, v2521, v2524, v2514);
                        let v2526 = &C::defs_init(ctx, v2521);
                        let v2527 = &constructor_abi_call(ctx, v2521, v2515.1, v2525, v2526);
                        let v2528 = constructor_side_effect(ctx, v2527);
                        let v2529 = C::abi_first_ret(ctx, v2515.0, v2521);
                        let v2530 = C::abi_num_rets(ctx, v2521);
                        let v2532 = &C::output_builder_new(ctx);
                        let v2531 = C::range(ctx, v2529, v2530);
                        let v2533 = constructor_lower_call_rets(ctx, v2521, v2526, v2531, v2532);
                        let v2534 = Some(v2533);
                        // Rule at src/isa/s390x/lower.isle line 3864.
                        return v2534;
                    }
                    let v2521 = C::abi_sig(ctx, v2515.0);
                    let v2523 = C::abi_num_args(ctx, v2521);
                    let v2524 = C::range(ctx, 0x0, v2523);
                    let v2514 = C::value_list_slice(ctx, v2512);
                    let v2525 = &constructor_lower_call_args(ctx, v2521, v2524, v2514);
                    let v2526 = &C::defs_init(ctx, v2521);
                    let v2535 = SymbolReloc::Absolute {
                        name: v2515.1,
                        offset: 0x0,
                    };
                    let v2536 = constructor_load_symbol_reloc(ctx, &v2535);
                    let v2537 = &constructor_abi_call_ind(ctx, v2521, v2536, v2525, v2526);
                    let v2538 = constructor_side_effect(ctx, v2537);
                    let v2539 = C::abi_first_ret(ctx, v2515.0, v2521);
                    let v2540 = C::abi_num_rets(ctx, v2521);
                    let v2542 = &C::output_builder_new(ctx);
                    let v2541 = C::range(ctx, v2539, v2540);
                    let v2543 = constructor_lower_call_rets(ctx, v2521, v2526, v2541, v2542);
                    let v2544 = Some(v2543);
                    // Rule at src/isa/s390x/lower.isle line 3873.
                    return v2544;
                }
                &Opcode::ReturnCall => {
                    let v2515 = C::func_ref_data(ctx, v2513);
                    let v2519 = C::reloc_distance_near(ctx, v2515.2);
                    if let Some(v2520) = v2519 {
                        let v2521 = C::abi_sig(ctx, v2515.0);
                        let v2523 = C::abi_num_args(ctx, v2521);
                        let v2524 = C::range(ctx, 0x0, v2523);
                        let v2514 = C::value_list_slice(ctx, v2512);
                        let v2566 = &constructor_lower_return_call_args(ctx, v2521, v2524, v2514);
                        let v2567 = &constructor_abi_return_call(ctx, v2521, v2515.1, v2566);
                        let v2568 = constructor_side_effect(ctx, v2567);
                        let v2569 = Some(v2568);
                        // Rule at src/isa/s390x/lower.isle line 3916.
                        return v2569;
                    }
                    let v2521 = C::abi_sig(ctx, v2515.0);
                    let v2523 = C::abi_num_args(ctx, v2521);
                    let v2524 = C::range(ctx, 0x0, v2523);
                    let v2514 = C::value_list_slice(ctx, v2512);
                    let v2566 = &constructor_lower_return_call_args(ctx, v2521, v2524, v2514);
                    let v2535 = SymbolReloc::Absolute {
                        name: v2515.1,
                        offset: 0x0,
                    };
                    let v2570 = constructor_load_symbol_reloc(ctx, &v2535);
                    let v2571 = &constructor_abi_return_call_ind(ctx, v2521, v2570, v2566);
                    let v2572 = constructor_side_effect(ctx, v2571);
                    let v2573 = Some(v2572);
                    // Rule at src/isa/s390x/lower.isle line 3922.
                    return v2573;
                }
                _ => {}
            }
        }
        &InstructionData::CallIndirect {
            opcode: ref v2545,
            args: v2546,
            sig_ref: v2547,
        } => {
            match v2545 {
                &Opcode::CallIndirect => {
                    let v2548 = C::value_list_slice(ctx, v2546);
                    let v2549 = C::value_slice_unwrap(ctx, v2548);
                    if let Some(v2550) = v2549 {
                        let v2553 = C::abi_sig(ctx, v2547);
                        let v2554 = C::put_in_reg(ctx, v2550.0);
                        let v2555 = C::abi_num_args(ctx, v2553);
                        let v2556 = C::range(ctx, 0x0, v2555);
                        let v2557 = &constructor_lower_call_args(ctx, v2553, v2556, v2550.1);
                        let v2558 = &C::defs_init(ctx, v2553);
                        let v2559 = &constructor_abi_call_ind(ctx, v2553, v2554, v2557, v2558);
                        let v2560 = constructor_side_effect(ctx, v2559);
                        let v2561 = C::abi_first_ret(ctx, v2547, v2553);
                        let v2562 = C::abi_num_rets(ctx, v2553);
                        let v2542 = &C::output_builder_new(ctx);
                        let v2563 = C::range(ctx, v2561, v2562);
                        let v2564 = constructor_lower_call_rets(ctx, v2553, v2558, v2563, v2542);
                        let v2565 = Some(v2564);
                        // Rule at src/isa/s390x/lower.isle line 3883.
                        return v2565;
                    }
                }
                &Opcode::ReturnCallIndirect => {
                    let v2548 = C::value_list_slice(ctx, v2546);
                    let v2549 = C::value_slice_unwrap(ctx, v2548);
                    if let Some(v2550) = v2549 {
                        let v2553 = C::abi_sig(ctx, v2547);
                        let v2554 = C::put_in_reg(ctx, v2550.0);
                        let v2555 = C::abi_num_args(ctx, v2553);
                        let v2556 = C::range(ctx, 0x0, v2555);
                        let v2574 = &constructor_lower_return_call_args(ctx, v2553, v2556, v2550.1);
                        let v2575 = &constructor_abi_return_call_ind(ctx, v2553, v2554, v2574);
                        let v2576 = constructor_side_effect(ctx, v2575);
                        let v2577 = Some(v2576);
                        // Rule at src/isa/s390x/lower.isle line 3929.
                        return v2577;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::CondTrap {
            opcode: ref v2397,
            arg: v2398,
            code: ref v2399,
        } => {
            match v2397 {
                &Opcode::Trapz => {
                    let v2400 = &constructor_value_nonzero(ctx, v2398);
                    let v2401 = &constructor_invert_bool(ctx, v2400);
                    let v2402 = &constructor_trap_if_bool(ctx, v2401, v2399);
                    let v2403 = constructor_side_effect(ctx, v2402);
                    let v2404 = Some(v2403);
                    // Rule at src/isa/s390x/lower.isle line 3771.
                    return v2404;
                }
                &Opcode::Trapnz => {
                    let v2400 = &constructor_value_nonzero(ctx, v2398);
                    let v2405 = &constructor_trap_if_bool(ctx, v2400, v2399);
                    let v2406 = constructor_side_effect(ctx, v2405);
                    let v2407 = Some(v2406);
                    // Rule at src/isa/s390x/lower.isle line 3777.
                    return v2407;
                }
                _ => {}
            }
        }
        &InstructionData::FloatCompare {
            opcode: ref v2235,
            args: ref v2236,
            cond: ref v2237,
        } => {
            if let &Opcode::Fcmp = v2235 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v2237 {
                        &FloatCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2247 = constructor_vec_fcmpeq(ctx, v170, v2245, v2246);
                                let v2248 = constructor_output_reg(ctx, v2247);
                                let v2249 = Some(v2248);
                                // Rule at src/isa/s390x/lower.isle line 3440.
                                return v2249;
                            }
                        }
                        &FloatCC::GreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2253 = constructor_vec_fcmph(ctx, v170, v2245, v2246);
                                let v2254 = constructor_output_reg(ctx, v2253);
                                let v2255 = Some(v2254);
                                // Rule at src/isa/s390x/lower.isle line 3444.
                                return v2255;
                            }
                        }
                        &FloatCC::GreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2259 = constructor_vec_fcmphe(ctx, v170, v2245, v2246);
                                let v2260 = constructor_output_reg(ctx, v2259);
                                let v2261 = Some(v2260);
                                // Rule at src/isa/s390x/lower.isle line 3448.
                                return v2261;
                            }
                        }
                        &FloatCC::LessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2265 = C::put_in_reg(ctx, v2238.1);
                                let v2266 = C::put_in_reg(ctx, v2238.0);
                                let v2267 = constructor_vec_fcmph(ctx, v170, v2265, v2266);
                                let v2268 = constructor_output_reg(ctx, v2267);
                                let v2269 = Some(v2268);
                                // Rule at src/isa/s390x/lower.isle line 3452.
                                return v2269;
                            }
                        }
                        &FloatCC::LessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2265 = C::put_in_reg(ctx, v2238.1);
                                let v2266 = C::put_in_reg(ctx, v2238.0);
                                let v2273 = constructor_vec_fcmphe(ctx, v170, v2265, v2266);
                                let v2274 = constructor_output_reg(ctx, v2273);
                                let v2275 = Some(v2274);
                                // Rule at src/isa/s390x/lower.isle line 3456.
                                return v2275;
                            }
                        }
                        &FloatCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2247 = constructor_vec_fcmpeq(ctx, v170, v2245, v2246);
                                let v2250 = constructor_vec_not(ctx, v170, v2247);
                                let v2251 = constructor_output_reg(ctx, v2250);
                                let v2252 = Some(v2251);
                                // Rule at src/isa/s390x/lower.isle line 3442.
                                return v2252;
                            }
                        }
                        &FloatCC::Ordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2259 = constructor_vec_fcmphe(ctx, v170, v2245, v2246);
                                let v2279 = C::put_in_reg(ctx, v2238.1);
                                let v2280 = C::put_in_reg(ctx, v2238.0);
                                let v2281 = constructor_vec_fcmphe(ctx, v170, v2279, v2280);
                                let v2282 = constructor_vec_or(ctx, v170, v2259, v2281);
                                let v2283 = constructor_output_reg(ctx, v2282);
                                let v2284 = Some(v2283);
                                // Rule at src/isa/s390x/lower.isle line 3460.
                                return v2284;
                            }
                        }
                        &FloatCC::OrderedNotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2253 = constructor_vec_fcmph(ctx, v170, v2245, v2246);
                                let v2279 = C::put_in_reg(ctx, v2238.1);
                                let v2280 = C::put_in_reg(ctx, v2238.0);
                                let v2288 = constructor_vec_fcmph(ctx, v170, v2279, v2280);
                                let v2289 = constructor_vec_or(ctx, v170, v2253, v2288);
                                let v2290 = constructor_output_reg(ctx, v2289);
                                let v2291 = Some(v2290);
                                // Rule at src/isa/s390x/lower.isle line 3464.
                                return v2291;
                            }
                        }
                        &FloatCC::Unordered => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2259 = constructor_vec_fcmphe(ctx, v170, v2245, v2246);
                                let v2279 = C::put_in_reg(ctx, v2238.1);
                                let v2280 = C::put_in_reg(ctx, v2238.0);
                                let v2281 = constructor_vec_fcmphe(ctx, v170, v2279, v2280);
                                let v2285 = constructor_vec_not_or(ctx, v170, v2259, v2281);
                                let v2286 = constructor_output_reg(ctx, v2285);
                                let v2287 = Some(v2286);
                                // Rule at src/isa/s390x/lower.isle line 3462.
                                return v2287;
                            }
                        }
                        &FloatCC::UnorderedOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2253 = constructor_vec_fcmph(ctx, v170, v2245, v2246);
                                let v2279 = C::put_in_reg(ctx, v2238.1);
                                let v2280 = C::put_in_reg(ctx, v2238.0);
                                let v2288 = constructor_vec_fcmph(ctx, v170, v2279, v2280);
                                let v2292 = constructor_vec_not_or(ctx, v170, v2253, v2288);
                                let v2293 = constructor_output_reg(ctx, v2292);
                                let v2294 = Some(v2293);
                                // Rule at src/isa/s390x/lower.isle line 3466.
                                return v2294;
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2265 = C::put_in_reg(ctx, v2238.1);
                                let v2266 = C::put_in_reg(ctx, v2238.0);
                                let v2273 = constructor_vec_fcmphe(ctx, v170, v2265, v2266);
                                let v2276 = constructor_vec_not(ctx, v170, v2273);
                                let v2277 = constructor_output_reg(ctx, v2276);
                                let v2278 = Some(v2277);
                                // Rule at src/isa/s390x/lower.isle line 3458.
                                return v2278;
                            }
                        }
                        &FloatCC::UnorderedOrGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2265 = C::put_in_reg(ctx, v2238.1);
                                let v2266 = C::put_in_reg(ctx, v2238.0);
                                let v2267 = constructor_vec_fcmph(ctx, v170, v2265, v2266);
                                let v2270 = constructor_vec_not(ctx, v170, v2267);
                                let v2271 = constructor_output_reg(ctx, v2270);
                                let v2272 = Some(v2271);
                                // Rule at src/isa/s390x/lower.isle line 3454.
                                return v2272;
                            }
                        }
                        &FloatCC::UnorderedOrLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2259 = constructor_vec_fcmphe(ctx, v170, v2245, v2246);
                                let v2262 = constructor_vec_not(ctx, v170, v2259);
                                let v2263 = constructor_output_reg(ctx, v2262);
                                let v2264 = Some(v2263);
                                // Rule at src/isa/s390x/lower.isle line 3450.
                                return v2264;
                            }
                        }
                        &FloatCC::UnorderedOrLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2238 = C::unpack_value_array_2(ctx, v2236);
                                let v2245 = C::put_in_reg(ctx, v2238.0);
                                let v2246 = C::put_in_reg(ctx, v2238.1);
                                let v2253 = constructor_vec_fcmph(ctx, v170, v2245, v2246);
                                let v2256 = constructor_vec_not(ctx, v170, v2253);
                                let v2257 = constructor_output_reg(ctx, v2256);
                                let v2258 = Some(v2257);
                                // Rule at src/isa/s390x/lower.isle line 3446.
                                return v2258;
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v65 = C::fits_in_64(ctx, v3);
                    if let Some(v66) = v65 {
                        let v2238 = C::unpack_value_array_2(ctx, v2236);
                        let v2241 = &constructor_fcmp_val(ctx, v2237, v2238.0, v2238.1);
                        let v2242 = constructor_lower_bool(ctx, v66, v2241);
                        let v2243 = constructor_output_reg(ctx, v2242);
                        let v2244 = Some(v2243);
                        // Rule at src/isa/s390x/lower.isle line 3428.
                        return v2244;
                    }
                }
            }
        }
        &InstructionData::FuncAddr {
            opcode: ref v1828,
            func_ref: v1829,
        } => {
            if let &Opcode::FuncAddr = v1828 {
                let v1830 = C::func_ref_data(ctx, v1829);
                let v1834 = C::reloc_distance_near(ctx, v1830.2);
                if let Some(v1835) = v1834 {
                    let v1837 = C::memflags_trusted(ctx);
                    let v1838 = &C::memarg_symbol(ctx, v1830.1, 0x0, v1837);
                    let v1839 = constructor_load_addr(ctx, v1838);
                    let v1840 = constructor_output_reg(ctx, v1839);
                    let v1841 = Some(v1840);
                    // Rule at src/isa/s390x/lower.isle line 2244.
                    return v1841;
                }
                let v1843 = SymbolReloc::Absolute {
                    name: v1830.1,
                    offset: 0x0,
                };
                let v1844 = constructor_load_symbol_reloc(ctx, &v1843);
                let v1845 = constructor_output_reg(ctx, v1844);
                let v1846 = Some(v1845);
                // Rule at src/isa/s390x/lower.isle line 2248.
                return v1846;
            }
        }
        &InstructionData::IntAddTrap {
            opcode: ref v2411,
            args: ref v2412,
            code: ref v2413,
        } => {
            if let &Opcode::UaddOverflowTrap = v2411 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v65 = C::fits_in_64(ctx, v3);
                    if let Some(v66) = v65 {
                        let v2414 = C::unpack_value_array_2(ctx, v2412);
                        let v2436 = C::def_inst(ctx, v2414.0);
                        if let Some(v2437) = v2436 {
                            let v2438 = &C::inst_data(ctx, v2437);
                            if let &InstructionData::Unary {
                                opcode: ref v2439,
                                arg: v2440,
                            } = v2438
                            {
                                if let &Opcode::Uextend = v2439 {
                                    let v2441 = C::value_type(ctx, v2440);
                                    if v2441 == I32 {
                                        let v2442 = C::put_in_reg(ctx, v2414.1);
                                        let v2443 = C::put_in_reg(ctx, v2440);
                                        let v2444 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v66, v2442, v2443,
                                            );
                                        let v2420 = &C::mask_as_cond(ctx, 0x3);
                                        let v2421 = &constructor_trap_if_impl(ctx, v2420, v2413);
                                        let v2445 = constructor_with_flags(ctx, v2444, v2421);
                                        let v2446 = C::output(ctx, v2445);
                                        let v2447 = Some(v2446);
                                        // Rule at src/isa/s390x/lower.isle line 3813.
                                        return v2447;
                                    }
                                }
                            }
                        }
                        let v2456 = C::u32_from_value(ctx, v2414.0);
                        if let Some(v2457) = v2456 {
                            let v2442 = C::put_in_reg(ctx, v2414.1);
                            let v2458 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v66, v2442, v2457,
                            );
                            let v2451 = &C::mask_as_cond(ctx, 0x3);
                            let v2452 = &constructor_trap_if_impl(ctx, v2451, v2413);
                            let v2459 = constructor_with_flags(ctx, v2458, v2452);
                            let v2460 = C::output(ctx, v2459);
                            let v2461 = Some(v2460);
                            // Rule at src/isa/s390x/lower.isle line 3825.
                            return v2461;
                        }
                        let v2482 = C::sinkable_inst(ctx, v2414.0);
                        if let Some(v2483) = v2482 {
                            let v2484 = &C::inst_data(ctx, v2483);
                            if let &InstructionData::Load {
                                opcode: ref v2485,
                                arg: v2486,
                                flags: v2487,
                                offset: v2488,
                            } = v2484
                            {
                                match v2485 {
                                    &Opcode::Load => {
                                        let v2479 = C::value_type(ctx, v2414.0);
                                        let v2480 = C::ty_32_or_64(ctx, v2479);
                                        if let Some(v2481) = v2480 {
                                            let v2489 = C::bigendian(ctx, v2487);
                                            if let Some(v2490) = v2489 {
                                                let v2442 = C::put_in_reg(ctx, v2414.1);
                                                let v2491 = &constructor_sink_load(ctx, v2483);
                                                let v2492 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v66, v2442, v2491,
                                                    );
                                                let v2420 = &C::mask_as_cond(ctx, 0x3);
                                                let v2421 =
                                                    &constructor_trap_if_impl(ctx, v2420, v2413);
                                                let v2493 =
                                                    constructor_with_flags(ctx, v2492, v2421);
                                                let v2494 = C::output(ctx, v2493);
                                                let v2495 = Some(v2494);
                                                // Rule at src/isa/s390x/lower.isle line 3837.
                                                return v2495;
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v2489 = C::bigendian(ctx, v2487);
                                        if let Some(v2490) = v2489 {
                                            let v2442 = C::put_in_reg(ctx, v2414.1);
                                            let v2501 = &constructor_sink_uload32(ctx, v2483);
                                            let v2502 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v66, v2442, v2501);
                                            let v2420 = &C::mask_as_cond(ctx, 0x3);
                                            let v2421 =
                                                &constructor_trap_if_impl(ctx, v2420, v2413);
                                            let v2503 = constructor_with_flags(ctx, v2502, v2421);
                                            let v2504 = C::output(ctx, v2503);
                                            let v2505 = Some(v2504);
                                            // Rule at src/isa/s390x/lower.isle line 3849.
                                            return v2505;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v2425 = C::def_inst(ctx, v2414.1);
                        if let Some(v2426) = v2425 {
                            let v2427 = &C::inst_data(ctx, v2426);
                            if let &InstructionData::Unary {
                                opcode: ref v2428,
                                arg: v2429,
                            } = v2427
                            {
                                if let &Opcode::Uextend = v2428 {
                                    let v2430 = C::value_type(ctx, v2429);
                                    if v2430 == I32 {
                                        let v2417 = C::put_in_reg(ctx, v2414.0);
                                        let v2431 = C::put_in_reg(ctx, v2429);
                                        let v2432 =
                                            &constructor_add_logical_reg_zext32_with_flags_paired(
                                                ctx, v66, v2417, v2431,
                                            );
                                        let v2420 = &C::mask_as_cond(ctx, 0x3);
                                        let v2421 = &constructor_trap_if_impl(ctx, v2420, v2413);
                                        let v2433 = constructor_with_flags(ctx, v2432, v2421);
                                        let v2434 = C::output(ctx, v2433);
                                        let v2435 = Some(v2434);
                                        // Rule at src/isa/s390x/lower.isle line 3808.
                                        return v2435;
                                    }
                                }
                            }
                        }
                        let v2448 = C::u32_from_value(ctx, v2414.1);
                        if let Some(v2449) = v2448 {
                            let v2417 = C::put_in_reg(ctx, v2414.0);
                            let v2450 = &constructor_add_logical_zimm32_with_flags_paired(
                                ctx, v66, v2417, v2449,
                            );
                            let v2451 = &C::mask_as_cond(ctx, 0x3);
                            let v2452 = &constructor_trap_if_impl(ctx, v2451, v2413);
                            let v2453 = constructor_with_flags(ctx, v2450, v2452);
                            let v2454 = C::output(ctx, v2453);
                            let v2455 = Some(v2454);
                            // Rule at src/isa/s390x/lower.isle line 3820.
                            return v2455;
                        }
                        let v2465 = C::sinkable_inst(ctx, v2414.1);
                        if let Some(v2466) = v2465 {
                            let v2467 = &C::inst_data(ctx, v2466);
                            if let &InstructionData::Load {
                                opcode: ref v2468,
                                arg: v2469,
                                flags: v2470,
                                offset: v2471,
                            } = v2467
                            {
                                match v2468 {
                                    &Opcode::Load => {
                                        let v2462 = C::value_type(ctx, v2414.1);
                                        let v2463 = C::ty_32_or_64(ctx, v2462);
                                        if let Some(v2464) = v2463 {
                                            let v2472 = C::bigendian(ctx, v2470);
                                            if let Some(v2473) = v2472 {
                                                let v2417 = C::put_in_reg(ctx, v2414.0);
                                                let v2474 = &constructor_sink_load(ctx, v2466);
                                                let v2475 =
                                                    &constructor_add_logical_mem_with_flags_paired(
                                                        ctx, v66, v2417, v2474,
                                                    );
                                                let v2420 = &C::mask_as_cond(ctx, 0x3);
                                                let v2421 =
                                                    &constructor_trap_if_impl(ctx, v2420, v2413);
                                                let v2476 =
                                                    constructor_with_flags(ctx, v2475, v2421);
                                                let v2477 = C::output(ctx, v2476);
                                                let v2478 = Some(v2477);
                                                // Rule at src/isa/s390x/lower.isle line 3832.
                                                return v2478;
                                            }
                                        }
                                    }
                                    &Opcode::Uload32 => {
                                        let v2472 = C::bigendian(ctx, v2470);
                                        if let Some(v2473) = v2472 {
                                            let v2417 = C::put_in_reg(ctx, v2414.0);
                                            let v2496 = &constructor_sink_uload32(ctx, v2466);
                                            let v2497 = &constructor_add_logical_mem_zext32_with_flags_paired(ctx, v66, v2417, v2496);
                                            let v2420 = &C::mask_as_cond(ctx, 0x3);
                                            let v2421 =
                                                &constructor_trap_if_impl(ctx, v2420, v2413);
                                            let v2498 = constructor_with_flags(ctx, v2497, v2421);
                                            let v2499 = C::output(ctx, v2498);
                                            let v2500 = Some(v2499);
                                            // Rule at src/isa/s390x/lower.isle line 3844.
                                            return v2500;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        let v2417 = C::put_in_reg(ctx, v2414.0);
                        let v2418 = C::put_in_reg(ctx, v2414.1);
                        let v2419 =
                            &constructor_add_logical_reg_with_flags_paired(ctx, v66, v2417, v2418);
                        let v2420 = &C::mask_as_cond(ctx, 0x3);
                        let v2421 = &constructor_trap_if_impl(ctx, v2420, v2413);
                        let v2422 = constructor_with_flags(ctx, v2419, v2421);
                        let v2423 = C::output(ctx, v2422);
                        let v2424 = Some(v2423);
                        // Rule at src/isa/s390x/lower.isle line 3802.
                        return v2424;
                    }
                }
            }
        }
        &InstructionData::IntCompare {
            opcode: ref v2190,
            args: ref v2191,
            cond: ref v2192,
        } => {
            if let &Opcode::Icmp = v2190 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    match v2192 {
                        &IntCC::Equal => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2201 = C::put_in_reg(ctx, v2193.0);
                                let v2202 = C::put_in_reg(ctx, v2193.1);
                                let v2203 = constructor_vec_cmpeq(ctx, v170, v2201, v2202);
                                let v2204 = constructor_output_reg(ctx, v2203);
                                let v2205 = Some(v2204);
                                // Rule at src/isa/s390x/lower.isle line 3402.
                                return v2205;
                            }
                        }
                        &IntCC::NotEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2201 = C::put_in_reg(ctx, v2193.0);
                                let v2202 = C::put_in_reg(ctx, v2193.1);
                                let v2203 = constructor_vec_cmpeq(ctx, v170, v2201, v2202);
                                let v2206 = constructor_vec_not(ctx, v170, v2203);
                                let v2207 = constructor_output_reg(ctx, v2206);
                                let v2208 = Some(v2207);
                                // Rule at src/isa/s390x/lower.isle line 3404.
                                return v2208;
                            }
                        }
                        &IntCC::SignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2201 = C::put_in_reg(ctx, v2193.0);
                                let v2202 = C::put_in_reg(ctx, v2193.1);
                                let v2209 = constructor_vec_cmph(ctx, v170, v2201, v2202);
                                let v2210 = constructor_output_reg(ctx, v2209);
                                let v2211 = Some(v2210);
                                // Rule at src/isa/s390x/lower.isle line 3406.
                                return v2211;
                            }
                        }
                        &IntCC::SignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2215 = C::put_in_reg(ctx, v2193.1);
                                let v2216 = C::put_in_reg(ctx, v2193.0);
                                let v2217 = constructor_vec_cmph(ctx, v170, v2215, v2216);
                                let v2220 = constructor_vec_not(ctx, v170, v2217);
                                let v2221 = constructor_output_reg(ctx, v2220);
                                let v2222 = Some(v2221);
                                // Rule at src/isa/s390x/lower.isle line 3412.
                                return v2222;
                            }
                        }
                        &IntCC::SignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2215 = C::put_in_reg(ctx, v2193.1);
                                let v2216 = C::put_in_reg(ctx, v2193.0);
                                let v2217 = constructor_vec_cmph(ctx, v170, v2215, v2216);
                                let v2218 = constructor_output_reg(ctx, v2217);
                                let v2219 = Some(v2218);
                                // Rule at src/isa/s390x/lower.isle line 3410.
                                return v2219;
                            }
                        }
                        &IntCC::SignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2201 = C::put_in_reg(ctx, v2193.0);
                                let v2202 = C::put_in_reg(ctx, v2193.1);
                                let v2209 = constructor_vec_cmph(ctx, v170, v2201, v2202);
                                let v2212 = constructor_vec_not(ctx, v170, v2209);
                                let v2213 = constructor_output_reg(ctx, v2212);
                                let v2214 = Some(v2213);
                                // Rule at src/isa/s390x/lower.isle line 3408.
                                return v2214;
                            }
                        }
                        &IntCC::UnsignedGreaterThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2201 = C::put_in_reg(ctx, v2193.0);
                                let v2202 = C::put_in_reg(ctx, v2193.1);
                                let v2223 = constructor_vec_cmphl(ctx, v170, v2201, v2202);
                                let v2224 = constructor_output_reg(ctx, v2223);
                                let v2225 = Some(v2224);
                                // Rule at src/isa/s390x/lower.isle line 3414.
                                return v2225;
                            }
                        }
                        &IntCC::UnsignedGreaterThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2215 = C::put_in_reg(ctx, v2193.1);
                                let v2216 = C::put_in_reg(ctx, v2193.0);
                                let v2229 = constructor_vec_cmphl(ctx, v170, v2215, v2216);
                                let v2232 = constructor_vec_not(ctx, v170, v2229);
                                let v2233 = constructor_output_reg(ctx, v2232);
                                let v2234 = Some(v2233);
                                // Rule at src/isa/s390x/lower.isle line 3420.
                                return v2234;
                            }
                        }
                        &IntCC::UnsignedLessThan => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2215 = C::put_in_reg(ctx, v2193.1);
                                let v2216 = C::put_in_reg(ctx, v2193.0);
                                let v2229 = constructor_vec_cmphl(ctx, v170, v2215, v2216);
                                let v2230 = constructor_output_reg(ctx, v2229);
                                let v2231 = Some(v2230);
                                // Rule at src/isa/s390x/lower.isle line 3418.
                                return v2231;
                            }
                        }
                        &IntCC::UnsignedLessThanOrEqual => {
                            let v3 = C::value_type(ctx, v2);
                            let v169 = C::ty_vec128(ctx, v3);
                            if let Some(v170) = v169 {
                                let v2193 = C::unpack_value_array_2(ctx, v2191);
                                let v2201 = C::put_in_reg(ctx, v2193.0);
                                let v2202 = C::put_in_reg(ctx, v2193.1);
                                let v2223 = constructor_vec_cmphl(ctx, v170, v2201, v2202);
                                let v2226 = constructor_vec_not(ctx, v170, v2223);
                                let v2227 = constructor_output_reg(ctx, v2226);
                                let v2228 = Some(v2227);
                                // Rule at src/isa/s390x/lower.isle line 3416.
                                return v2228;
                            }
                        }
                        _ => {}
                    }
                    let v3 = C::value_type(ctx, v2);
                    let v65 = C::fits_in_64(ctx, v3);
                    if let Some(v66) = v65 {
                        let v2193 = C::unpack_value_array_2(ctx, v2191);
                        let v2197 = &constructor_icmp_val(ctx, true, v2192, v2193.0, v2193.1);
                        let v2198 = constructor_lower_bool(ctx, v66, v2197);
                        let v2199 = constructor_output_reg(ctx, v2198);
                        let v2200 = Some(v2199);
                        // Rule at src/isa/s390x/lower.isle line 3280.
                        return v2200;
                    }
                }
            }
        }
        &InstructionData::Load {
            opcode: ref v1877,
            arg: v1878,
            flags: v1879,
            offset: v1880,
        } => {
            match v1877 {
                &Opcode::Load => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v1806 = &C::lane_order(ctx);
                            match v1806 {
                                &LaneOrder::LittleEndian => {
                                    let v1886 = C::bigendian(ctx, v1879);
                                    if let Some(v1887) = v1886 {
                                        let v1927 = constructor_vec_load_elt_rev(
                                            ctx, v39, v1879, v1878, v1880,
                                        );
                                        let v1928 = constructor_output_reg(ctx, v1927);
                                        let v1929 = Some(v1928);
                                        // Rule at src/isa/s390x/lower.isle line 2350.
                                        return v1929;
                                    }
                                    let v1892 = C::littleendian(ctx, v1879);
                                    if let Some(v1893) = v1892 {
                                        let v1930 = constructor_vec_load_full_rev(
                                            ctx, v39, v1879, v1878, v1880,
                                        );
                                        let v1931 = constructor_output_reg(ctx, v1930);
                                        let v1932 = Some(v1931);
                                        // Rule at src/isa/s390x/lower.isle line 2355.
                                        return v1932;
                                    }
                                }
                                &LaneOrder::BigEndian => {
                                    let v1886 = C::bigendian(ctx, v1879);
                                    if let Some(v1887) = v1886 {
                                        let v1882 =
                                            &constructor_lower_address(ctx, v1879, v1878, v1880);
                                        let v1921 = constructor_vec_load(ctx, v39, v1882);
                                        let v1922 = constructor_output_reg(ctx, v1921);
                                        let v1923 = Some(v1922);
                                        // Rule at src/isa/s390x/lower.isle line 2340.
                                        return v1923;
                                    }
                                    let v1892 = C::littleendian(ctx, v1879);
                                    if let Some(v1893) = v1892 {
                                        let v1924 = constructor_vec_load_byte_rev(
                                            ctx, v39, v1879, v1878, v1880,
                                        );
                                        let v1925 = constructor_output_reg(ctx, v1924);
                                        let v1926 = Some(v1925);
                                        // Rule at src/isa/s390x/lower.isle line 2345.
                                        return v1926;
                                    }
                                }
                                _ => {}
                            }
                        }
                        match v3 {
                            I8 => {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1883 = constructor_zext32_mem(ctx, I8, v1882);
                                let v1884 = constructor_output_reg(ctx, v1883);
                                let v1885 = Some(v1884);
                                // Rule at src/isa/s390x/lower.isle line 2296.
                                return v1885;
                            }
                            I16 => {
                                let v1886 = C::bigendian(ctx, v1879);
                                if let Some(v1887) = v1886 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1889 = constructor_zext32_mem(ctx, I16, v1882);
                                    let v1890 = constructor_output_reg(ctx, v1889);
                                    let v1891 = Some(v1890);
                                    // Rule at src/isa/s390x/lower.isle line 2300.
                                    return v1891;
                                }
                                let v1892 = C::littleendian(ctx, v1879);
                                if let Some(v1893) = v1892 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1894 = constructor_loadrev16(ctx, v1882);
                                    let v1895 = constructor_output_reg(ctx, v1894);
                                    let v1896 = Some(v1895);
                                    // Rule at src/isa/s390x/lower.isle line 2304.
                                    return v1896;
                                }
                            }
                            I32 => {
                                let v1886 = C::bigendian(ctx, v1879);
                                if let Some(v1887) = v1886 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1897 = constructor_load32(ctx, v1882);
                                    let v1898 = constructor_output_reg(ctx, v1897);
                                    let v1899 = Some(v1898);
                                    // Rule at src/isa/s390x/lower.isle line 2308.
                                    return v1899;
                                }
                                let v1892 = C::littleendian(ctx, v1879);
                                if let Some(v1893) = v1892 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1900 = constructor_loadrev32(ctx, v1882);
                                    let v1901 = constructor_output_reg(ctx, v1900);
                                    let v1902 = Some(v1901);
                                    // Rule at src/isa/s390x/lower.isle line 2312.
                                    return v1902;
                                }
                            }
                            I64 => {
                                let v1886 = C::bigendian(ctx, v1879);
                                if let Some(v1887) = v1886 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1903 = constructor_load64(ctx, v1882);
                                    let v1904 = constructor_output_reg(ctx, v1903);
                                    let v1905 = Some(v1904);
                                    // Rule at src/isa/s390x/lower.isle line 2316.
                                    return v1905;
                                }
                                let v1892 = C::littleendian(ctx, v1879);
                                if let Some(v1893) = v1892 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1906 = constructor_loadrev64(ctx, v1882);
                                    let v1907 = constructor_output_reg(ctx, v1906);
                                    let v1908 = Some(v1907);
                                    // Rule at src/isa/s390x/lower.isle line 2320.
                                    return v1908;
                                }
                            }
                            F32 => {
                                let v1886 = C::bigendian(ctx, v1879);
                                if let Some(v1887) = v1886 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1909 =
                                        constructor_vec_load_lane_undef(ctx, F32X4, v1882, 0x0);
                                    let v1910 = constructor_output_reg(ctx, v1909);
                                    let v1911 = Some(v1910);
                                    // Rule at src/isa/s390x/lower.isle line 2324.
                                    return v1911;
                                }
                                let v1892 = C::littleendian(ctx, v1879);
                                if let Some(v1893) = v1892 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1912 = constructor_vec_load_lane_little_undef(
                                        ctx, F32X4, v1882, 0x0,
                                    );
                                    let v1913 = constructor_output_reg(ctx, v1912);
                                    let v1914 = Some(v1913);
                                    // Rule at src/isa/s390x/lower.isle line 2328.
                                    return v1914;
                                }
                            }
                            F64 => {
                                let v1886 = C::bigendian(ctx, v1879);
                                if let Some(v1887) = v1886 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1915 =
                                        constructor_vec_load_lane_undef(ctx, F64X2, v1882, 0x0);
                                    let v1916 = constructor_output_reg(ctx, v1915);
                                    let v1917 = Some(v1916);
                                    // Rule at src/isa/s390x/lower.isle line 2332.
                                    return v1917;
                                }
                                let v1892 = C::littleendian(ctx, v1879);
                                if let Some(v1893) = v1892 {
                                    let v1882 =
                                        &constructor_lower_address(ctx, v1879, v1878, v1880);
                                    let v1918 = constructor_vec_load_lane_little_undef(
                                        ctx, F64X2, v1882, 0x0,
                                    );
                                    let v1919 = constructor_output_reg(ctx, v1918);
                                    let v1920 = Some(v1919);
                                    // Rule at src/isa/s390x/lower.isle line 2336.
                                    return v1920;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Uload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                            let v1933 = constructor_zext64_mem(ctx, I8, v1882);
                            let v1934 = constructor_output_reg(ctx, v1933);
                            let v1935 = Some(v1934);
                            // Rule at src/isa/s390x/lower.isle line 2452.
                            return v1935;
                        }
                        let v714 = C::gpr32_ty(ctx, v3);
                        if let Some(v715) = v714 {
                            let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                            let v1883 = constructor_zext32_mem(ctx, I8, v1882);
                            let v1884 = constructor_output_reg(ctx, v1883);
                            let v1885 = Some(v1884);
                            // Rule at src/isa/s390x/lower.isle line 2448.
                            return v1885;
                        }
                    }
                }
                &Opcode::Sload8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                            let v1939 = constructor_sext64_mem(ctx, I8, v1882);
                            let v1940 = constructor_output_reg(ctx, v1939);
                            let v1941 = Some(v1940);
                            // Rule at src/isa/s390x/lower.isle line 2463.
                            return v1941;
                        }
                        let v714 = C::gpr32_ty(ctx, v3);
                        if let Some(v715) = v714 {
                            let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                            let v1936 = constructor_sext32_mem(ctx, I8, v1882);
                            let v1937 = constructor_output_reg(ctx, v1936);
                            let v1938 = Some(v1937);
                            // Rule at src/isa/s390x/lower.isle line 2459.
                            return v1938;
                        }
                    }
                }
                &Opcode::Uload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1886 = C::bigendian(ctx, v1879);
                        if let Some(v1887) = v1886 {
                            let v3 = C::value_type(ctx, v2);
                            let v719 = C::gpr64_ty(ctx, v3);
                            if let Some(v720) = v719 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1945 = constructor_zext64_mem(ctx, I16, v1882);
                                let v1946 = constructor_output_reg(ctx, v1945);
                                let v1947 = Some(v1946);
                                // Rule at src/isa/s390x/lower.isle line 2481.
                                return v1947;
                            }
                            let v714 = C::gpr32_ty(ctx, v3);
                            if let Some(v715) = v714 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1889 = constructor_zext32_mem(ctx, I16, v1882);
                                let v1890 = constructor_output_reg(ctx, v1889);
                                let v1891 = Some(v1890);
                                // Rule at src/isa/s390x/lower.isle line 2470.
                                return v1891;
                            }
                        }
                        let v1892 = C::littleendian(ctx, v1879);
                        if let Some(v1893) = v1892 {
                            let v3 = C::value_type(ctx, v2);
                            let v719 = C::gpr64_ty(ctx, v3);
                            if let Some(v720) = v719 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1894 = constructor_loadrev16(ctx, v1882);
                                let v1948 = constructor_zext64_reg(ctx, I16, v1894);
                                let v1949 = constructor_output_reg(ctx, v1948);
                                let v1950 = Some(v1949);
                                // Rule at src/isa/s390x/lower.isle line 2486.
                                return v1950;
                            }
                            let v714 = C::gpr32_ty(ctx, v3);
                            if let Some(v715) = v714 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1894 = constructor_loadrev16(ctx, v1882);
                                let v1942 = constructor_zext32_reg(ctx, I16, v1894);
                                let v1943 = constructor_output_reg(ctx, v1942);
                                let v1944 = Some(v1943);
                                // Rule at src/isa/s390x/lower.isle line 2475.
                                return v1944;
                            }
                        }
                    }
                }
                &Opcode::Sload16 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1886 = C::bigendian(ctx, v1879);
                        if let Some(v1887) = v1886 {
                            let v3 = C::value_type(ctx, v2);
                            let v719 = C::gpr64_ty(ctx, v3);
                            if let Some(v720) = v719 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1957 = constructor_sext64_mem(ctx, I16, v1882);
                                let v1958 = constructor_output_reg(ctx, v1957);
                                let v1959 = Some(v1958);
                                // Rule at src/isa/s390x/lower.isle line 2506.
                                return v1959;
                            }
                            let v714 = C::gpr32_ty(ctx, v3);
                            if let Some(v715) = v714 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1951 = constructor_sext32_mem(ctx, I16, v1882);
                                let v1952 = constructor_output_reg(ctx, v1951);
                                let v1953 = Some(v1952);
                                // Rule at src/isa/s390x/lower.isle line 2495.
                                return v1953;
                            }
                        }
                        let v1892 = C::littleendian(ctx, v1879);
                        if let Some(v1893) = v1892 {
                            let v3 = C::value_type(ctx, v2);
                            let v719 = C::gpr64_ty(ctx, v3);
                            if let Some(v720) = v719 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1894 = constructor_loadrev16(ctx, v1882);
                                let v1960 = constructor_sext64_reg(ctx, I16, v1894);
                                let v1961 = constructor_output_reg(ctx, v1960);
                                let v1962 = Some(v1961);
                                // Rule at src/isa/s390x/lower.isle line 2511.
                                return v1962;
                            }
                            let v714 = C::gpr32_ty(ctx, v3);
                            if let Some(v715) = v714 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1894 = constructor_loadrev16(ctx, v1882);
                                let v1954 = constructor_sext32_reg(ctx, I16, v1894);
                                let v1955 = constructor_output_reg(ctx, v1954);
                                let v1956 = Some(v1955);
                                // Rule at src/isa/s390x/lower.isle line 2500.
                                return v1956;
                            }
                        }
                    }
                }
                &Opcode::Uload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v1886 = C::bigendian(ctx, v1879);
                            if let Some(v1887) = v1886 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1963 = constructor_zext64_mem(ctx, I32, v1882);
                                let v1964 = constructor_output_reg(ctx, v1963);
                                let v1965 = Some(v1964);
                                // Rule at src/isa/s390x/lower.isle line 2520.
                                return v1965;
                            }
                            let v1892 = C::littleendian(ctx, v1879);
                            if let Some(v1893) = v1892 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1900 = constructor_loadrev32(ctx, v1882);
                                let v1966 = constructor_zext64_reg(ctx, I32, v1900);
                                let v1967 = constructor_output_reg(ctx, v1966);
                                let v1968 = Some(v1967);
                                // Rule at src/isa/s390x/lower.isle line 2525.
                                return v1968;
                            }
                        }
                    }
                }
                &Opcode::Sload32 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v1886 = C::bigendian(ctx, v1879);
                            if let Some(v1887) = v1886 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1969 = constructor_sext64_mem(ctx, I32, v1882);
                                let v1970 = constructor_output_reg(ctx, v1969);
                                let v1971 = Some(v1970);
                                // Rule at src/isa/s390x/lower.isle line 2534.
                                return v1971;
                            }
                            let v1892 = C::littleendian(ctx, v1879);
                            if let Some(v1893) = v1892 {
                                let v1882 = &constructor_lower_address(ctx, v1879, v1878, v1880);
                                let v1900 = constructor_loadrev32(ctx, v1882);
                                let v1972 = constructor_sext64_reg(ctx, I32, v1900);
                                let v1973 = constructor_output_reg(ctx, v1972);
                                let v1974 = Some(v1973);
                                // Rule at src/isa/s390x/lower.isle line 2539.
                                return v1974;
                            }
                        }
                    }
                }
                &Opcode::Uload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1975 = constructor_load_v64(ctx, I8X16, v1879, v1878, v1880);
                            let v1976 = constructor_vec_unpacku_high(ctx, I8X16, v1975);
                            let v1977 = constructor_output_reg(ctx, v1976);
                            let v1978 = Some(v1977);
                            // Rule at src/isa/s390x/lower.isle line 2548.
                            return v1978;
                        }
                    }
                }
                &Opcode::Sload8x8 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I16X8 {
                            let v1975 = constructor_load_v64(ctx, I8X16, v1879, v1878, v1880);
                            let v1979 = constructor_vec_unpacks_high(ctx, I8X16, v1975);
                            let v1980 = constructor_output_reg(ctx, v1979);
                            let v1981 = Some(v1980);
                            // Rule at src/isa/s390x/lower.isle line 2552.
                            return v1981;
                        }
                    }
                }
                &Opcode::Uload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1982 = constructor_load_v64(ctx, I16X8, v1879, v1878, v1880);
                            let v1983 = constructor_vec_unpacku_high(ctx, I16X8, v1982);
                            let v1984 = constructor_output_reg(ctx, v1983);
                            let v1985 = Some(v1984);
                            // Rule at src/isa/s390x/lower.isle line 2556.
                            return v1985;
                        }
                    }
                }
                &Opcode::Sload16x4 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I32X4 {
                            let v1982 = constructor_load_v64(ctx, I16X8, v1879, v1878, v1880);
                            let v1986 = constructor_vec_unpacks_high(ctx, I16X8, v1982);
                            let v1987 = constructor_output_reg(ctx, v1986);
                            let v1988 = Some(v1987);
                            // Rule at src/isa/s390x/lower.isle line 2560.
                            return v1988;
                        }
                    }
                }
                &Opcode::Uload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1989 = constructor_load_v64(ctx, I32X4, v1879, v1878, v1880);
                            let v1990 = constructor_vec_unpacku_high(ctx, I32X4, v1989);
                            let v1991 = constructor_output_reg(ctx, v1990);
                            let v1992 = Some(v1991);
                            // Rule at src/isa/s390x/lower.isle line 2564.
                            return v1992;
                        }
                    }
                }
                &Opcode::Sload32x2 => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == I64X2 {
                            let v1989 = constructor_load_v64(ctx, I32X4, v1879, v1878, v1880);
                            let v1993 = constructor_vec_unpacks_high(ctx, I32X4, v1989);
                            let v1994 = constructor_output_reg(ctx, v1993);
                            let v1995 = Some(v1994);
                            // Rule at src/isa/s390x/lower.isle line 2568.
                            return v1995;
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::LoadNoOffset {
            opcode: ref v1335,
            arg: v1336,
            flags: v1337,
        } => {
            match v1335 {
                &Opcode::Bitcast => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v193 = C::multi_lane(ctx, v3);
                        if let Some(v194) = v193 {
                            let v1338 = C::value_type(ctx, v1336);
                            let v1362 = C::multi_lane(ctx, v1338);
                            if let Some(v1363) = v1362 {
                                if v194.0 == v1363.0 {
                                    if v194.1 == v1363.1 {
                                        let v1354 = constructor_output_value(ctx, v1336);
                                        let v1355 = Some(v1354);
                                        // Rule at src/isa/s390x/lower.isle line 1745.
                                        return v1355;
                                    }
                                }
                            }
                        }
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v1338 = C::value_type(ctx, v1336);
                            let v1366 = C::vr128_ty(ctx, v1338);
                            if let Some(v1367) = v1366 {
                                let v1339 = C::put_in_reg(ctx, v1336);
                                let v1368 = &constructor_lane_order_from_memflags(ctx, v1337);
                                let v1369 = constructor_abi_vec_elt_rev(ctx, v1368, v1367, v1339);
                                let v1370 = constructor_abi_vec_elt_rev(ctx, v1368, v39, v1369);
                                let v1371 = constructor_output_reg(ctx, v1370);
                                let v1372 = Some(v1371);
                                // Rule at src/isa/s390x/lower.isle line 1756.
                                return v1372;
                            }
                        }
                        let v1358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1359) = v1358 {
                            let v1338 = C::value_type(ctx, v1336);
                            let v1360 = C::ty_scalar_float(ctx, v1338);
                            if let Some(v1361) = v1360 {
                                let v1354 = constructor_output_value(ctx, v1336);
                                let v1355 = Some(v1354);
                                // Rule at src/isa/s390x/lower.isle line 1740.
                                return v1355;
                            }
                        }
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v1338 = C::value_type(ctx, v1336);
                            let v1356 = C::gpr64_ty(ctx, v1338);
                            if let Some(v1357) = v1356 {
                                let v1354 = constructor_output_value(ctx, v1336);
                                let v1355 = Some(v1354);
                                // Rule at src/isa/s390x/lower.isle line 1735.
                                return v1355;
                            }
                        }
                        let v714 = C::gpr32_ty(ctx, v3);
                        if let Some(v715) = v714 {
                            let v1338 = C::value_type(ctx, v1336);
                            let v1352 = C::gpr32_ty(ctx, v1338);
                            if let Some(v1353) = v1352 {
                                let v1354 = constructor_output_value(ctx, v1336);
                                let v1355 = Some(v1354);
                                // Rule at src/isa/s390x/lower.isle line 1732.
                                return v1355;
                            }
                        }
                        match v3 {
                            I32 => {
                                let v1338 = C::value_type(ctx, v1336);
                                if v1338 == F32 {
                                    let v1339 = C::put_in_reg(ctx, v1336);
                                    let v56 = C::zero_reg(ctx);
                                    let v1349 =
                                        constructor_vec_extract_lane(ctx, F32X4, v1339, 0x0, v56);
                                    let v1350 = constructor_output_reg(ctx, v1349);
                                    let v1351 = Some(v1350);
                                    // Rule at src/isa/s390x/lower.isle line 1728.
                                    return v1351;
                                }
                            }
                            I64 => {
                                let v1338 = C::value_type(ctx, v1336);
                                if v1338 == F64 {
                                    let v1339 = C::put_in_reg(ctx, v1336);
                                    let v56 = C::zero_reg(ctx);
                                    let v1343 =
                                        constructor_vec_extract_lane(ctx, F64X2, v1339, 0x0, v56);
                                    let v1344 = constructor_output_reg(ctx, v1343);
                                    let v1345 = Some(v1344);
                                    // Rule at src/isa/s390x/lower.isle line 1720.
                                    return v1345;
                                }
                            }
                            F32 => {
                                let v1338 = C::value_type(ctx, v1336);
                                if v1338 == I32 {
                                    let v1339 = C::put_in_reg(ctx, v1336);
                                    let v56 = C::zero_reg(ctx);
                                    let v1346 = constructor_vec_insert_lane_undef(
                                        ctx, F32X4, v1339, 0x0, v56,
                                    );
                                    let v1347 = constructor_output_reg(ctx, v1346);
                                    let v1348 = Some(v1347);
                                    // Rule at src/isa/s390x/lower.isle line 1724.
                                    return v1348;
                                }
                            }
                            F64 => {
                                let v1338 = C::value_type(ctx, v1336);
                                if v1338 == I64 {
                                    let v1339 = C::put_in_reg(ctx, v1336);
                                    let v56 = C::zero_reg(ctx);
                                    let v1340 = constructor_vec_insert_lane_undef(
                                        ctx, F64X2, v1339, 0x0, v56,
                                    );
                                    let v1341 = constructor_output_reg(ctx, v1340);
                                    let v1342 = Some(v1341);
                                    // Rule at src/isa/s390x/lower.isle line 1716.
                                    return v1342;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::AtomicLoad => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I8 => {
                                let v2141 = C::zero_offset(ctx);
                                let v2142 = &constructor_lower_address(ctx, v1337, v1336, v2141);
                                let v2143 = constructor_zext32_mem(ctx, I8, v2142);
                                let v2144 = constructor_output_reg(ctx, v2143);
                                let v2145 = Some(v2144);
                                // Rule at src/isa/s390x/lower.isle line 3191.
                                return v2145;
                            }
                            I16 => {
                                let v2146 = C::bigendian(ctx, v1337);
                                if let Some(v2147) = v2146 {
                                    let v2141 = C::zero_offset(ctx);
                                    let v2142 =
                                        &constructor_lower_address(ctx, v1337, v1336, v2141);
                                    let v2148 = constructor_zext32_mem(ctx, I16, v2142);
                                    let v2149 = constructor_output_reg(ctx, v2148);
                                    let v2150 = Some(v2149);
                                    // Rule at src/isa/s390x/lower.isle line 3195.
                                    return v2150;
                                }
                                let v2151 = C::littleendian(ctx, v1337);
                                if let Some(v2152) = v2151 {
                                    let v2141 = C::zero_offset(ctx);
                                    let v2142 =
                                        &constructor_lower_address(ctx, v1337, v1336, v2141);
                                    let v2153 = constructor_loadrev16(ctx, v2142);
                                    let v2154 = constructor_output_reg(ctx, v2153);
                                    let v2155 = Some(v2154);
                                    // Rule at src/isa/s390x/lower.isle line 3199.
                                    return v2155;
                                }
                            }
                            I32 => {
                                let v2146 = C::bigendian(ctx, v1337);
                                if let Some(v2147) = v2146 {
                                    let v2141 = C::zero_offset(ctx);
                                    let v2142 =
                                        &constructor_lower_address(ctx, v1337, v1336, v2141);
                                    let v2156 = constructor_load32(ctx, v2142);
                                    let v2157 = constructor_output_reg(ctx, v2156);
                                    let v2158 = Some(v2157);
                                    // Rule at src/isa/s390x/lower.isle line 3203.
                                    return v2158;
                                }
                                let v2151 = C::littleendian(ctx, v1337);
                                if let Some(v2152) = v2151 {
                                    let v2141 = C::zero_offset(ctx);
                                    let v2142 =
                                        &constructor_lower_address(ctx, v1337, v1336, v2141);
                                    let v2159 = constructor_loadrev32(ctx, v2142);
                                    let v2160 = constructor_output_reg(ctx, v2159);
                                    let v2161 = Some(v2160);
                                    // Rule at src/isa/s390x/lower.isle line 3207.
                                    return v2161;
                                }
                            }
                            I64 => {
                                let v2146 = C::bigendian(ctx, v1337);
                                if let Some(v2147) = v2146 {
                                    let v2141 = C::zero_offset(ctx);
                                    let v2142 =
                                        &constructor_lower_address(ctx, v1337, v1336, v2141);
                                    let v2162 = constructor_load64(ctx, v2142);
                                    let v2163 = constructor_output_reg(ctx, v2162);
                                    let v2164 = Some(v2163);
                                    // Rule at src/isa/s390x/lower.isle line 3211.
                                    return v2164;
                                }
                                let v2151 = C::littleendian(ctx, v1337);
                                if let Some(v2152) = v2151 {
                                    let v2141 = C::zero_offset(ctx);
                                    let v2142 =
                                        &constructor_lower_address(ctx, v1337, v1336, v2141);
                                    let v2165 = constructor_loadrev64(ctx, v2142);
                                    let v2166 = constructor_output_reg(ctx, v2165);
                                    let v2167 = Some(v2166);
                                    // Rule at src/isa/s390x/lower.isle line 3215.
                                    return v2167;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::MultiAry {
            opcode: ref v2506,
            args: v2507,
        } => {
            if let &Opcode::Return = v2506 {
                let v2508 = C::value_list_slice(ctx, v2507);
                let v2509 = constructor_lower_return(ctx, v2508);
                let v2510 = Some(v2509);
                // Rule at src/isa/s390x/lower.isle line 3857.
                return v2510;
            }
        }
        &InstructionData::NullAry { opcode: ref v34 } => {
            match v34 {
                &Opcode::Debugtrap => {
                    let v2408 = &constructor_debugtrap_impl(ctx);
                    let v2409 = constructor_side_effect(ctx, v2408);
                    let v2410 = Some(v2409);
                    // Rule at src/isa/s390x/lower.isle line 3783.
                    return v2410;
                }
                &Opcode::GetFramePointer => {
                    let v2581 = &C::memarg_frame_pointer_offset(ctx);
                    let v2582 = constructor_load64(ctx, v2581);
                    let v2583 = constructor_output_reg(ctx, v2582);
                    let v2584 = Some(v2583);
                    // Rule at src/isa/s390x/lower.isle line 3985.
                    return v2584;
                }
                &Opcode::GetStackPointer => {
                    let v2578 = constructor_sp(ctx);
                    let v2579 = constructor_output_reg(ctx, v2578);
                    let v2580 = Some(v2579);
                    // Rule at src/isa/s390x/lower.isle line 3982.
                    return v2580;
                }
                &Opcode::GetReturnAddress => {
                    let v2585 = &C::memarg_return_address_offset(ctx);
                    let v2586 = constructor_load64(ctx, v2585);
                    let v2587 = constructor_output_reg(ctx, v2586);
                    let v2588 = Some(v2587);
                    // Rule at src/isa/s390x/lower.isle line 3988.
                    return v2588;
                }
                &Opcode::Nop => {
                    let v35 = C::invalid_reg(ctx);
                    let v36 = constructor_output_reg(ctx, v35);
                    let v37 = Some(v36);
                    // Rule at src/isa/s390x/lower.isle line 38.
                    return v37;
                }
                &Opcode::Fence => {
                    let v2187 = &constructor_fence_impl(ctx);
                    let v2188 = constructor_side_effect(ctx, v2187);
                    let v2189 = Some(v2188);
                    // Rule at src/isa/s390x/lower.isle line 3247.
                    return v2189;
                }
                _ => {}
            }
        }
        &InstructionData::Shuffle {
            opcode: ref v1543,
            args: ref v1544,
            imm: v1545,
        } => {
            if let &Opcode::Shuffle = v1543 {
                let v1549 = C::u128_from_immediate(ctx, v1545);
                if let Some(v1550) = v1549 {
                    let v1551 = C::shuffle_mask_from_u128(ctx, v1550);
                    match v1551.1 {
                        0xF0F => {
                            let v1568 = C::u64_pair_split(ctx, v1551.0);
                            let v1571 = C::u32_pair_split(ctx, v1568.0);
                            let v1583 = C::u16_pair_split(ctx, v1571.1);
                            let v1586 = C::u8_pair_split(ctx, v1583.0);
                            match v1586.0 {
                                0x0 => {
                                    if v1586.1 == 0x1 {
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0x2 {
                                            if v1589.1 == 0x3 {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                if v1607.0 == 0x4 {
                                                    if v1607.1 == 0x5 {
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0x6 {
                                                            if v1610.1 == 0x7 {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1562 =
                                                                    C::put_in_reg(ctx, v1546.0);
                                                                let v1746 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1562,
                                                                    );
                                                                let v1747 = constructor_output_reg(
                                                                    ctx, v1746,
                                                                );
                                                                let v1748 = Some(v1747);
                                                                // Rule at src/isa/s390x/lower.isle line 2153.
                                                                return v1748;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1586.1 == 0x9 {
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0xA {
                                            if v1589.1 == 0xB {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                if v1607.0 == 0xC {
                                                    if v1607.1 == 0xD {
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0xE {
                                                            if v1610.1 == 0xF {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1562 =
                                                                    C::put_in_reg(ctx, v1546.0);
                                                                let v1764 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1562,
                                                                    );
                                                                let v1765 = constructor_output_reg(
                                                                    ctx, v1764,
                                                                );
                                                                let v1766 = Some(v1765);
                                                                // Rule at src/isa/s390x/lower.isle line 2167.
                                                                return v1766;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1586.1 == 0x11 {
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0x12 {
                                            if v1589.1 == 0x13 {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                if v1607.0 == 0x14 {
                                                    if v1607.1 == 0x15 {
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0x16 {
                                                            if v1610.1 == 0x17 {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1625 =
                                                                    C::put_in_reg(ctx, v1546.1);
                                                                let v1755 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I32X4, v1625,
                                                                    );
                                                                let v1756 = constructor_output_reg(
                                                                    ctx, v1755,
                                                                );
                                                                let v1757 = Some(v1756);
                                                                // Rule at src/isa/s390x/lower.isle line 2159.
                                                                return v1757;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1586.1 == 0x19 {
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0x1A {
                                            if v1589.1 == 0x1B {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                if v1607.0 == 0x1C {
                                                    if v1607.1 == 0x1D {
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0x1E {
                                                            if v1610.1 == 0x1F {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1625 =
                                                                    C::put_in_reg(ctx, v1546.1);
                                                                let v1773 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I32X4, v1625,
                                                                    );
                                                                let v1774 = constructor_output_reg(
                                                                    ctx, v1773,
                                                                );
                                                                let v1775 = Some(v1774);
                                                                // Rule at src/isa/s390x/lower.isle line 2173.
                                                                return v1775;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x3333 => {
                            let v1568 = C::u64_pair_split(ctx, v1551.0);
                            let v1571 = C::u32_pair_split(ctx, v1568.0);
                            let v1574 = C::u16_pair_split(ctx, v1571.0);
                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                            match v1580.0 {
                                0x0 => {
                                    if v1580.1 == 0x1 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0x2 {
                                            if v1589.1 == 0x3 {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                if v1601.0 == 0x4 {
                                                    if v1601.1 == 0x5 {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0x6 {
                                                            if v1610.1 == 0x7 {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1562 =
                                                                    C::put_in_reg(ctx, v1546.0);
                                                                let v1749 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1562,
                                                                    );
                                                                let v1750 = constructor_output_reg(
                                                                    ctx, v1749,
                                                                );
                                                                let v1751 = Some(v1750);
                                                                // Rule at src/isa/s390x/lower.isle line 2155.
                                                                return v1751;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    if v1580.1 == 0x9 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0xA {
                                            if v1589.1 == 0xB {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                if v1601.0 == 0xC {
                                                    if v1601.1 == 0xD {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0xE {
                                                            if v1610.1 == 0xF {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1562 =
                                                                    C::put_in_reg(ctx, v1546.0);
                                                                let v1767 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1562,
                                                                    );
                                                                let v1768 = constructor_output_reg(
                                                                    ctx, v1767,
                                                                );
                                                                let v1769 = Some(v1768);
                                                                // Rule at src/isa/s390x/lower.isle line 2169.
                                                                return v1769;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    if v1580.1 == 0x11 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0x12 {
                                            if v1589.1 == 0x13 {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                if v1601.0 == 0x14 {
                                                    if v1601.1 == 0x15 {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0x16 {
                                                            if v1610.1 == 0x17 {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1625 =
                                                                    C::put_in_reg(ctx, v1546.1);
                                                                let v1758 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I16X8, v1625,
                                                                    );
                                                                let v1759 = constructor_output_reg(
                                                                    ctx, v1758,
                                                                );
                                                                let v1760 = Some(v1759);
                                                                // Rule at src/isa/s390x/lower.isle line 2161.
                                                                return v1760;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    if v1580.1 == 0x19 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                        if v1589.0 == 0x1A {
                                            if v1589.1 == 0x1B {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                if v1601.0 == 0x1C {
                                                    if v1601.1 == 0x1D {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                        if v1610.0 == 0x1E {
                                                            if v1610.1 == 0x1F {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1625 =
                                                                    C::put_in_reg(ctx, v1546.1);
                                                                let v1776 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I16X8, v1625,
                                                                    );
                                                                let v1777 = constructor_output_reg(
                                                                    ctx, v1776,
                                                                );
                                                                let v1778 = Some(v1777);
                                                                // Rule at src/isa/s390x/lower.isle line 2175.
                                                                return v1778;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0x5555 => {
                            let v1568 = C::u64_pair_split(ctx, v1551.0);
                            let v1571 = C::u32_pair_split(ctx, v1568.0);
                            let v1574 = C::u16_pair_split(ctx, v1571.0);
                            let v1577 = C::u8_pair_split(ctx, v1574.0);
                            match v1577.1 {
                                0x0 => {
                                    let v1580 = C::u8_pair_split(ctx, v1574.1);
                                    if v1580.1 == 0x1 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                        if v1586.1 == 0x2 {
                                            let v1589 = C::u8_pair_split(ctx, v1583.1);
                                            if v1589.1 == 0x3 {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1598 = C::u8_pair_split(ctx, v1595.0);
                                                if v1598.1 == 0x4 {
                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                    if v1601.1 == 0x5 {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                        if v1607.1 == 0x6 {
                                                            let v1610 =
                                                                C::u8_pair_split(ctx, v1604.1);
                                                            if v1610.1 == 0x7 {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1562 =
                                                                    C::put_in_reg(ctx, v1546.0);
                                                                let v1752 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1562,
                                                                    );
                                                                let v1753 = constructor_output_reg(
                                                                    ctx, v1752,
                                                                );
                                                                let v1754 = Some(v1753);
                                                                // Rule at src/isa/s390x/lower.isle line 2157.
                                                                return v1754;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    let v1580 = C::u8_pair_split(ctx, v1574.1);
                                    if v1580.1 == 0x9 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                        if v1586.1 == 0xA {
                                            let v1589 = C::u8_pair_split(ctx, v1583.1);
                                            if v1589.1 == 0xB {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1598 = C::u8_pair_split(ctx, v1595.0);
                                                if v1598.1 == 0xC {
                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                    if v1601.1 == 0xD {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                        if v1607.1 == 0xE {
                                                            let v1610 =
                                                                C::u8_pair_split(ctx, v1604.1);
                                                            if v1610.1 == 0xF {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1562 =
                                                                    C::put_in_reg(ctx, v1546.0);
                                                                let v1770 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1562,
                                                                    );
                                                                let v1771 = constructor_output_reg(
                                                                    ctx, v1770,
                                                                );
                                                                let v1772 = Some(v1771);
                                                                // Rule at src/isa/s390x/lower.isle line 2171.
                                                                return v1772;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x10 => {
                                    let v1580 = C::u8_pair_split(ctx, v1574.1);
                                    if v1580.1 == 0x11 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                        if v1586.1 == 0x12 {
                                            let v1589 = C::u8_pair_split(ctx, v1583.1);
                                            if v1589.1 == 0x13 {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1598 = C::u8_pair_split(ctx, v1595.0);
                                                if v1598.1 == 0x14 {
                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                    if v1601.1 == 0x15 {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                        if v1607.1 == 0x16 {
                                                            let v1610 =
                                                                C::u8_pair_split(ctx, v1604.1);
                                                            if v1610.1 == 0x17 {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1625 =
                                                                    C::put_in_reg(ctx, v1546.1);
                                                                let v1761 =
                                                                    constructor_vec_unpacku_high(
                                                                        ctx, I8X16, v1625,
                                                                    );
                                                                let v1762 = constructor_output_reg(
                                                                    ctx, v1761,
                                                                );
                                                                let v1763 = Some(v1762);
                                                                // Rule at src/isa/s390x/lower.isle line 2163.
                                                                return v1763;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    let v1580 = C::u8_pair_split(ctx, v1574.1);
                                    if v1580.1 == 0x19 {
                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                        if v1586.1 == 0x1A {
                                            let v1589 = C::u8_pair_split(ctx, v1583.1);
                                            if v1589.1 == 0x1B {
                                                let v1592 = C::u32_pair_split(ctx, v1568.1);
                                                let v1595 = C::u16_pair_split(ctx, v1592.0);
                                                let v1598 = C::u8_pair_split(ctx, v1595.0);
                                                if v1598.1 == 0x1C {
                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                    if v1601.1 == 0x1D {
                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                        if v1607.1 == 0x1E {
                                                            let v1610 =
                                                                C::u8_pair_split(ctx, v1604.1);
                                                            if v1610.1 == 0x1F {
                                                                let v1546 = C::unpack_value_array_2(
                                                                    ctx, v1544,
                                                                );
                                                                let v1625 =
                                                                    C::put_in_reg(ctx, v1546.1);
                                                                let v1779 =
                                                                    constructor_vec_unpacku_low(
                                                                        ctx, I8X16, v1625,
                                                                    );
                                                                let v1780 = constructor_output_reg(
                                                                    ctx, v1779,
                                                                );
                                                                let v1781 = Some(v1780);
                                                                // Rule at src/isa/s390x/lower.isle line 2177.
                                                                return v1781;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                _ => {}
                            }
                        }
                        0xFFFF => {
                            let v1568 = C::u64_pair_split(ctx, v1551.0);
                            let v1571 = C::u32_pair_split(ctx, v1568.0);
                            let v1574 = C::u16_pair_split(ctx, v1571.0);
                            let v1577 = C::u8_pair_split(ctx, v1574.0);
                            match v1577.0 {
                                0x0 => {
                                    match v1577.1 {
                                        0x0 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x1 {
                                                if v1580.1 == 0x1 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0x2 {
                                                        if v1586.1 == 0x2 {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0x3 {
                                                                if v1589.1 == 0x3 {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0x4 {
                                                                        if v1598.1 == 0x4 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x5 {
                                                                                if v1601.1 == 0x5 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x7 {
                                                                                                if v1610.1 == 0x7 {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1647 = constructor_vec_merge_high(ctx, I8X16, v1562, v1555);
                                                                                                    let v1648 = constructor_output_reg(ctx, v1647);
                                                                                                    let v1649 = Some(v1648);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2081.
                                                                                                    return v1649;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x1 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            match v1580.0 {
                                                0x0 => {
                                                    if v1580.1 == 0x1 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0x2 {
                                                            if v1586.1 == 0x3 {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0x2 {
                                                                    if v1589.1 == 0x3 {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0x4 {
                                                                            if v1598.1 == 0x5 {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0x4 {
                                                                                    if v1601.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1607.1 == 0x7 {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0x6 {
                                                                                                    if v1610.1 == 0x7 {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1644 = constructor_vec_merge_high(ctx, I16X8, v1562, v1555);
                                                                                                        let v1645 = constructor_output_reg(ctx, v1644);
                                                                                                        let v1646 = Some(v1645);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2079.
                                                                                                        return v1646;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x2 => {
                                                    if v1580.1 == 0x3 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        match v1586.0 {
                                                            0x0 => {
                                                                if v1586.1 == 0x1 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x2 {
                                                                        if v1589.1 == 0x3 {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0x4 {
                                                                                if v1598.1 == 0x5 {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0x4 {
                                                                                                if v1607.1 == 0x5 {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0x6 {
                                                                                                        if v1610.1 == 0x7 {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1641 = constructor_vec_merge_high(ctx, I32X4, v1562, v1555);
                                                                                                            let v1642 = constructor_output_reg(ctx, v1641);
                                                                                                            let v1643 = Some(v1642);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2077.
                                                                                                            return v1643;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x4 => {
                                                                if v1586.1 == 0x5 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x6 {
                                                                        if v1589.1 == 0x7 {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            match v1598.0 {
                                                                                0x0 => {
                                                                                    if v1598.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1601.1 == 0x3 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x4 {
                                                                                                    if v1607.1 == 0x5 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x6 {
                                                                                                            if v1610.1 == 0x7 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1638 = constructor_vec_merge_high(ctx, I64X2, v1562, v1555);
                                                                                                                let v1639 = constructor_output_reg(ctx, v1638);
                                                                                                                let v1640 = Some(v1639);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2075.
                                                                                                                return v1640;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1598.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1601.1 == 0xB {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0xC {
                                                                                                    if v1607.1 == 0xD {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0xE {
                                                                                                            if v1610.1 == 0xF {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1794 = constructor_vec_permute_dw_imm(ctx, I8X16, v1562, 0x0, v1555, 0x1);
                                                                                                                let v1795 = constructor_output_reg(ctx, v1794);
                                                                                                                let v1796 = Some(v1795);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2189.
                                                                                                                return v1796;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1598.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1601.1 == 0x13 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x14 {
                                                                                                    if v1607.1 == 0x15 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x16 {
                                                                                                            if v1610.1 == 0x17 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1613 = constructor_vec_merge_high(ctx, I64X2, v1562, v1563);
                                                                                                                let v1614 = constructor_output_reg(ctx, v1613);
                                                                                                                let v1615 = Some(v1614);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2059.
                                                                                                                return v1615;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1598.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1601.1 == 0x1B {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x1C {
                                                                                                    if v1607.1 == 0x1D {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x1E {
                                                                                                            if v1610.1 == 0x1F {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1782 = constructor_vec_permute_dw_imm(ctx, I8X16, v1562, 0x0, v1563, 0x1);
                                                                                                                let v1783 = constructor_output_reg(ctx, v1782);
                                                                                                                let v1784 = Some(v1783);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2181.
                                                                                                                return v1784;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1586.1 == 0x11 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x12 {
                                                                        if v1589.1 == 0x13 {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0x4 {
                                                                                if v1598.1 == 0x5 {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0x7
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0x14 {
                                                                                                if v1607.1 == 0x15 {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0x16 {
                                                                                                        if v1610.1 == 0x17 {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1616 = constructor_vec_merge_high(ctx, I32X4, v1562, v1563);
                                                                                                            let v1617 = constructor_output_reg(ctx, v1616);
                                                                                                            let v1618 = Some(v1617);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2061.
                                                                                                            return v1618;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1580.1 == 0x11 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0x2 {
                                                            if v1586.1 == 0x3 {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0x12 {
                                                                    if v1589.1 == 0x13 {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0x4 {
                                                                            if v1598.1 == 0x5 {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0x14 {
                                                                                    if v1601.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0x6
                                                                                        {
                                                                                            if v1607.1 == 0x7 {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0x16 {
                                                                                                    if v1610.1 == 0x17 {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1619 = constructor_vec_merge_high(ctx, I16X8, v1562, v1563);
                                                                                                        let v1620 = constructor_output_reg(ctx, v1619);
                                                                                                        let v1621 = Some(v1620);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2063.
                                                                                                        return v1621;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x10 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x1 {
                                                if v1580.1 == 0x11 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0x2 {
                                                        if v1586.1 == 0x12 {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0x3 {
                                                                if v1589.1 == 0x13 {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0x4 {
                                                                        if v1598.1 == 0x14 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x5 {
                                                                                if v1601.1 == 0x15 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x6
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x7 {
                                                                                                if v1610.1 == 0x17 {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1622 = constructor_vec_merge_high(ctx, I8X16, v1562, v1563);
                                                                                                    let v1623 = constructor_output_reg(ctx, v1622);
                                                                                                    let v1624 = Some(v1623);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2065.
                                                                                                    return v1624;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x1 => {
                                    if v1577.1 == 0x3 {
                                        let v1580 = C::u8_pair_split(ctx, v1574.1);
                                        if v1580.0 == 0x5 {
                                            if v1580.1 == 0x7 {
                                                let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                if v1586.0 == 0x9 {
                                                    if v1586.1 == 0xB {
                                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                                        if v1589.0 == 0xD {
                                                            if v1589.1 == 0xF {
                                                                let v1592 =
                                                                    C::u32_pair_split(ctx, v1568.1);
                                                                let v1595 =
                                                                    C::u16_pair_split(ctx, v1592.0);
                                                                let v1598 =
                                                                    C::u8_pair_split(ctx, v1595.0);
                                                                match v1598.0 {
                                                                    0x1 => {
                                                                        if v1598.1 == 0x3 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x5 {
                                                                                if v1601.1 == 0x7 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xD {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1734 = constructor_vec_pack(ctx, I16X8, v1562, v1555);
                                                                                                    let v1735 = constructor_output_reg(ctx, v1734);
                                                                                                    let v1736 = Some(v1735);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2143.
                                                                                                    return v1736;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1598.1 == 0x13 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x15 {
                                                                                if v1601.1 == 0x17 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1D {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1716 = constructor_vec_pack(ctx, I16X8, v1562, v1563);
                                                                                                    let v1717 = constructor_output_reg(ctx, v1716);
                                                                                                    let v1718 = Some(v1717);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2131.
                                                                                                    return v1718;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x2 => {
                                    if v1577.1 == 0x3 {
                                        let v1580 = C::u8_pair_split(ctx, v1574.1);
                                        if v1580.0 == 0x6 {
                                            if v1580.1 == 0x7 {
                                                let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                if v1586.0 == 0xA {
                                                    if v1586.1 == 0xB {
                                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                                        if v1589.0 == 0xE {
                                                            if v1589.1 == 0xF {
                                                                let v1592 =
                                                                    C::u32_pair_split(ctx, v1568.1);
                                                                let v1595 =
                                                                    C::u16_pair_split(ctx, v1592.0);
                                                                let v1598 =
                                                                    C::u8_pair_split(ctx, v1595.0);
                                                                match v1598.0 {
                                                                    0x2 => {
                                                                        if v1598.1 == 0x3 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x6 {
                                                                                if v1601.1 == 0x7 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xE {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1731 = constructor_vec_pack(ctx, I32X4, v1562, v1555);
                                                                                                    let v1732 = constructor_output_reg(ctx, v1731);
                                                                                                    let v1733 = Some(v1732);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2141.
                                                                                                    return v1733;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1598.1 == 0x13 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x16 {
                                                                                if v1601.1 == 0x17 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1E {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1713 = constructor_vec_pack(ctx, I32X4, v1562, v1563);
                                                                                                    let v1714 = constructor_output_reg(ctx, v1713);
                                                                                                    let v1715 = Some(v1714);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2129.
                                                                                                    return v1715;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x4 => {
                                    if v1577.1 == 0x5 {
                                        let v1580 = C::u8_pair_split(ctx, v1574.1);
                                        if v1580.0 == 0x6 {
                                            if v1580.1 == 0x7 {
                                                let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                if v1586.0 == 0xC {
                                                    if v1586.1 == 0xD {
                                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                                        if v1589.0 == 0xE {
                                                            if v1589.1 == 0xF {
                                                                let v1592 =
                                                                    C::u32_pair_split(ctx, v1568.1);
                                                                let v1595 =
                                                                    C::u16_pair_split(ctx, v1592.0);
                                                                let v1598 =
                                                                    C::u8_pair_split(ctx, v1595.0);
                                                                match v1598.0 {
                                                                    0x4 => {
                                                                        if v1598.1 == 0x5 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x6 {
                                                                                if v1601.1 == 0x7 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xE {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1728 = constructor_vec_pack(ctx, I64X2, v1562, v1555);
                                                                                                    let v1729 = constructor_output_reg(ctx, v1728);
                                                                                                    let v1730 = Some(v1729);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2139.
                                                                                                    return v1730;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1598.1 == 0x15 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x16 {
                                                                                if v1601.1 == 0x17 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1E {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1710 = constructor_vec_pack(ctx, I64X2, v1562, v1563);
                                                                                                    let v1711 = constructor_output_reg(ctx, v1710);
                                                                                                    let v1712 = Some(v1711);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2127.
                                                                                                    return v1712;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x8 => {
                                    match v1577.1 {
                                        0x8 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x9 {
                                                if v1580.1 == 0x9 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0xA {
                                                        if v1586.1 == 0xA {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0xB {
                                                                if v1589.1 == 0xB {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0xC {
                                                                        if v1598.1 == 0xC {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0xD {
                                                                                if v1601.1 == 0xD {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xF {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1695 = constructor_vec_merge_low(ctx, I8X16, v1562, v1555);
                                                                                                    let v1696 = constructor_output_reg(ctx, v1695);
                                                                                                    let v1697 = Some(v1696);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2115.
                                                                                                    return v1697;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x9 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            match v1580.0 {
                                                0x8 => {
                                                    if v1580.1 == 0x9 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0xA {
                                                            if v1586.1 == 0xB {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0xA {
                                                                    if v1589.1 == 0xB {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0xC {
                                                                            if v1598.1 == 0xD {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0xC {
                                                                                    if v1601.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1607.1 == 0xF {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0xE {
                                                                                                    if v1610.1 == 0xF {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1692 = constructor_vec_merge_low(ctx, I16X8, v1562, v1555);
                                                                                                        let v1693 = constructor_output_reg(ctx, v1692);
                                                                                                        let v1694 = Some(v1693);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2113.
                                                                                                        return v1694;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0xA => {
                                                    if v1580.1 == 0xB {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        match v1586.0 {
                                                            0x8 => {
                                                                if v1586.1 == 0x9 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0xA {
                                                                        if v1589.1 == 0xB {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0xC {
                                                                                if v1598.1 == 0xD {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0xC {
                                                                                                if v1607.1 == 0xD {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0xE {
                                                                                                        if v1610.1 == 0xF {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1689 = constructor_vec_merge_low(ctx, I32X4, v1562, v1555);
                                                                                                            let v1690 = constructor_output_reg(ctx, v1689);
                                                                                                            let v1691 = Some(v1690);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2111.
                                                                                                            return v1691;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0xC => {
                                                                if v1586.1 == 0xD {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0xE {
                                                                        if v1589.1 == 0xF {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            match v1598.0 {
                                                                                0x0 => {
                                                                                    if v1598.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1601.1 == 0x3 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x4 {
                                                                                                    if v1607.1 == 0x5 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x6 {
                                                                                                            if v1610.1 == 0x7 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1797 = constructor_vec_permute_dw_imm(ctx, I8X16, v1562, 0x1, v1555, 0x0);
                                                                                                                let v1798 = constructor_output_reg(ctx, v1797);
                                                                                                                let v1799 = Some(v1798);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2191.
                                                                                                                return v1799;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1598.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1601.1 == 0xB {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0xC {
                                                                                                    if v1607.1 == 0xD {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0xE {
                                                                                                            if v1610.1 == 0xF {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1686 = constructor_vec_merge_low(ctx, I64X2, v1562, v1555);
                                                                                                                let v1687 = constructor_output_reg(ctx, v1686);
                                                                                                                let v1688 = Some(v1687);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2109.
                                                                                                                return v1688;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1598.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1601.1 == 0x13 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x14 {
                                                                                                    if v1607.1 == 0x15 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x16 {
                                                                                                            if v1610.1 == 0x17 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1785 = constructor_vec_permute_dw_imm(ctx, I8X16, v1562, 0x1, v1563, 0x0);
                                                                                                                let v1786 = constructor_output_reg(ctx, v1785);
                                                                                                                let v1787 = Some(v1786);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2183.
                                                                                                                return v1787;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1598.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1601.1 == 0x1B {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x1C {
                                                                                                    if v1607.1 == 0x1D {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x1E {
                                                                                                            if v1610.1 == 0x1F {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1662 = constructor_vec_merge_low(ctx, I64X2, v1562, v1563);
                                                                                                                let v1663 = constructor_output_reg(ctx, v1662);
                                                                                                                let v1664 = Some(v1663);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2093.
                                                                                                                return v1664;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1586.1 == 0x19 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x1A {
                                                                        if v1589.1 == 0x1B {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0xC {
                                                                                if v1598.1 == 0xD {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0xF
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0x1C {
                                                                                                if v1607.1 == 0x1D {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0x1E {
                                                                                                        if v1610.1 == 0x1F {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1665 = constructor_vec_merge_low(ctx, I32X4, v1562, v1563);
                                                                                                            let v1666 = constructor_output_reg(ctx, v1665);
                                                                                                            let v1667 = Some(v1666);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2095.
                                                                                                            return v1667;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1580.1 == 0x19 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0xA {
                                                            if v1586.1 == 0xB {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0x1A {
                                                                    if v1589.1 == 0x1B {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0xC {
                                                                            if v1598.1 == 0xD {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0x1C {
                                                                                    if v1601.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0xE
                                                                                        {
                                                                                            if v1607.1 == 0xF {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0x1E {
                                                                                                    if v1610.1 == 0x1F {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1668 = constructor_vec_merge_low(ctx, I16X8, v1562, v1563);
                                                                                                        let v1669 = constructor_output_reg(ctx, v1668);
                                                                                                        let v1670 = Some(v1669);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2097.
                                                                                                        return v1670;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        0x18 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x9 {
                                                if v1580.1 == 0x19 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0xA {
                                                        if v1586.1 == 0x1A {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0xB {
                                                                if v1589.1 == 0x1B {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0xC {
                                                                        if v1598.1 == 0x1C {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0xD {
                                                                                if v1601.1 == 0x1D {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0xE
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xF {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1562 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1671 = constructor_vec_merge_low(ctx, I8X16, v1562, v1563);
                                                                                                    let v1672 = constructor_output_reg(ctx, v1671);
                                                                                                    let v1673 = Some(v1672);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2099.
                                                                                                    return v1673;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x10 => {
                                    match v1577.1 {
                                        0x0 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x11 {
                                                if v1580.1 == 0x1 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0x12 {
                                                        if v1586.1 == 0x2 {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0x13 {
                                                                if v1589.1 == 0x3 {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0x14 {
                                                                        if v1598.1 == 0x4 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x15 {
                                                                                if v1601.1 == 0x5 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x6
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x17 {
                                                                                                if v1610.1 == 0x7 {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1635 = constructor_vec_merge_high(ctx, I8X16, v1625, v1555);
                                                                                                    let v1636 = constructor_output_reg(ctx, v1635);
                                                                                                    let v1637 = Some(v1636);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2073.
                                                                                                    return v1637;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x10 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x11 {
                                                if v1580.1 == 0x11 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0x12 {
                                                        if v1586.1 == 0x12 {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0x13 {
                                                                if v1589.1 == 0x13 {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0x14 {
                                                                        if v1598.1 == 0x14 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x15 {
                                                                                if v1601.1 == 0x15 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x16
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x17 {
                                                                                                if v1610.1 == 0x17 {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1659 = constructor_vec_merge_high(ctx, I8X16, v1625, v1563);
                                                                                                    let v1660 = constructor_output_reg(ctx, v1659);
                                                                                                    let v1661 = Some(v1660);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2089.
                                                                                                    return v1661;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x11 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            match v1580.0 {
                                                0x0 => {
                                                    if v1580.1 == 0x1 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0x12 {
                                                            if v1586.1 == 0x13 {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0x2 {
                                                                    if v1589.1 == 0x3 {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0x14 {
                                                                            if v1598.1 == 0x15 {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0x4 {
                                                                                    if v1601.1
                                                                                        == 0x5
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1607.1 == 0x17 {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0x6 {
                                                                                                    if v1610.1 == 0x7 {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1632 = constructor_vec_merge_high(ctx, I16X8, v1625, v1555);
                                                                                                        let v1633 = constructor_output_reg(ctx, v1632);
                                                                                                        let v1634 = Some(v1633);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2071.
                                                                                                        return v1634;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x10 => {
                                                    if v1580.1 == 0x11 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0x12 {
                                                            if v1586.1 == 0x13 {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0x12 {
                                                                    if v1589.1 == 0x13 {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0x14 {
                                                                            if v1598.1 == 0x15 {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0x14 {
                                                                                    if v1601.1
                                                                                        == 0x15
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0x16
                                                                                        {
                                                                                            if v1607.1 == 0x17 {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0x16 {
                                                                                                    if v1610.1 == 0x17 {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1656 = constructor_vec_merge_high(ctx, I16X8, v1625, v1563);
                                                                                                        let v1657 = constructor_output_reg(ctx, v1656);
                                                                                                        let v1658 = Some(v1657);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2087.
                                                                                                        return v1658;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x12 => {
                                                    if v1580.1 == 0x13 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        match v1586.0 {
                                                            0x0 => {
                                                                if v1586.1 == 0x1 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x2 {
                                                                        if v1589.1 == 0x3 {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0x14 {
                                                                                if v1598.1 == 0x15 {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0x4 {
                                                                                                if v1607.1 == 0x5 {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0x6 {
                                                                                                        if v1610.1 == 0x7 {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1629 = constructor_vec_merge_high(ctx, I32X4, v1625, v1555);
                                                                                                            let v1630 = constructor_output_reg(ctx, v1629);
                                                                                                            let v1631 = Some(v1630);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2069.
                                                                                                            return v1631;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x10 => {
                                                                if v1586.1 == 0x11 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x12 {
                                                                        if v1589.1 == 0x13 {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0x14 {
                                                                                if v1598.1 == 0x15 {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0x16
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0x17
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0x14 {
                                                                                                if v1607.1 == 0x15 {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0x16 {
                                                                                                        if v1610.1 == 0x17 {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1653 = constructor_vec_merge_high(ctx, I32X4, v1625, v1563);
                                                                                                            let v1654 = constructor_output_reg(ctx, v1653);
                                                                                                            let v1655 = Some(v1654);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2085.
                                                                                                            return v1655;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x14 => {
                                                                if v1586.1 == 0x15 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x16 {
                                                                        if v1589.1 == 0x17 {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            match v1598.0 {
                                                                                0x0 => {
                                                                                    if v1598.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1601.1 == 0x3 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x4 {
                                                                                                    if v1607.1 == 0x5 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x6 {
                                                                                                            if v1610.1 == 0x7 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1626 = constructor_vec_merge_high(ctx, I64X2, v1625, v1555);
                                                                                                                let v1627 = constructor_output_reg(ctx, v1626);
                                                                                                                let v1628 = Some(v1627);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2067.
                                                                                                                return v1628;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1598.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1601.1 == 0xB {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0xC {
                                                                                                    if v1607.1 == 0xD {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0xE {
                                                                                                            if v1610.1 == 0xF {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1788 = constructor_vec_permute_dw_imm(ctx, I8X16, v1625, 0x0, v1555, 0x1);
                                                                                                                let v1789 = constructor_output_reg(ctx, v1788);
                                                                                                                let v1790 = Some(v1789);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2185.
                                                                                                                return v1790;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1598.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1601.1 == 0x13 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x14 {
                                                                                                    if v1607.1 == 0x15 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x16 {
                                                                                                            if v1610.1 == 0x17 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1650 = constructor_vec_merge_high(ctx, I64X2, v1625, v1563);
                                                                                                                let v1651 = constructor_output_reg(ctx, v1650);
                                                                                                                let v1652 = Some(v1651);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2083.
                                                                                                                return v1652;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1598.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1601.1 == 0x1B {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x1C {
                                                                                                    if v1607.1 == 0x1D {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x1E {
                                                                                                            if v1610.1 == 0x1F {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1800 = constructor_vec_permute_dw_imm(ctx, I8X16, v1625, 0x0, v1563, 0x1);
                                                                                                                let v1801 = constructor_output_reg(ctx, v1800);
                                                                                                                let v1802 = Some(v1801);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2193.
                                                                                                                return v1802;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                0x11 => {
                                    if v1577.1 == 0x13 {
                                        let v1580 = C::u8_pair_split(ctx, v1574.1);
                                        if v1580.0 == 0x15 {
                                            if v1580.1 == 0x17 {
                                                let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                if v1586.0 == 0x19 {
                                                    if v1586.1 == 0x1B {
                                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                                        if v1589.0 == 0x1D {
                                                            if v1589.1 == 0x1F {
                                                                let v1592 =
                                                                    C::u32_pair_split(ctx, v1568.1);
                                                                let v1595 =
                                                                    C::u16_pair_split(ctx, v1592.0);
                                                                let v1598 =
                                                                    C::u8_pair_split(ctx, v1595.0);
                                                                match v1598.0 {
                                                                    0x1 => {
                                                                        if v1598.1 == 0x3 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x5 {
                                                                                if v1601.1 == 0x7 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x9
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xD {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1725 = constructor_vec_pack(ctx, I16X8, v1625, v1555);
                                                                                                    let v1726 = constructor_output_reg(ctx, v1725);
                                                                                                    let v1727 = Some(v1726);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2137.
                                                                                                    return v1727;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x11 => {
                                                                        if v1598.1 == 0x13 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x15 {
                                                                                if v1601.1 == 0x17 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x19
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1D {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1743 = constructor_vec_pack(ctx, I16X8, v1625, v1563);
                                                                                                    let v1744 = constructor_output_reg(ctx, v1743);
                                                                                                    let v1745 = Some(v1744);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2149.
                                                                                                    return v1745;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x12 => {
                                    if v1577.1 == 0x13 {
                                        let v1580 = C::u8_pair_split(ctx, v1574.1);
                                        if v1580.0 == 0x16 {
                                            if v1580.1 == 0x17 {
                                                let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                if v1586.0 == 0x1A {
                                                    if v1586.1 == 0x1B {
                                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                                        if v1589.0 == 0x1E {
                                                            if v1589.1 == 0x1F {
                                                                let v1592 =
                                                                    C::u32_pair_split(ctx, v1568.1);
                                                                let v1595 =
                                                                    C::u16_pair_split(ctx, v1592.0);
                                                                let v1598 =
                                                                    C::u8_pair_split(ctx, v1595.0);
                                                                match v1598.0 {
                                                                    0x2 => {
                                                                        if v1598.1 == 0x3 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x6 {
                                                                                if v1601.1 == 0x7 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0xA
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xB
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xE {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1722 = constructor_vec_pack(ctx, I32X4, v1625, v1555);
                                                                                                    let v1723 = constructor_output_reg(ctx, v1722);
                                                                                                    let v1724 = Some(v1723);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2135.
                                                                                                    return v1724;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x12 => {
                                                                        if v1598.1 == 0x13 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x16 {
                                                                                if v1601.1 == 0x17 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x1A
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1B
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1E {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1740 = constructor_vec_pack(ctx, I32X4, v1625, v1563);
                                                                                                    let v1741 = constructor_output_reg(ctx, v1740);
                                                                                                    let v1742 = Some(v1741);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2147.
                                                                                                    return v1742;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x14 => {
                                    if v1577.1 == 0x15 {
                                        let v1580 = C::u8_pair_split(ctx, v1574.1);
                                        if v1580.0 == 0x16 {
                                            if v1580.1 == 0x17 {
                                                let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                if v1586.0 == 0x1C {
                                                    if v1586.1 == 0x1D {
                                                        let v1589 = C::u8_pair_split(ctx, v1583.1);
                                                        if v1589.0 == 0x1E {
                                                            if v1589.1 == 0x1F {
                                                                let v1592 =
                                                                    C::u32_pair_split(ctx, v1568.1);
                                                                let v1595 =
                                                                    C::u16_pair_split(ctx, v1592.0);
                                                                let v1598 =
                                                                    C::u8_pair_split(ctx, v1595.0);
                                                                match v1598.0 {
                                                                    0x4 => {
                                                                        if v1598.1 == 0x5 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x6 {
                                                                                if v1601.1 == 0x7 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0xC
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xD
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0xE {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1719 = constructor_vec_pack(ctx, I64X2, v1625, v1555);
                                                                                                    let v1720 = constructor_output_reg(ctx, v1719);
                                                                                                    let v1721 = Some(v1720);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2133.
                                                                                                    return v1721;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    0x14 => {
                                                                        if v1598.1 == 0x15 {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x16 {
                                                                                if v1601.1 == 0x17 {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x1C
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1D
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1E {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1737 = constructor_vec_pack(ctx, I64X2, v1625, v1563);
                                                                                                    let v1738 = constructor_output_reg(ctx, v1737);
                                                                                                    let v1739 = Some(v1738);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2145.
                                                                                                    return v1739;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                    _ => {}
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                0x18 => {
                                    match v1577.1 {
                                        0x8 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x19 {
                                                if v1580.1 == 0x9 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0x1A {
                                                        if v1586.1 == 0xA {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0x1B {
                                                                if v1589.1 == 0xB {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0x1C {
                                                                        if v1598.1 == 0xC {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x1D {
                                                                                if v1601.1 == 0xD {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0xE
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1F {
                                                                                                if v1610.1 == 0xF {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                    let v1683 = constructor_vec_merge_low(ctx, I8X16, v1625, v1555);
                                                                                                    let v1684 = constructor_output_reg(ctx, v1683);
                                                                                                    let v1685 = Some(v1684);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2107.
                                                                                                    return v1685;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x18 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            if v1580.0 == 0x19 {
                                                if v1580.1 == 0x19 {
                                                    let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                    let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                    if v1586.0 == 0x1A {
                                                        if v1586.1 == 0x1A {
                                                            let v1589 =
                                                                C::u8_pair_split(ctx, v1583.1);
                                                            if v1589.0 == 0x1B {
                                                                if v1589.1 == 0x1B {
                                                                    let v1592 = C::u32_pair_split(
                                                                        ctx, v1568.1,
                                                                    );
                                                                    let v1595 = C::u16_pair_split(
                                                                        ctx, v1592.0,
                                                                    );
                                                                    let v1598 = C::u8_pair_split(
                                                                        ctx, v1595.0,
                                                                    );
                                                                    if v1598.0 == 0x1C {
                                                                        if v1598.1 == 0x1C {
                                                                            let v1601 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.1,
                                                                                );
                                                                            if v1601.0 == 0x1D {
                                                                                if v1601.1 == 0x1D {
                                                                                    let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                    let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                    if v1607.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1607.1
                                                                                            == 0x1E
                                                                                        {
                                                                                            let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                            if v1610.0 == 0x1F {
                                                                                                if v1610.1 == 0x1F {
                                                                                                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                    let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                    let v1707 = constructor_vec_merge_low(ctx, I8X16, v1625, v1563);
                                                                                                    let v1708 = constructor_output_reg(ctx, v1707);
                                                                                                    let v1709 = Some(v1708);
                                                                                                    // Rule at src/isa/s390x/lower.isle line 2123.
                                                                                                    return v1709;
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        0x19 => {
                                            let v1580 = C::u8_pair_split(ctx, v1574.1);
                                            match v1580.0 {
                                                0x8 => {
                                                    if v1580.1 == 0x9 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0x1A {
                                                            if v1586.1 == 0x1B {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0xA {
                                                                    if v1589.1 == 0xB {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0x1C {
                                                                            if v1598.1 == 0x1D {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0xC {
                                                                                    if v1601.1
                                                                                        == 0xD
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1607.1 == 0x1F {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0xE {
                                                                                                    if v1610.1 == 0xF {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                        let v1680 = constructor_vec_merge_low(ctx, I16X8, v1625, v1555);
                                                                                                        let v1681 = constructor_output_reg(ctx, v1680);
                                                                                                        let v1682 = Some(v1681);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2105.
                                                                                                        return v1682;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x18 => {
                                                    if v1580.1 == 0x19 {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        if v1586.0 == 0x1A {
                                                            if v1586.1 == 0x1B {
                                                                let v1589 =
                                                                    C::u8_pair_split(ctx, v1583.1);
                                                                if v1589.0 == 0x1A {
                                                                    if v1589.1 == 0x1B {
                                                                        let v1592 =
                                                                            C::u32_pair_split(
                                                                                ctx, v1568.1,
                                                                            );
                                                                        let v1595 =
                                                                            C::u16_pair_split(
                                                                                ctx, v1592.0,
                                                                            );
                                                                        let v1598 =
                                                                            C::u8_pair_split(
                                                                                ctx, v1595.0,
                                                                            );
                                                                        if v1598.0 == 0x1C {
                                                                            if v1598.1 == 0x1D {
                                                                                let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                if v1601.0 == 0x1C {
                                                                                    if v1601.1
                                                                                        == 0x1D
                                                                                    {
                                                                                        let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                        let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                        if v1607.0
                                                                                            == 0x1E
                                                                                        {
                                                                                            if v1607.1 == 0x1F {
                                                                                                let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                if v1610.0 == 0x1E {
                                                                                                    if v1610.1 == 0x1F {
                                                                                                        let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                        let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                        let v1704 = constructor_vec_merge_low(ctx, I16X8, v1625, v1563);
                                                                                                        let v1705 = constructor_output_reg(ctx, v1704);
                                                                                                        let v1706 = Some(v1705);
                                                                                                        // Rule at src/isa/s390x/lower.isle line 2121.
                                                                                                        return v1706;
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                0x1A => {
                                                    if v1580.1 == 0x1B {
                                                        let v1583 = C::u16_pair_split(ctx, v1571.1);
                                                        let v1586 = C::u8_pair_split(ctx, v1583.0);
                                                        match v1586.0 {
                                                            0x8 => {
                                                                if v1586.1 == 0x9 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0xA {
                                                                        if v1589.1 == 0xB {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0x1C {
                                                                                if v1598.1 == 0x1D {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0xC {
                                                                                                if v1607.1 == 0xD {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0xE {
                                                                                                        if v1610.1 == 0xF {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                            let v1677 = constructor_vec_merge_low(ctx, I32X4, v1625, v1555);
                                                                                                            let v1678 = constructor_output_reg(ctx, v1677);
                                                                                                            let v1679 = Some(v1678);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2103.
                                                                                                            return v1679;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x18 => {
                                                                if v1586.1 == 0x19 {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x1A {
                                                                        if v1589.1 == 0x1B {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            if v1598.0 == 0x1C {
                                                                                if v1598.1 == 0x1D {
                                                                                    let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                    if v1601.0
                                                                                        == 0x1E
                                                                                    {
                                                                                        if v1601.1
                                                                                            == 0x1F
                                                                                        {
                                                                                            let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                            let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                            if v1607.0 == 0x1C {
                                                                                                if v1607.1 == 0x1D {
                                                                                                    let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                    if v1610.0 == 0x1E {
                                                                                                        if v1610.1 == 0x1F {
                                                                                                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                            let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                            let v1701 = constructor_vec_merge_low(ctx, I32X4, v1625, v1563);
                                                                                                            let v1702 = constructor_output_reg(ctx, v1701);
                                                                                                            let v1703 = Some(v1702);
                                                                                                            // Rule at src/isa/s390x/lower.isle line 2119.
                                                                                                            return v1703;
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            0x1C => {
                                                                if v1586.1 == 0x1D {
                                                                    let v1589 = C::u8_pair_split(
                                                                        ctx, v1583.1,
                                                                    );
                                                                    if v1589.0 == 0x1E {
                                                                        if v1589.1 == 0x1F {
                                                                            let v1592 =
                                                                                C::u32_pair_split(
                                                                                    ctx, v1568.1,
                                                                                );
                                                                            let v1595 =
                                                                                C::u16_pair_split(
                                                                                    ctx, v1592.0,
                                                                                );
                                                                            let v1598 =
                                                                                C::u8_pair_split(
                                                                                    ctx, v1595.0,
                                                                                );
                                                                            match v1598.0 {
                                                                                0x0 => {
                                                                                    if v1598.1
                                                                                        == 0x1
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x2
                                                                                        {
                                                                                            if v1601.1 == 0x3 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x4 {
                                                                                                    if v1607.1 == 0x5 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x6 {
                                                                                                            if v1610.1 == 0x7 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1791 = constructor_vec_permute_dw_imm(ctx, I8X16, v1625, 0x1, v1555, 0x0);
                                                                                                                let v1792 = constructor_output_reg(ctx, v1791);
                                                                                                                let v1793 = Some(v1792);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2187.
                                                                                                                return v1793;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x8 => {
                                                                                    if v1598.1
                                                                                        == 0x9
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0xA
                                                                                        {
                                                                                            if v1601.1 == 0xB {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0xC {
                                                                                                    if v1607.1 == 0xD {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0xE {
                                                                                                            if v1610.1 == 0xF {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1555 = C::put_in_reg(ctx, v1546.0);
                                                                                                                let v1674 = constructor_vec_merge_low(ctx, I64X2, v1625, v1555);
                                                                                                                let v1675 = constructor_output_reg(ctx, v1674);
                                                                                                                let v1676 = Some(v1675);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2101.
                                                                                                                return v1676;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x10 => {
                                                                                    if v1598.1
                                                                                        == 0x11
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x12
                                                                                        {
                                                                                            if v1601.1 == 0x13 {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x14 {
                                                                                                    if v1607.1 == 0x15 {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x16 {
                                                                                                            if v1610.1 == 0x17 {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1803 = constructor_vec_permute_dw_imm(ctx, I8X16, v1625, 0x1, v1563, 0x0);
                                                                                                                let v1804 = constructor_output_reg(ctx, v1803);
                                                                                                                let v1805 = Some(v1804);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2195.
                                                                                                                return v1805;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                0x18 => {
                                                                                    if v1598.1
                                                                                        == 0x19
                                                                                    {
                                                                                        let v1601 = C::u8_pair_split(ctx, v1595.1);
                                                                                        if v1601.0
                                                                                            == 0x1A
                                                                                        {
                                                                                            if v1601.1 == 0x1B {
                                                                                                let v1604 = C::u16_pair_split(ctx, v1592.1);
                                                                                                let v1607 = C::u8_pair_split(ctx, v1604.0);
                                                                                                if v1607.0 == 0x1C {
                                                                                                    if v1607.1 == 0x1D {
                                                                                                        let v1610 = C::u8_pair_split(ctx, v1604.1);
                                                                                                        if v1610.0 == 0x1E {
                                                                                                            if v1610.1 == 0x1F {
                                                                                                                let v1546 = C::unpack_value_array_2(ctx, v1544);
                                                                                                                let v1625 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1563 = C::put_in_reg(ctx, v1546.1);
                                                                                                                let v1698 = constructor_vec_merge_low(ctx, I64X2, v1625, v1563);
                                                                                                                let v1699 = constructor_output_reg(ctx, v1698);
                                                                                                                let v1700 = Some(v1699);
                                                                                                                // Rule at src/isa/s390x/lower.isle line 2117.
                                                                                                                return v1700;
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                _ => {}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            _ => {}
                                                        }
                                                    }
                                                }
                                                _ => {}
                                            }
                                        }
                                        _ => {}
                                    }
                                }
                                _ => {}
                            }
                            let v1546 = C::unpack_value_array_2(ctx, v1544);
                            let v1562 = C::put_in_reg(ctx, v1546.0);
                            let v1563 = C::put_in_reg(ctx, v1546.1);
                            let v1564 = constructor_vec_imm(ctx, I8X16, v1551.0);
                            let v1565 = constructor_vec_permute(ctx, I8X16, v1562, v1563, v1564);
                            let v1566 = constructor_output_reg(ctx, v1565);
                            let v1567 = Some(v1566);
                            // Rule at src/isa/s390x/lower.isle line 2055.
                            return v1567;
                        }
                        _ => {}
                    }
                    let v1554 = constructor_vec_imm_byte_mask(ctx, I8X16, v1551.1);
                    let v1546 = C::unpack_value_array_2(ctx, v1544);
                    let v1555 = C::put_in_reg(ctx, v1546.0);
                    let v1556 = C::put_in_reg(ctx, v1546.1);
                    let v1557 = constructor_vec_imm(ctx, I8X16, v1551.0);
                    let v1558 = constructor_vec_permute(ctx, I8X16, v1555, v1556, v1557);
                    let v1559 = constructor_vec_and(ctx, I8X16, v1554, v1558);
                    let v1560 = constructor_output_reg(ctx, v1559);
                    let v1561 = Some(v1560);
                    // Rule at src/isa/s390x/lower.isle line 2050.
                    return v1561;
                }
            }
        }
        &InstructionData::StackLoad {
            opcode: ref v1822,
            stack_slot: v1823,
            offset: v1824,
        } => {
            if let &Opcode::StackAddr = v1822 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v1825 = constructor_stack_addr_impl(ctx, v3, v1823, v1824);
                    let v1826 = constructor_output_reg(ctx, v1825);
                    let v1827 = Some(v1826);
                    // Rule at src/isa/s390x/lower.isle line 2237.
                    return v1827;
                }
            }
        }
        &InstructionData::Store {
            opcode: ref v1447,
            args: ref v1448,
            flags: v1449,
            offset: v1450,
        } => {
            match v1447 {
                &Opcode::Store => {
                    let v1451 = C::unpack_value_array_2(ctx, v1448);
                    let v1454 = C::def_inst(ctx, v1451.0);
                    if let Some(v1455) = v1454 {
                        let v1456 = &C::inst_data(ctx, v1455);
                        if let &InstructionData::BinaryImm8 {
                            opcode: ref v1457,
                            arg: v1458,
                            imm: v1459,
                        } = v1456
                        {
                            if let &Opcode::Extractlane = v1457 {
                                let v1462 = C::bigendian(ctx, v1449);
                                if let Some(v1463) = v1462 {
                                    let v1464 = C::put_in_reg(ctx, v1458);
                                    let v1465 =
                                        &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                    let v1460 = C::value_type(ctx, v1458);
                                    let v1461 = C::u8_from_uimm8(ctx, v1459);
                                    let v1466 = C::be_lane_idx(ctx, v1460, v1461);
                                    let v1467 = &constructor_vec_store_lane(
                                        ctx, v1460, v1464, v1465, v1466,
                                    );
                                    let v1468 = constructor_side_effect(ctx, v1467);
                                    let v1469 = Some(v1468);
                                    // Rule at src/isa/s390x/lower.isle line 1893.
                                    return v1469;
                                }
                                let v1470 = C::littleendian(ctx, v1449);
                                if let Some(v1471) = v1470 {
                                    let v1464 = C::put_in_reg(ctx, v1458);
                                    let v1465 =
                                        &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                    let v1460 = C::value_type(ctx, v1458);
                                    let v1461 = C::u8_from_uimm8(ctx, v1459);
                                    let v1466 = C::be_lane_idx(ctx, v1460, v1461);
                                    let v1472 = &constructor_vec_store_lane_little(
                                        ctx, v1460, v1464, v1465, v1466,
                                    );
                                    let v1473 = constructor_side_effect(ctx, v1472);
                                    let v1474 = Some(v1473);
                                    // Rule at src/isa/s390x/lower.isle line 1900.
                                    return v1474;
                                }
                            }
                        }
                    }
                    let v1806 = &C::lane_order(ctx);
                    match v1806 {
                        &LaneOrder::LittleEndian => {
                            let v1996 = C::value_type(ctx, v1451.0);
                            let v2022 = C::vr128_ty(ctx, v1996);
                            if let Some(v2023) = v2022 {
                                let v1462 = C::bigendian(ctx, v1449);
                                if let Some(v1463) = v1462 {
                                    let v2009 = C::put_in_reg(ctx, v1451.0);
                                    let v2030 = &constructor_vec_store_elt_rev(
                                        ctx, v2023, v2009, v1449, v1451.1, v1450,
                                    );
                                    let v2031 = constructor_side_effect(ctx, v2030);
                                    let v2032 = Some(v2031);
                                    // Rule at src/isa/s390x/lower.isle line 2678.
                                    return v2032;
                                }
                                let v1470 = C::littleendian(ctx, v1449);
                                if let Some(v1471) = v1470 {
                                    let v2009 = C::put_in_reg(ctx, v1451.0);
                                    let v2033 = &constructor_vec_store_full_rev(
                                        ctx, v2023, v2009, v1449, v1451.1, v1450,
                                    );
                                    let v2034 = constructor_side_effect(ctx, v2033);
                                    let v2035 = Some(v2034);
                                    // Rule at src/isa/s390x/lower.isle line 2684.
                                    return v2035;
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v1996 = C::value_type(ctx, v1451.0);
                            let v2022 = C::vr128_ty(ctx, v1996);
                            if let Some(v2023) = v2022 {
                                let v1462 = C::bigendian(ctx, v1449);
                                if let Some(v1463) = v1462 {
                                    let v2009 = C::put_in_reg(ctx, v1451.0);
                                    let v1465 =
                                        &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                    let v2024 = &constructor_vec_store(ctx, v2009, v1465);
                                    let v2025 = constructor_side_effect(ctx, v2024);
                                    let v2026 = Some(v2025);
                                    // Rule at src/isa/s390x/lower.isle line 2666.
                                    return v2026;
                                }
                                let v1470 = C::littleendian(ctx, v1449);
                                if let Some(v1471) = v1470 {
                                    let v2009 = C::put_in_reg(ctx, v1451.0);
                                    let v2027 = &constructor_vec_store_byte_rev(
                                        ctx, v2023, v2009, v1449, v1451.1, v1450,
                                    );
                                    let v2028 = constructor_side_effect(ctx, v2027);
                                    let v2029 = Some(v2028);
                                    // Rule at src/isa/s390x/lower.isle line 2672.
                                    return v2029;
                                }
                            }
                        }
                        _ => {}
                    }
                    let v1996 = C::value_type(ctx, v1451.0);
                    match v1996 {
                        I8 => {
                            let v1997 =
                                &constructor_istore8_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                            let v1998 = constructor_side_effect(ctx, v1997);
                            let v1999 = Some(v1998);
                            // Rule at src/isa/s390x/lower.isle line 2626.
                            return v1999;
                        }
                        I16 => {
                            let v2000 =
                                &constructor_istore16_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                            let v2001 = constructor_side_effect(ctx, v2000);
                            let v2002 = Some(v2001);
                            // Rule at src/isa/s390x/lower.isle line 2630.
                            return v2002;
                        }
                        I32 => {
                            let v2003 =
                                &constructor_istore32_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                            let v2004 = constructor_side_effect(ctx, v2003);
                            let v2005 = Some(v2004);
                            // Rule at src/isa/s390x/lower.isle line 2634.
                            return v2005;
                        }
                        I64 => {
                            let v2006 =
                                &constructor_istore64_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                            let v2007 = constructor_side_effect(ctx, v2006);
                            let v2008 = Some(v2007);
                            // Rule at src/isa/s390x/lower.isle line 2638.
                            return v2008;
                        }
                        F32 => {
                            let v1470 = C::littleendian(ctx, v1449);
                            if let Some(v1471) = v1470 {
                                let v2009 = C::put_in_reg(ctx, v1451.0);
                                let v1465 = &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                let v2013 = &constructor_vec_store_lane_little(
                                    ctx, F32X4, v2009, v1465, 0x0,
                                );
                                let v2014 = constructor_side_effect(ctx, v2013);
                                let v2015 = Some(v2014);
                                // Rule at src/isa/s390x/lower.isle line 2648.
                                return v2015;
                            }
                            let v1462 = C::bigendian(ctx, v1449);
                            if let Some(v1463) = v1462 {
                                let v2009 = C::put_in_reg(ctx, v1451.0);
                                let v1465 = &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                let v2010 =
                                    &constructor_vec_store_lane(ctx, F32X4, v2009, v1465, 0x0);
                                let v2011 = constructor_side_effect(ctx, v2010);
                                let v2012 = Some(v2011);
                                // Rule at src/isa/s390x/lower.isle line 2642.
                                return v2012;
                            }
                        }
                        F64 => {
                            let v1470 = C::littleendian(ctx, v1449);
                            if let Some(v1471) = v1470 {
                                let v2009 = C::put_in_reg(ctx, v1451.0);
                                let v1465 = &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                let v2019 = &constructor_vec_store_lane_little(
                                    ctx, F64X2, v2009, v1465, 0x0,
                                );
                                let v2020 = constructor_side_effect(ctx, v2019);
                                let v2021 = Some(v2020);
                                // Rule at src/isa/s390x/lower.isle line 2660.
                                return v2021;
                            }
                            let v1462 = C::bigendian(ctx, v1449);
                            if let Some(v1463) = v1462 {
                                let v2009 = C::put_in_reg(ctx, v1451.0);
                                let v1465 = &constructor_lower_address(ctx, v1449, v1451.1, v1450);
                                let v2016 =
                                    &constructor_vec_store_lane(ctx, F64X2, v2009, v1465, 0x0);
                                let v2017 = constructor_side_effect(ctx, v2016);
                                let v2018 = Some(v2017);
                                // Rule at src/isa/s390x/lower.isle line 2654.
                                return v2018;
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Istore8 => {
                    let v1451 = C::unpack_value_array_2(ctx, v1448);
                    let v1997 = &constructor_istore8_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                    let v1998 = constructor_side_effect(ctx, v1997);
                    let v1999 = Some(v1998);
                    // Rule at src/isa/s390x/lower.isle line 2778.
                    return v1999;
                }
                &Opcode::Istore16 => {
                    let v1451 = C::unpack_value_array_2(ctx, v1448);
                    let v2000 = &constructor_istore16_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                    let v2001 = constructor_side_effect(ctx, v2000);
                    let v2002 = Some(v2001);
                    // Rule at src/isa/s390x/lower.isle line 2796.
                    return v2002;
                }
                &Opcode::Istore32 => {
                    let v1451 = C::unpack_value_array_2(ctx, v1448);
                    let v2003 = &constructor_istore32_impl(ctx, v1449, v1451.0, v1451.1, v1450);
                    let v2004 = constructor_side_effect(ctx, v2003);
                    let v2005 = Some(v2004);
                    // Rule at src/isa/s390x/lower.isle line 2822.
                    return v2005;
                }
                _ => {}
            }
        }
        &InstructionData::StoreNoOffset {
            opcode: ref v2168,
            args: ref v2169,
            flags: v2170,
        } => {
            if let &Opcode::AtomicStore = v2168 {
                let v2171 = C::unpack_value_array_2(ctx, v2169);
                let v2174 = C::value_type(ctx, v2171.0);
                match v2174 {
                    I8 => {
                        let v2141 = C::zero_offset(ctx);
                        let v2175 = &constructor_istore8_impl(ctx, v2170, v2171.0, v2171.1, v2141);
                        let v2176 = constructor_atomic_store_impl(ctx, v2175);
                        let v2177 = Some(v2176);
                        // Rule at src/isa/s390x/lower.isle line 3228.
                        return v2177;
                    }
                    I16 => {
                        let v2141 = C::zero_offset(ctx);
                        let v2178 = &constructor_istore16_impl(ctx, v2170, v2171.0, v2171.1, v2141);
                        let v2179 = constructor_atomic_store_impl(ctx, v2178);
                        let v2180 = Some(v2179);
                        // Rule at src/isa/s390x/lower.isle line 3232.
                        return v2180;
                    }
                    I32 => {
                        let v2141 = C::zero_offset(ctx);
                        let v2181 = &constructor_istore32_impl(ctx, v2170, v2171.0, v2171.1, v2141);
                        let v2182 = constructor_atomic_store_impl(ctx, v2181);
                        let v2183 = Some(v2182);
                        // Rule at src/isa/s390x/lower.isle line 3236.
                        return v2183;
                    }
                    I64 => {
                        let v2141 = C::zero_offset(ctx);
                        let v2184 = &constructor_istore64_impl(ctx, v2170, v2171.0, v2171.1, v2141);
                        let v2185 = constructor_atomic_store_impl(ctx, v2184);
                        let v2186 = Some(v2185);
                        // Rule at src/isa/s390x/lower.isle line 3240.
                        return v2186;
                    }
                    _ => {}
                }
            }
        }
        &InstructionData::Ternary {
            opcode: ref v923,
            args: ref v924,
        } => {
            match v923 {
                &Opcode::Select => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v1358 = C::ty_scalar_float(ctx, v3);
                        if let Some(v1359) = v1358 {
                            let v925 = C::unpack_value_array_3(ctx, v924);
                            let v2371 = C::maybe_uextend(ctx, v925.0);
                            if let Some(v2372) = v2371 {
                                let v2373 = C::def_inst(ctx, v2372);
                                if let Some(v2374) = v2373 {
                                    let v2375 = &C::inst_data(ctx, v2374);
                                    if let &InstructionData::FloatCompare {
                                        opcode: ref v2376,
                                        args: ref v2377,
                                        cond: ref v2378,
                                    } = v2375
                                    {
                                        if let &Opcode::Fcmp = v2376 {
                                            if let &FloatCC::LessThan = v2378 {
                                                let v2379 = C::unpack_value_array_2(ctx, v2377);
                                                if v925.1 == v2379.1 {
                                                    if v925.2 == v2379.0 {
                                                        let v2387 = C::put_in_reg(ctx, v2379.0);
                                                        let v2388 = C::put_in_reg(ctx, v2379.1);
                                                        let v2389 = constructor_fmax_pseudo_reg(
                                                            ctx, v1359, v2387, v2388,
                                                        );
                                                        let v2390 =
                                                            constructor_output_reg(ctx, v2389);
                                                        let v2391 = Some(v2390);
                                                        // Rule at src/isa/s390x/lower.isle line 3700.
                                                        return v2391;
                                                    }
                                                }
                                                if v925.1 == v2379.0 {
                                                    if v925.2 == v2379.1 {
                                                        let v2382 = C::put_in_reg(ctx, v2379.1);
                                                        let v2383 = C::put_in_reg(ctx, v2379.0);
                                                        let v2384 = constructor_fmin_pseudo_reg(
                                                            ctx, v1359, v2382, v2383,
                                                        );
                                                        let v2385 =
                                                            constructor_output_reg(ctx, v2384);
                                                        let v2386 = Some(v2385);
                                                        // Rule at src/isa/s390x/lower.isle line 3698.
                                                        return v2386;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v925 = C::unpack_value_array_3(ctx, v924);
                        let v2367 = &constructor_value_nonzero(ctx, v925.0);
                        let v930 = C::put_in_reg(ctx, v925.1);
                        let v1135 = C::put_in_reg(ctx, v925.2);
                        let v2368 = constructor_select_bool_reg(ctx, v3, v2367, v930, v1135);
                        let v2369 = constructor_output_reg(ctx, v2368);
                        let v2370 = Some(v2369);
                        // Rule at src/isa/s390x/lower.isle line 3693.
                        return v2370;
                    }
                }
                &Opcode::SelectSpectreGuard => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v925 = C::unpack_value_array_3(ctx, v924);
                        let v2367 = &constructor_value_nonzero(ctx, v925.0);
                        let v930 = C::put_in_reg(ctx, v925.1);
                        let v1135 = C::put_in_reg(ctx, v925.2);
                        let v3 = C::value_type(ctx, v2);
                        let v2368 = constructor_select_bool_reg(ctx, v3, v2367, v930, v1135);
                        let v2369 = constructor_output_reg(ctx, v2368);
                        let v2370 = Some(v2369);
                        // Rule at src/isa/s390x/lower.isle line 3709.
                        return v2370;
                    }
                }
                &Opcode::Bitselect => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v925 = C::unpack_value_array_3(ctx, v924);
                            let v948 = C::def_inst(ctx, v925.0);
                            if let Some(v949) = v948 {
                                let v950 = &C::inst_data(ctx, v949);
                                if let &InstructionData::LoadNoOffset {
                                    opcode: ref v951,
                                    arg: v952,
                                    flags: v953,
                                } = v950
                                {
                                    if let &Opcode::Bitcast = v951 {
                                        let v954 = C::def_inst(ctx, v952);
                                        if let Some(v955) = v954 {
                                            let v956 = &C::inst_data(ctx, v955);
                                            if let &InstructionData::FloatCompare {
                                                opcode: ref v957,
                                                args: ref v958,
                                                cond: ref v959,
                                            } = v956
                                            {
                                                if let &Opcode::Fcmp = v957 {
                                                    if let &FloatCC::LessThan = v959 {
                                                        let v960 =
                                                            C::unpack_value_array_2(ctx, v958);
                                                        if v925.1 == v960.1 {
                                                            if v925.2 == v960.0 {
                                                                let v968 =
                                                                    C::put_in_reg(ctx, v960.0);
                                                                let v969 =
                                                                    C::put_in_reg(ctx, v960.1);
                                                                let v970 =
                                                                    constructor_fmax_pseudo_reg(
                                                                        ctx, v170, v968, v969,
                                                                    );
                                                                let v971 = constructor_output_reg(
                                                                    ctx, v970,
                                                                );
                                                                let v972 = Some(v971);
                                                                // Rule at src/isa/s390x/lower.isle line 1142.
                                                                return v972;
                                                            }
                                                        }
                                                        if v925.1 == v960.0 {
                                                            if v925.2 == v960.1 {
                                                                let v963 =
                                                                    C::put_in_reg(ctx, v960.1);
                                                                let v964 =
                                                                    C::put_in_reg(ctx, v960.0);
                                                                let v965 =
                                                                    constructor_fmin_pseudo_reg(
                                                                        ctx, v170, v963, v964,
                                                                    );
                                                                let v966 = constructor_output_reg(
                                                                    ctx, v965,
                                                                );
                                                                let v967 = Some(v966);
                                                                // Rule at src/isa/s390x/lower.isle line 1140.
                                                                return v967;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v779 = C::mie2_enabled(ctx, v3);
                            if let Some(v780) = v779 {
                                let v925 = C::unpack_value_array_3(ctx, v924);
                                let v929 = C::put_in_reg(ctx, v925.0);
                                let v930 = C::put_in_reg(ctx, v925.1);
                                let v931 = constructor_and_reg(ctx, v66, v930, v929);
                                let v932 = C::put_in_reg(ctx, v925.2);
                                let v933 = constructor_and_not_reg(ctx, v66, v932, v929);
                                let v934 = constructor_or_reg(ctx, v66, v933, v931);
                                let v935 = constructor_output_reg(ctx, v934);
                                let v936 = Some(v935);
                                // Rule at src/isa/s390x/lower.isle line 1122.
                                return v936;
                            }
                            let v784 = C::mie2_disabled(ctx, v3);
                            if let Some(v785) = v784 {
                                let v925 = C::unpack_value_array_3(ctx, v924);
                                let v929 = C::put_in_reg(ctx, v925.0);
                                let v930 = C::put_in_reg(ctx, v925.1);
                                let v931 = constructor_and_reg(ctx, v66, v930, v929);
                                let v932 = C::put_in_reg(ctx, v925.2);
                                let v937 = constructor_not_reg(ctx, v66, v929);
                                let v938 = constructor_and_reg(ctx, v66, v932, v937);
                                let v939 = constructor_or_reg(ctx, v66, v938, v931);
                                let v940 = constructor_output_reg(ctx, v939);
                                let v941 = Some(v940);
                                // Rule at src/isa/s390x/lower.isle line 1129.
                                return v941;
                            }
                        }
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v925 = C::unpack_value_array_3(ctx, v924);
                            let v942 = C::put_in_reg(ctx, v925.1);
                            let v943 = C::put_in_reg(ctx, v925.2);
                            let v944 = C::put_in_reg(ctx, v925.0);
                            let v945 = constructor_vec_select(ctx, v39, v942, v943, v944);
                            let v946 = constructor_output_reg(ctx, v945);
                            let v947 = Some(v946);
                            // Rule at src/isa/s390x/lower.isle line 1136.
                            return v947;
                        }
                    }
                }
                &Opcode::Fma => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v925 = C::unpack_value_array_3(ctx, v924);
                        let v929 = C::put_in_reg(ctx, v925.0);
                        let v930 = C::put_in_reg(ctx, v925.1);
                        let v1135 = C::put_in_reg(ctx, v925.2);
                        let v3 = C::value_type(ctx, v2);
                        let v1136 = constructor_fma_reg(ctx, v3, v929, v930, v1135);
                        let v1137 = constructor_output_reg(ctx, v1136);
                        let v1138 = Some(v1137);
                        // Rule at src/isa/s390x/lower.isle line 1417.
                        return v1138;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::TernaryImm8 {
            opcode: ref v1373,
            args: ref v1374,
            imm: v1375,
        } => {
            if let &Opcode::Insertlane = v1373 {
                let v1376 = C::unpack_value_array_2(ctx, v1374);
                let v1414 = C::sinkable_inst(ctx, v1376.1);
                if let Some(v1415) = v1414 {
                    let v1416 = &C::inst_data(ctx, v1415);
                    if let &InstructionData::Load {
                        opcode: ref v1417,
                        arg: v1418,
                        flags: v1419,
                        offset: v1420,
                    } = v1416
                    {
                        if let &Opcode::Load = v1417 {
                            let v1427 = C::littleendian(ctx, v1419);
                            if let Some(v1428) = v1427 {
                                let v1384 = C::put_in_reg(ctx, v1376.0);
                                let v1423 = &constructor_sink_load(ctx, v1415);
                                let v1379 = C::value_type(ctx, v1376.0);
                                let v1381 = C::u8_from_uimm8(ctx, v1375);
                                let v1386 = C::be_lane_idx(ctx, v1379, v1381);
                                let v1429 = constructor_vec_load_lane_little(
                                    ctx, v1379, v1384, v1423, v1386,
                                );
                                let v1430 = constructor_output_reg(ctx, v1429);
                                let v1431 = Some(v1430);
                                // Rule at src/isa/s390x/lower.isle line 1795.
                                return v1431;
                            }
                            let v1421 = C::bigendian(ctx, v1419);
                            if let Some(v1422) = v1421 {
                                let v1384 = C::put_in_reg(ctx, v1376.0);
                                let v1423 = &constructor_sink_load(ctx, v1415);
                                let v1379 = C::value_type(ctx, v1376.0);
                                let v1381 = C::u8_from_uimm8(ctx, v1375);
                                let v1386 = C::be_lane_idx(ctx, v1379, v1381);
                                let v1424 =
                                    constructor_vec_load_lane(ctx, v1379, v1384, v1423, v1386);
                                let v1425 = constructor_output_reg(ctx, v1424);
                                let v1426 = Some(v1425);
                                // Rule at src/isa/s390x/lower.isle line 1790.
                                return v1426;
                            }
                        }
                    }
                }
                let v1409 = C::i16_from_value(ctx, v1376.1);
                if let Some(v1410) = v1409 {
                    let v1384 = C::put_in_reg(ctx, v1376.0);
                    let v1379 = C::value_type(ctx, v1376.0);
                    let v1381 = C::u8_from_uimm8(ctx, v1375);
                    let v1392 = C::be_lane_idx(ctx, v1379, v1381);
                    let v1411 = constructor_vec_insert_lane_imm(ctx, v1379, v1384, v1410, v1392);
                    let v1412 = constructor_output_reg(ctx, v1411);
                    let v1413 = Some(v1412);
                    // Rule at src/isa/s390x/lower.isle line 1785.
                    return v1413;
                }
                let v1397 = C::def_inst(ctx, v1376.1);
                if let Some(v1398) = v1397 {
                    let v1399 = &C::inst_data(ctx, v1398);
                    if let &InstructionData::BinaryImm8 {
                        opcode: ref v1400,
                        arg: v1401,
                        imm: v1402,
                    } = v1399
                    {
                        if let &Opcode::Extractlane = v1400 {
                            let v1384 = C::put_in_reg(ctx, v1376.0);
                            let v1379 = C::value_type(ctx, v1376.0);
                            let v1381 = C::u8_from_uimm8(ctx, v1375);
                            let v1392 = C::be_lane_idx(ctx, v1379, v1381);
                            let v1404 = C::put_in_reg(ctx, v1401);
                            let v1403 = C::u8_from_uimm8(ctx, v1402);
                            let v1405 = C::be_lane_idx(ctx, v1379, v1403);
                            let v1406 = constructor_vec_move_lane_and_insert(
                                ctx, v1379, v1384, v1392, v1404, v1405,
                            );
                            let v1407 = constructor_output_reg(ctx, v1406);
                            let v1408 = Some(v1407);
                            // Rule at src/isa/s390x/lower.isle line 1778.
                            return v1408;
                        }
                    }
                }
                let v1380 = C::value_type(ctx, v1376.1);
                let v1382 = C::ty_int_ref_scalar_64(ctx, v1380);
                if let Some(v1383) = v1382 {
                    let v1384 = C::put_in_reg(ctx, v1376.0);
                    let v1385 = C::put_in_reg(ctx, v1376.1);
                    let v1379 = C::value_type(ctx, v1376.0);
                    let v1381 = C::u8_from_uimm8(ctx, v1375);
                    let v1386 = C::be_lane_idx(ctx, v1379, v1381);
                    let v59 = C::zero_reg(ctx);
                    let v1387 = constructor_vec_insert_lane(ctx, v1379, v1384, v1385, v1386, v59);
                    let v1388 = constructor_output_reg(ctx, v1387);
                    let v1389 = Some(v1388);
                    // Rule at src/isa/s390x/lower.isle line 1765.
                    return v1389;
                }
                let v1390 = C::ty_scalar_float(ctx, v1380);
                if let Some(v1391) = v1390 {
                    let v1384 = C::put_in_reg(ctx, v1376.0);
                    let v1379 = C::value_type(ctx, v1376.0);
                    let v1381 = C::u8_from_uimm8(ctx, v1375);
                    let v1392 = C::be_lane_idx(ctx, v1379, v1381);
                    let v1393 = C::put_in_reg(ctx, v1376.1);
                    let v1394 =
                        constructor_vec_move_lane_and_insert(ctx, v1379, v1384, v1392, v1393, 0x0);
                    let v1395 = constructor_output_reg(ctx, v1394);
                    let v1396 = Some(v1395);
                    // Rule at src/isa/s390x/lower.isle line 1772.
                    return v1396;
                }
            }
        }
        &InstructionData::Trap {
            opcode: ref v2392,
            code: ref v2393,
        } => {
            if let &Opcode::Trap = v2392 {
                let v2394 = &constructor_trap_impl(ctx, v2393);
                let v2395 = constructor_side_effect(ctx, v2394);
                let v2396 = Some(v2395);
                // Rule at src/isa/s390x/lower.isle line 3765.
                return v2396;
            }
        }
        &InstructionData::Unary {
            opcode: ref v50,
            arg: v51,
        } => {
            match v50 {
                &Opcode::Splat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1500 = C::sinkable_inst(ctx, v51);
                        if let Some(v1501) = v1500 {
                            let v1502 = &C::inst_data(ctx, v1501);
                            if let &InstructionData::Load {
                                opcode: ref v1503,
                                arg: v1504,
                                flags: v1505,
                                offset: v1506,
                            } = v1502
                            {
                                if let &Opcode::Load = v1503 {
                                    let v1513 = C::littleendian(ctx, v1505);
                                    if let Some(v1514) = v1513 {
                                        let v1509 = &constructor_sink_load(ctx, v1501);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1515 =
                                            constructor_vec_load_replicate_little(ctx, v3, v1509);
                                        let v1516 = constructor_output_reg(ctx, v1515);
                                        let v1517 = Some(v1516);
                                        // Rule at src/isa/s390x/lower.isle line 1962.
                                        return v1517;
                                    }
                                    let v1507 = C::bigendian(ctx, v1505);
                                    if let Some(v1508) = v1507 {
                                        let v1509 = &constructor_sink_load(ctx, v1501);
                                        let v3 = C::value_type(ctx, v2);
                                        let v1510 = constructor_vec_load_replicate(ctx, v3, v1509);
                                        let v1511 = constructor_output_reg(ctx, v1510);
                                        let v1512 = Some(v1511);
                                        // Rule at src/isa/s390x/lower.isle line 1958.
                                        return v1512;
                                    }
                                }
                            }
                        }
                        let v1495 = C::i16_from_value(ctx, v51);
                        if let Some(v1496) = v1495 {
                            let v3 = C::value_type(ctx, v2);
                            let v1497 = constructor_vec_imm_replicate(ctx, v3, v1496);
                            let v1498 = constructor_output_reg(ctx, v1497);
                            let v1499 = Some(v1498);
                            // Rule at src/isa/s390x/lower.isle line 1954.
                            return v1499;
                        }
                        let v296 = C::def_inst(ctx, v51);
                        if let Some(v297) = v296 {
                            let v298 = &C::inst_data(ctx, v297);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1486,
                                arg: v1487,
                                imm: v1488,
                            } = v298
                            {
                                if let &Opcode::Extractlane = v1486 {
                                    let v1490 = C::put_in_reg(ctx, v1487);
                                    let v3 = C::value_type(ctx, v2);
                                    let v1489 = C::u8_from_uimm8(ctx, v1488);
                                    let v1491 = C::be_lane_idx(ctx, v3, v1489);
                                    let v1492 =
                                        constructor_vec_replicate_lane(ctx, v3, v1490, v1491);
                                    let v1493 = constructor_output_reg(ctx, v1492);
                                    let v1494 = Some(v1493);
                                    // Rule at src/isa/s390x/lower.isle line 1950.
                                    return v1494;
                                }
                            }
                        }
                        let v52 = C::value_type(ctx, v51);
                        let v1475 = C::ty_int_ref_scalar_64(ctx, v52);
                        if let Some(v1476) = v1475 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v56 = C::zero_reg(ctx);
                            let v3 = C::value_type(ctx, v2);
                            let v1477 = constructor_vec_insert_lane_undef(ctx, v3, v53, 0x0, v56);
                            let v1478 = constructor_vec_replicate_lane(ctx, v3, v1477, 0x0);
                            let v1479 = constructor_output_reg(ctx, v1478);
                            let v1480 = Some(v1479);
                            // Rule at src/isa/s390x/lower.isle line 1940.
                            return v1480;
                        }
                        let v1481 = C::ty_scalar_float(ctx, v52);
                        if let Some(v1482) = v1481 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v3 = C::value_type(ctx, v2);
                            let v1483 = constructor_vec_replicate_lane(ctx, v3, v53, 0x0);
                            let v1484 = constructor_output_reg(ctx, v1483);
                            let v1485 = Some(v1484);
                            // Rule at src/isa/s390x/lower.isle line 1945.
                            return v1485;
                        }
                    }
                }
                &Opcode::VanyTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v2299 = &constructor_vany_true_val(ctx, v51);
                            let v2300 = constructor_lower_bool(ctx, v66, v2299);
                            let v2301 = constructor_output_reg(ctx, v2300);
                            let v2302 = Some(v2301);
                            // Rule at src/isa/s390x/lower.isle line 3552.
                            return v2302;
                        }
                    }
                }
                &Opcode::VallTrue => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v2295 = &constructor_vall_true_val(ctx, v51);
                            let v2296 = constructor_lower_bool(ctx, v66, v2295);
                            let v2297 = constructor_output_reg(ctx, v2296);
                            let v2298 = Some(v2297);
                            // Rule at src/isa/s390x/lower.isle line 3474.
                            return v2298;
                        }
                    }
                }
                &Opcode::VhighBits => {
                    let v1806 = &C::lane_order(ctx);
                    match v1806 {
                        &LaneOrder::LittleEndian => {
                            let v52 = C::value_type(ctx, v51);
                            let v2303 = C::multi_lane(ctx, v52);
                            if let Some(v2304) = v2303 {
                                match v2304.0 {
                                    0x8 => {
                                        if v2304.1 == 0x10 {
                                            let v2317 = constructor_imm8x16(
                                                ctx, 0x0, 0x8, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38,
                                                0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x78,
                                            );
                                            let v2318 = constructor_vec_imm(ctx, I8X16, v2317);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2320 =
                                                constructor_vec_bitpermute(ctx, v2319, v2318);
                                            let v489 = C::zero_reg(ctx);
                                            let v2321 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2320, 0x0, v489,
                                            );
                                            let v2322 = constructor_output_reg(ctx, v2321);
                                            let v2323 = Some(v2322);
                                            // Rule at src/isa/s390x/lower.isle line 3628.
                                            return v2323;
                                        }
                                    }
                                    0x10 => {
                                        if v2304.1 == 0x8 {
                                            let v2331 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x0, 0x10, 0x20, 0x30, 0x40, 0x50, 0x60,
                                                0x70,
                                            );
                                            let v2332 = constructor_vec_imm(ctx, I8X16, v2331);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2333 =
                                                constructor_vec_bitpermute(ctx, v2319, v2332);
                                            let v489 = C::zero_reg(ctx);
                                            let v2334 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2333, 0x0, v489,
                                            );
                                            let v2335 = constructor_output_reg(ctx, v2334);
                                            let v2336 = Some(v2335);
                                            // Rule at src/isa/s390x/lower.isle line 3639.
                                            return v2336;
                                        }
                                    }
                                    0x20 => {
                                        if v2304.1 == 0x4 {
                                            let v2343 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x0, 0x20, 0x40,
                                                0x60,
                                            );
                                            let v2344 = constructor_vec_imm(ctx, I8X16, v2343);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2345 =
                                                constructor_vec_bitpermute(ctx, v2319, v2344);
                                            let v489 = C::zero_reg(ctx);
                                            let v2346 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2345, 0x0, v489,
                                            );
                                            let v2347 = constructor_output_reg(ctx, v2346);
                                            let v2348 = Some(v2347);
                                            // Rule at src/isa/s390x/lower.isle line 3650.
                                            return v2348;
                                        }
                                    }
                                    0x40 => {
                                        if v2304.1 == 0x2 {
                                            let v2355 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x0,
                                                0x40,
                                            );
                                            let v2356 = constructor_vec_imm(ctx, I8X16, v2355);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2357 =
                                                constructor_vec_bitpermute(ctx, v2319, v2356);
                                            let v489 = C::zero_reg(ctx);
                                            let v2358 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2357, 0x0, v489,
                                            );
                                            let v2359 = constructor_output_reg(ctx, v2358);
                                            let v2360 = Some(v2359);
                                            // Rule at src/isa/s390x/lower.isle line 3661.
                                            return v2360;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        &LaneOrder::BigEndian => {
                            let v52 = C::value_type(ctx, v51);
                            let v2303 = C::multi_lane(ctx, v52);
                            if let Some(v2304) = v2303 {
                                match v2304.0 {
                                    0x8 => {
                                        if v2304.1 == 0x10 {
                                            let v2324 = constructor_imm8x16(
                                                ctx, 0x78, 0x70, 0x68, 0x60, 0x58, 0x50, 0x48,
                                                0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x8, 0x0,
                                            );
                                            let v2325 = constructor_vec_imm(ctx, I8X16, v2324);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2326 =
                                                constructor_vec_bitpermute(ctx, v2319, v2325);
                                            let v489 = C::zero_reg(ctx);
                                            let v2327 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2326, 0x0, v489,
                                            );
                                            let v2328 = constructor_output_reg(ctx, v2327);
                                            let v2329 = Some(v2328);
                                            // Rule at src/isa/s390x/lower.isle line 3633.
                                            return v2329;
                                        }
                                    }
                                    0x10 => {
                                        if v2304.1 == 0x8 {
                                            let v2337 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x70, 0x60, 0x50, 0x40, 0x30, 0x20, 0x10,
                                                0x0,
                                            );
                                            let v2338 = constructor_vec_imm(ctx, I8X16, v2337);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2339 =
                                                constructor_vec_bitpermute(ctx, v2319, v2338);
                                            let v489 = C::zero_reg(ctx);
                                            let v2340 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2339, 0x0, v489,
                                            );
                                            let v2341 = constructor_output_reg(ctx, v2340);
                                            let v2342 = Some(v2341);
                                            // Rule at src/isa/s390x/lower.isle line 3644.
                                            return v2342;
                                        }
                                    }
                                    0x20 => {
                                        if v2304.1 == 0x4 {
                                            let v2349 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x40, 0x20,
                                                0x0,
                                            );
                                            let v2350 = constructor_vec_imm(ctx, I8X16, v2349);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2351 =
                                                constructor_vec_bitpermute(ctx, v2319, v2350);
                                            let v489 = C::zero_reg(ctx);
                                            let v2352 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2351, 0x0, v489,
                                            );
                                            let v2353 = constructor_output_reg(ctx, v2352);
                                            let v2354 = Some(v2353);
                                            // Rule at src/isa/s390x/lower.isle line 3655.
                                            return v2354;
                                        }
                                    }
                                    0x40 => {
                                        if v2304.1 == 0x2 {
                                            let v2361 = constructor_imm8x16(
                                                ctx, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80,
                                                0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40,
                                                0x0,
                                            );
                                            let v2362 = constructor_vec_imm(ctx, I8X16, v2361);
                                            let v2319 = C::put_in_reg(ctx, v51);
                                            let v2363 =
                                                constructor_vec_bitpermute(ctx, v2319, v2362);
                                            let v489 = C::zero_reg(ctx);
                                            let v2364 = constructor_vec_extract_lane(
                                                ctx, I64X2, v2363, 0x0, v489,
                                            );
                                            let v2365 = constructor_output_reg(ctx, v2364);
                                            let v2366 = Some(v2365);
                                            // Rule at src/isa/s390x/lower.isle line 3666.
                                            return v2366;
                                        }
                                    }
                                    _ => {}
                                }
                            }
                        }
                        _ => {}
                    }
                }
                &Opcode::Ineg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v296 = C::def_inst(ctx, v51);
                            if let Some(v297) = v296 {
                                let v298 = &C::inst_data(ctx, v297);
                                if let &InstructionData::Unary {
                                    opcode: ref v299,
                                    arg: v300,
                                } = v298
                                {
                                    if let &Opcode::Sextend = v299 {
                                        let v301 = C::value_type(ctx, v300);
                                        if v301 == I32 {
                                            let v302 = C::put_in_reg(ctx, v300);
                                            let v322 = constructor_neg_reg_sext32(ctx, v66, v302);
                                            let v323 = constructor_output_reg(ctx, v322);
                                            let v324 = Some(v323);
                                            // Rule at src/isa/s390x/lower.isle line 228.
                                            return v324;
                                        }
                                    }
                                }
                            }
                            let v53 = C::put_in_reg(ctx, v51);
                            let v319 = constructor_neg_reg(ctx, v66, v53);
                            let v320 = constructor_output_reg(ctx, v319);
                            let v321 = Some(v320);
                            // Rule at src/isa/s390x/lower.isle line 224.
                            return v321;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v325 = constructor_vec_neg(ctx, v170, v53);
                            let v326 = constructor_output_reg(ctx, v325);
                            let v327 = Some(v326);
                            // Rule at src/isa/s390x/lower.isle line 232.
                            return v327;
                        }
                        if v3 == I128 {
                            let v311 = constructor_vec_imm(ctx, I128, 0x0);
                            let v312 = C::put_in_reg(ctx, v51);
                            let v313 = constructor_vec_sub(ctx, I128, v311, v312);
                            let v328 = constructor_output_reg(ctx, v313);
                            let v329 = Some(v328);
                            // Rule at src/isa/s390x/lower.isle line 236.
                            return v329;
                        }
                    }
                }
                &Opcode::Iabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v296 = C::def_inst(ctx, v51);
                            if let Some(v297) = v296 {
                                let v298 = &C::inst_data(ctx, v297);
                                if let &InstructionData::Unary {
                                    opcode: ref v299,
                                    arg: v300,
                                } = v298
                                {
                                    if let &Opcode::Sextend = v299 {
                                        let v301 = C::value_type(ctx, v300);
                                        if v301 == I32 {
                                            let v302 = C::put_in_reg(ctx, v300);
                                            let v303 = constructor_abs_reg_sext32(ctx, v66, v302);
                                            let v304 = constructor_output_reg(ctx, v303);
                                            let v305 = Some(v304);
                                            // Rule at src/isa/s390x/lower.isle line 204.
                                            return v305;
                                        }
                                    }
                                }
                            }
                            let v291 = constructor_ty_ext32(ctx, v66);
                            let v292 = constructor_put_in_reg_sext32(ctx, v51);
                            let v293 = constructor_abs_reg(ctx, v291, v292);
                            let v294 = constructor_output_reg(ctx, v293);
                            let v295 = Some(v294);
                            // Rule at src/isa/s390x/lower.isle line 200.
                            return v295;
                        }
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v306 = constructor_vec_abs(ctx, v170, v53);
                            let v307 = constructor_output_reg(ctx, v306);
                            let v308 = Some(v307);
                            // Rule at src/isa/s390x/lower.isle line 208.
                            return v308;
                        }
                        if v3 == I128 {
                            let v311 = constructor_vec_imm(ctx, I128, 0x0);
                            let v312 = C::put_in_reg(ctx, v51);
                            let v313 = constructor_vec_sub(ctx, I128, v311, v312);
                            let v314 = constructor_vec_replicate_lane(ctx, I64X2, v312, 0x0);
                            let v315 = constructor_vec_cmph(ctx, I64X2, v311, v314);
                            let v316 = constructor_vec_select(ctx, I128, v313, v312, v315);
                            let v317 = constructor_output_reg(ctx, v316);
                            let v318 = Some(v317);
                            // Rule at src/isa/s390x/lower.isle line 212.
                            return v318;
                        }
                    }
                }
                &Opcode::Bnot => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v296 = C::def_inst(ctx, v51);
                        if let Some(v297) = v296 {
                            let v298 = &C::inst_data(ctx, v297);
                            if let &InstructionData::Binary {
                                opcode: ref v792,
                                args: ref v793,
                            } = v298
                            {
                                if let &Opcode::Bxor = v792 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v38 = C::vr128_ty(ctx, v3);
                                    if let Some(v39) = v38 {
                                        let v794 = C::unpack_value_array_2(ctx, v793);
                                        let v797 = C::put_in_reg(ctx, v794.0);
                                        let v798 = C::put_in_reg(ctx, v794.1);
                                        let v802 = constructor_vec_not_xor(ctx, v39, v797, v798);
                                        let v803 = constructor_output_reg(ctx, v802);
                                        let v804 = Some(v803);
                                        // Rule at src/isa/s390x/lower.isle line 991.
                                        return v804;
                                    }
                                    let v65 = C::fits_in_64(ctx, v3);
                                    if let Some(v66) = v65 {
                                        let v779 = C::mie2_enabled(ctx, v3);
                                        if let Some(v780) = v779 {
                                            let v794 = C::unpack_value_array_2(ctx, v793);
                                            let v797 = C::put_in_reg(ctx, v794.0);
                                            let v798 = C::put_in_reg(ctx, v794.1);
                                            let v799 =
                                                constructor_not_xor_reg(ctx, v66, v797, v798);
                                            let v800 = constructor_output_reg(ctx, v799);
                                            let v801 = Some(v800);
                                            // Rule at src/isa/s390x/lower.isle line 987.
                                            return v801;
                                        }
                                    }
                                }
                            }
                        }
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v779 = C::mie2_enabled(ctx, v3);
                            if let Some(v780) = v779 {
                                let v53 = C::put_in_reg(ctx, v51);
                                let v781 = constructor_not_or_reg(ctx, v66, v53, v53);
                                let v782 = constructor_output_reg(ctx, v781);
                                let v783 = Some(v782);
                                // Rule at src/isa/s390x/lower.isle line 973.
                                return v783;
                            }
                            let v784 = C::mie2_disabled(ctx, v3);
                            if let Some(v785) = v784 {
                                let v53 = C::put_in_reg(ctx, v51);
                                let v786 = constructor_not_reg(ctx, v66, v53);
                                let v787 = constructor_output_reg(ctx, v786);
                                let v788 = Some(v787);
                                // Rule at src/isa/s390x/lower.isle line 978.
                                return v788;
                            }
                        }
                        let v38 = C::vr128_ty(ctx, v3);
                        if let Some(v39) = v38 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v789 = constructor_vec_not(ctx, v39, v53);
                            let v790 = constructor_output_reg(ctx, v789);
                            let v791 = Some(v790);
                            // Rule at src/isa/s390x/lower.isle line 982.
                            return v791;
                        }
                    }
                }
                &Opcode::Bitrev => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v982 = constructor_bitrev_bits(ctx, 0x1, 0xAAAAAAAAAAAAAAAA, v3, v53);
                        let v983 = constructor_bitrev_bits(ctx, 0x2, 0xCCCCCCCCCCCCCCCC, v3, v982);
                        let v984 = constructor_bitrev_bits(ctx, 0x4, 0xF0F0F0F0F0F0F0F0, v3, v983);
                        let v985 = constructor_bitrev_bytes(ctx, v3, v984);
                        let v986 = constructor_output_reg(ctx, v985);
                        let v987 = Some(v986);
                        // Rule at src/isa/s390x/lower.isle line 1155.
                        return v987;
                    }
                }
                &Opcode::Clz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v721 = constructor_put_in_reg_zext64(ctx, v51);
                            let v992 = constructor_clz_reg(ctx, 0x40, v721);
                            let v993 = constructor_clz_offset(ctx, v66, v992);
                            let v994 = constructor_output_reg(ctx, v993);
                            let v995 = Some(v994);
                            // Rule at src/isa/s390x/lower.isle line 1206.
                            return v995;
                        }
                        if v3 == I128 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v996 = constructor_vec_clz(ctx, I64X2, v53);
                            let v997 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v998 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v997, 0x0, v996, 0x0);
                            let v999 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v997, 0x0, v996, 0x1);
                            let v1000 = constructor_vec_add(ctx, I64X2, v998, v999);
                            let v1002 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v1003 = constructor_vec_cmpeq(ctx, I64X2, v998, v1002);
                            let v1004 = constructor_vec_select(ctx, I128, v1000, v998, v1003);
                            let v1005 = constructor_output_reg(ctx, v1004);
                            let v1006 = Some(v1005);
                            // Rule at src/isa/s390x/lower.isle line 1214.
                            return v1006;
                        }
                    }
                }
                &Opcode::Cls => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v743 = constructor_put_in_reg_sext64(ctx, v51);
                            let v747 = constructor_ashr_imm(ctx, I64, v743, 0x3F);
                            let v1007 = constructor_xor_reg(ctx, I64, v743, v747);
                            let v1008 = constructor_clz_reg(ctx, 0x40, v1007);
                            let v1009 = constructor_cls_offset(ctx, v66, v1008);
                            let v1010 = constructor_output_reg(ctx, v1009);
                            let v1011 = Some(v1010);
                            // Rule at src/isa/s390x/lower.isle line 1240.
                            return v1011;
                        }
                        if v3 == I128 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v1013 = constructor_vec_imm_splat(ctx, I8X16, 0xFF);
                            let v1014 = constructor_vec_ashr_by_byte(ctx, v53, v1013);
                            let v1015 = constructor_vec_ashr_by_bit(ctx, v1014, v1013);
                            let v1016 = constructor_vec_xor(ctx, I128, v53, v1015);
                            let v1017 = constructor_vec_clz(ctx, I64X2, v1016);
                            let v1018 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v1019 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v1018, 0x0, v1017, 0x0);
                            let v1020 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v1018, 0x0, v1017, 0x1);
                            let v1021 = constructor_vec_add(ctx, I64X2, v1019, v1020);
                            let v1022 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v1023 = constructor_vec_cmpeq(ctx, I64X2, v1019, v1022);
                            let v1024 = constructor_vec_select(ctx, I128, v1021, v1019, v1023);
                            let v1025 = constructor_vec_add(ctx, I128, v1024, v1013);
                            let v1026 = constructor_output_reg(ctx, v1025);
                            let v1027 = Some(v1026);
                            // Rule at src/isa/s390x/lower.isle line 1248.
                            return v1027;
                        }
                    }
                }
                &Opcode::Ctz => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v714 = C::gpr32_ty(ctx, v3);
                        if let Some(v715) = v714 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v1028 = constructor_ctz_guardbit(ctx, v715);
                            let v1029 = constructor_or_uimm16shifted(ctx, I64, v53, v1028);
                            let v1030 = constructor_neg_reg(ctx, I64, v1029);
                            let v1031 = constructor_and_reg(ctx, I64, v1029, v1030);
                            let v1032 = constructor_clz_reg(ctx, 0x40, v1031);
                            let v1034 = constructor_imm(ctx, v715, 0x3F);
                            let v1035 = constructor_sub_reg(ctx, v715, v1034, v1032);
                            let v1036 = constructor_output_reg(ctx, v1035);
                            let v1037 = Some(v1036);
                            // Rule at src/isa/s390x/lower.isle line 1277.
                            return v1037;
                        }
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v1038 = constructor_neg_reg(ctx, I64, v53);
                            let v1039 = constructor_and_reg(ctx, I64, v53, v1038);
                            let v1041 = constructor_clz_reg(ctx, -0x1, v1039);
                            let v1042 = constructor_imm(ctx, I64, 0x3F);
                            let v1043 = constructor_sub_reg(ctx, I64, v1042, v1041);
                            let v1044 = constructor_output_reg(ctx, v1043);
                            let v1045 = Some(v1044);
                            // Rule at src/isa/s390x/lower.isle line 1292.
                            return v1045;
                        }
                        if v3 == I128 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v1046 = constructor_vec_ctz(ctx, I64X2, v53);
                            let v997 = constructor_vec_imm(ctx, I64X2, 0x0);
                            let v1047 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v997, 0x0, v1046, 0x0);
                            let v1048 =
                                constructor_vec_permute_dw_imm(ctx, I64X2, v997, 0x0, v1046, 0x1);
                            let v1049 = constructor_vec_add(ctx, I64X2, v1047, v1048);
                            let v1002 = constructor_vec_imm_splat(ctx, I64X2, 0x40);
                            let v1050 = constructor_vec_cmpeq(ctx, I64X2, v1048, v1002);
                            let v1051 = constructor_vec_select(ctx, I128, v1049, v1048, v1050);
                            let v1052 = constructor_output_reg(ctx, v1051);
                            let v1053 = Some(v1052);
                            // Rule at src/isa/s390x/lower.isle line 1299.
                            return v1053;
                        }
                    }
                }
                &Opcode::Bswap => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v988 = constructor_bitrev_bytes(ctx, v3, v53);
                        let v989 = constructor_output_reg(ctx, v988);
                        let v990 = Some(v989);
                        // Rule at src/isa/s390x/lower.isle line 1190.
                        return v990;
                    }
                }
                &Opcode::Popcnt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v169 = C::ty_vec128(ctx, v3);
                        if let Some(v170) = v169 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v1087 = constructor_vec_popcnt(ctx, v170, v53);
                            let v1088 = constructor_output_reg(ctx, v1087);
                            let v1089 = Some(v1088);
                            // Rule at src/isa/s390x/lower.isle line 1347.
                            return v1089;
                        }
                        match v3 {
                            I8 => {
                                let v53 = C::put_in_reg(ctx, v51);
                                let v1054 = constructor_popcnt_byte(ctx, v53);
                                let v1055 = constructor_output_reg(ctx, v1054);
                                let v1056 = Some(v1055);
                                // Rule at src/isa/s390x/lower.isle line 1312.
                                return v1056;
                            }
                            I16 => {
                                let v784 = C::mie2_disabled(ctx, v3);
                                if let Some(v785) = v784 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1054 = constructor_popcnt_byte(ctx, v53);
                                    let v1061 = constructor_lshr_imm(ctx, I32, v1054, 0x8);
                                    let v1062 = constructor_add_reg(ctx, I32, v1054, v1061);
                                    let v1064 = C::uimm16shifted(ctx, 0xFF, 0x0);
                                    let v1065 =
                                        constructor_and_uimm16shifted(ctx, I32, v1062, v1064);
                                    let v1066 = constructor_output_reg(ctx, v1065);
                                    let v1067 = Some(v1066);
                                    // Rule at src/isa/s390x/lower.isle line 1328.
                                    return v1067;
                                }
                            }
                            I32 => {
                                let v784 = C::mie2_disabled(ctx, v3);
                                if let Some(v785) = v784 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1054 = constructor_popcnt_byte(ctx, v53);
                                    let v1069 = constructor_lshl_imm(ctx, I32, v1054, 0x10);
                                    let v1070 = constructor_add_reg(ctx, I32, v1054, v1069);
                                    let v1071 = constructor_lshl_imm(ctx, I32, v1070, 0x8);
                                    let v1072 = constructor_add_reg(ctx, I32, v1070, v1071);
                                    let v1074 = constructor_lshr_imm(ctx, I32, v1072, 0x18);
                                    let v1075 = constructor_output_reg(ctx, v1074);
                                    let v1076 = Some(v1075);
                                    // Rule at src/isa/s390x/lower.isle line 1333.
                                    return v1076;
                                }
                            }
                            I64 => {
                                let v784 = C::mie2_disabled(ctx, v3);
                                if let Some(v785) = v784 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1054 = constructor_popcnt_byte(ctx, v53);
                                    let v1077 = constructor_lshl_imm(ctx, I64, v1054, 0x20);
                                    let v1078 = constructor_add_reg(ctx, I64, v1054, v1077);
                                    let v1079 = constructor_lshl_imm(ctx, I64, v1078, 0x10);
                                    let v1080 = constructor_add_reg(ctx, I64, v1078, v1079);
                                    let v1081 = constructor_lshl_imm(ctx, I64, v1080, 0x8);
                                    let v1082 = constructor_add_reg(ctx, I64, v1080, v1081);
                                    let v1084 = constructor_lshr_imm(ctx, I64, v1082, 0x38);
                                    let v1085 = constructor_output_reg(ctx, v1084);
                                    let v1086 = Some(v1085);
                                    // Rule at src/isa/s390x/lower.isle line 1339.
                                    return v1086;
                                }
                            }
                            I128 => {
                                let v53 = C::put_in_reg(ctx, v51);
                                let v1090 = constructor_vec_popcnt(ctx, I64X2, v53);
                                let v997 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v1091 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v997, 0x0, v1090, 0x0,
                                );
                                let v1092 = constructor_vec_permute_dw_imm(
                                    ctx, I64X2, v997, 0x0, v1090, 0x1,
                                );
                                let v1093 = constructor_vec_add(ctx, I64X2, v1091, v1092);
                                let v1094 = constructor_output_reg(ctx, v1093);
                                let v1095 = Some(v1094);
                                // Rule at src/isa/s390x/lower.isle line 1351.
                                return v1095;
                            }
                            _ => {}
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v779 = C::mie2_enabled(ctx, v3);
                            if let Some(v780) = v779 {
                                let v721 = constructor_put_in_reg_zext64(ctx, v51);
                                let v1057 = constructor_popcnt_reg(ctx, v721);
                                let v1058 = constructor_output_reg(ctx, v1057);
                                let v1059 = Some(v1058);
                                // Rule at src/isa/s390x/lower.isle line 1317.
                                return v1059;
                            }
                        }
                    }
                }
                &Opcode::Sqrt => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1139 = constructor_sqrt_reg(ctx, v3, v53);
                        let v1140 = constructor_output_reg(ctx, v1139);
                        let v1141 = Some(v1140);
                        // Rule at src/isa/s390x/lower.isle line 1424.
                        return v1141;
                    }
                }
                &Opcode::Fneg => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1142 = constructor_fneg_reg(ctx, v3, v53);
                        let v1143 = constructor_output_reg(ctx, v1142);
                        let v1144 = Some(v1143);
                        // Rule at src/isa/s390x/lower.isle line 1431.
                        return v1144;
                    }
                }
                &Opcode::Fabs => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1145 = constructor_fabs_reg(ctx, v3, v53);
                        let v1146 = constructor_output_reg(ctx, v1145);
                        let v1147 = Some(v1146);
                        // Rule at src/isa/s390x/lower.isle line 1438.
                        return v1147;
                    }
                }
                &Opcode::Ceil => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1148 = constructor_ceil_reg(ctx, v3, v53);
                        let v1149 = constructor_output_reg(ctx, v1148);
                        let v1150 = Some(v1149);
                        // Rule at src/isa/s390x/lower.isle line 1445.
                        return v1150;
                    }
                }
                &Opcode::Floor => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1151 = constructor_floor_reg(ctx, v3, v53);
                        let v1152 = constructor_output_reg(ctx, v1151);
                        let v1153 = Some(v1152);
                        // Rule at src/isa/s390x/lower.isle line 1452.
                        return v1153;
                    }
                }
                &Opcode::Trunc => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1154 = constructor_trunc_reg(ctx, v3, v53);
                        let v1155 = constructor_output_reg(ctx, v1154);
                        let v1156 = Some(v1155);
                        // Rule at src/isa/s390x/lower.isle line 1459.
                        return v1156;
                    }
                }
                &Opcode::Nearest => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v1157 = constructor_nearest_reg(ctx, v3, v53);
                        let v1158 = constructor_output_reg(ctx, v1157);
                        let v1159 = Some(v1158);
                        // Rule at src/isa/s390x/lower.isle line 1466.
                        return v1159;
                    }
                }
                &Opcode::ScalarToVector => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v1500 = C::sinkable_inst(ctx, v51);
                        if let Some(v1501) = v1500 {
                            let v1502 = &C::inst_data(ctx, v1501);
                            if let &InstructionData::Load {
                                opcode: ref v1503,
                                arg: v1504,
                                flags: v1505,
                                offset: v1506,
                            } = v1502
                            {
                                if let &Opcode::Load = v1503 {
                                    let v1513 = C::littleendian(ctx, v1505);
                                    if let Some(v1514) = v1513 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1518 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1536 = &constructor_sink_load(ctx, v1501);
                                        let v1519 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1540 = constructor_vec_load_lane_little(
                                            ctx, v3, v1518, v1536, v1519,
                                        );
                                        let v1541 = constructor_output_reg(ctx, v1540);
                                        let v1542 = Some(v1541);
                                        // Rule at src/isa/s390x/lower.isle line 2023.
                                        return v1542;
                                    }
                                    let v1507 = C::bigendian(ctx, v1505);
                                    if let Some(v1508) = v1507 {
                                        let v3 = C::value_type(ctx, v2);
                                        let v1518 = constructor_vec_imm(ctx, v3, 0x0);
                                        let v1536 = &constructor_sink_load(ctx, v1501);
                                        let v1519 = C::be_lane_idx(ctx, v3, 0x0);
                                        let v1537 =
                                            constructor_vec_load_lane(ctx, v3, v1518, v1536, v1519);
                                        let v1538 = constructor_output_reg(ctx, v1537);
                                        let v1539 = Some(v1538);
                                        // Rule at src/isa/s390x/lower.isle line 2019.
                                        return v1539;
                                    }
                                }
                            }
                        }
                        let v1495 = C::i16_from_value(ctx, v51);
                        if let Some(v1496) = v1495 {
                            let v3 = C::value_type(ctx, v2);
                            let v1518 = constructor_vec_imm(ctx, v3, 0x0);
                            let v1532 = C::be_lane_idx(ctx, v3, 0x0);
                            let v1533 =
                                constructor_vec_insert_lane_imm(ctx, v3, v1518, v1496, v1532);
                            let v1534 = constructor_output_reg(ctx, v1533);
                            let v1535 = Some(v1534);
                            // Rule at src/isa/s390x/lower.isle line 2015.
                            return v1535;
                        }
                        let v296 = C::def_inst(ctx, v51);
                        if let Some(v297) = v296 {
                            let v298 = &C::inst_data(ctx, v297);
                            if let &InstructionData::BinaryImm8 {
                                opcode: ref v1486,
                                arg: v1487,
                                imm: v1488,
                            } = v298
                            {
                                if let &Opcode::Extractlane = v1486 {
                                    let v3 = C::value_type(ctx, v2);
                                    let v1523 = C::be_lane_idx(ctx, v3, 0x0);
                                    let v1527 = C::put_in_reg(ctx, v1487);
                                    let v1489 = C::u8_from_uimm8(ctx, v1488);
                                    let v1528 = C::be_lane_idx(ctx, v3, v1489);
                                    let v1529 = constructor_vec_move_lane_and_zero(
                                        ctx, v3, v1523, v1527, v1528,
                                    );
                                    let v1530 = constructor_output_reg(ctx, v1529);
                                    let v1531 = Some(v1530);
                                    // Rule at src/isa/s390x/lower.isle line 2010.
                                    return v1531;
                                }
                            }
                        }
                        let v52 = C::value_type(ctx, v51);
                        let v1475 = C::ty_int_ref_scalar_64(ctx, v52);
                        if let Some(v1476) = v1475 {
                            let v3 = C::value_type(ctx, v2);
                            let v1518 = constructor_vec_imm(ctx, v3, 0x0);
                            let v312 = C::put_in_reg(ctx, v51);
                            let v1519 = C::be_lane_idx(ctx, v3, 0x0);
                            let v59 = C::zero_reg(ctx);
                            let v1520 =
                                constructor_vec_insert_lane(ctx, v3, v1518, v312, v1519, v59);
                            let v1521 = constructor_output_reg(ctx, v1520);
                            let v1522 = Some(v1521);
                            // Rule at src/isa/s390x/lower.isle line 1999.
                            return v1522;
                        }
                        let v1481 = C::ty_scalar_float(ctx, v52);
                        if let Some(v1482) = v1481 {
                            let v3 = C::value_type(ctx, v2);
                            let v1523 = C::be_lane_idx(ctx, v3, 0x0);
                            let v312 = C::put_in_reg(ctx, v51);
                            let v1524 =
                                constructor_vec_move_lane_and_zero(ctx, v3, v1523, v312, 0x0);
                            let v1525 = constructor_output_reg(ctx, v1524);
                            let v1526 = Some(v1525);
                            // Rule at src/isa/s390x/lower.isle line 2005.
                            return v1526;
                        }
                    }
                }
                &Opcode::Bmask => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v973 = &constructor_value_nonzero(ctx, v51);
                        let v3 = C::value_type(ctx, v2);
                        let v974 = constructor_lower_bool_to_mask(ctx, v3, v973);
                        let v975 = constructor_output_reg(ctx, v974);
                        let v976 = Some(v975);
                        // Rule at src/isa/s390x/lower.isle line 1149.
                        return v976;
                    }
                }
                &Opcode::Ireduce => {
                    let v52 = C::value_type(ctx, v51);
                    let v705 = C::fits_in_64(ctx, v52);
                    if let Some(v706) = v705 {
                        let v707 = constructor_output_value(ctx, v51);
                        let v708 = Some(v707);
                        // Rule at src/isa/s390x/lower.isle line 882.
                        return v708;
                    }
                    let v709 = C::vr128_ty(ctx, v52);
                    if let Some(v710) = v709 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v56 = C::zero_reg(ctx);
                        let v711 = constructor_vec_extract_lane(ctx, I64X2, v53, 0x1, v56);
                        let v712 = constructor_output_reg(ctx, v711);
                        let v713 = Some(v712);
                        // Rule at src/isa/s390x/lower.isle line 886.
                        return v713;
                    }
                }
                &Opcode::SwidenLow => {
                    let v52 = C::value_type(ctx, v51);
                    let v765 = C::ty_vec128(ctx, v52);
                    if let Some(v766) = v765 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v767 = constructor_vec_unpacks_low_lane_order(ctx, v766, v53);
                        let v768 = constructor_output_reg(ctx, v767);
                        let v769 = Some(v768);
                        // Rule at src/isa/s390x/lower.isle line 948.
                        return v769;
                    }
                }
                &Opcode::SwidenHigh => {
                    let v52 = C::value_type(ctx, v51);
                    let v765 = C::ty_vec128(ctx, v52);
                    if let Some(v766) = v765 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v770 = constructor_vec_unpacks_high_lane_order(ctx, v766, v53);
                        let v771 = constructor_output_reg(ctx, v770);
                        let v772 = Some(v771);
                        // Rule at src/isa/s390x/lower.isle line 954.
                        return v772;
                    }
                }
                &Opcode::UwidenLow => {
                    let v52 = C::value_type(ctx, v51);
                    let v765 = C::ty_vec128(ctx, v52);
                    if let Some(v766) = v765 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v773 = constructor_vec_unpacku_low_lane_order(ctx, v766, v53);
                        let v774 = constructor_output_reg(ctx, v773);
                        let v775 = Some(v774);
                        // Rule at src/isa/s390x/lower.isle line 960.
                        return v775;
                    }
                }
                &Opcode::UwidenHigh => {
                    let v52 = C::value_type(ctx, v51);
                    let v765 = C::ty_vec128(ctx, v52);
                    if let Some(v766) = v765 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v776 = constructor_vec_unpacku_high_lane_order(ctx, v766, v53);
                        let v777 = constructor_output_reg(ctx, v776);
                        let v778 = Some(v777);
                        // Rule at src/isa/s390x/lower.isle line 966.
                        return v778;
                    }
                }
                &Opcode::Uextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v721 = constructor_put_in_reg_zext64(ctx, v51);
                            let v722 = constructor_output_reg(ctx, v721);
                            let v723 = Some(v722);
                            // Rule at src/isa/s390x/lower.isle line 897.
                            return v723;
                        }
                        let v714 = C::gpr32_ty(ctx, v3);
                        if let Some(v715) = v714 {
                            let v716 = constructor_put_in_reg_zext32(ctx, v51);
                            let v717 = constructor_output_reg(ctx, v716);
                            let v718 = Some(v717);
                            // Rule at src/isa/s390x/lower.isle line 893.
                            return v718;
                        }
                        if v3 == I128 {
                            let v52 = C::value_type(ctx, v51);
                            match v52 {
                                I8 => {
                                    let v311 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v312 = C::put_in_reg(ctx, v51);
                                    let v725 = C::zero_reg(ctx);
                                    let v726 = constructor_vec_insert_lane(
                                        ctx, I8X16, v311, v312, 0xF, v725,
                                    );
                                    let v727 = constructor_output_reg(ctx, v726);
                                    let v728 = Some(v727);
                                    // Rule at src/isa/s390x/lower.isle line 901.
                                    return v728;
                                }
                                I16 => {
                                    let v311 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v312 = C::put_in_reg(ctx, v51);
                                    let v725 = C::zero_reg(ctx);
                                    let v730 = constructor_vec_insert_lane(
                                        ctx, I16X8, v311, v312, 0x7, v725,
                                    );
                                    let v731 = constructor_output_reg(ctx, v730);
                                    let v732 = Some(v731);
                                    // Rule at src/isa/s390x/lower.isle line 903.
                                    return v732;
                                }
                                I32 => {
                                    let v311 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v312 = C::put_in_reg(ctx, v51);
                                    let v725 = C::zero_reg(ctx);
                                    let v734 = constructor_vec_insert_lane(
                                        ctx, I32X4, v311, v312, 0x3, v725,
                                    );
                                    let v735 = constructor_output_reg(ctx, v734);
                                    let v736 = Some(v735);
                                    // Rule at src/isa/s390x/lower.isle line 905.
                                    return v736;
                                }
                                I64 => {
                                    let v311 = constructor_vec_imm(ctx, I128, 0x0);
                                    let v312 = C::put_in_reg(ctx, v51);
                                    let v725 = C::zero_reg(ctx);
                                    let v737 = constructor_vec_insert_lane(
                                        ctx, I64X2, v311, v312, 0x1, v725,
                                    );
                                    let v738 = constructor_output_reg(ctx, v737);
                                    let v739 = Some(v738);
                                    // Rule at src/isa/s390x/lower.isle line 907.
                                    return v739;
                                }
                                _ => {}
                            }
                        }
                    }
                }
                &Opcode::Sextend => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v719 = C::gpr64_ty(ctx, v3);
                        if let Some(v720) = v719 {
                            let v743 = constructor_put_in_reg_sext64(ctx, v51);
                            let v744 = constructor_output_reg(ctx, v743);
                            let v745 = Some(v744);
                            // Rule at src/isa/s390x/lower.isle line 918.
                            return v745;
                        }
                        let v714 = C::gpr32_ty(ctx, v3);
                        if let Some(v715) = v714 {
                            let v740 = constructor_put_in_reg_sext32(ctx, v51);
                            let v741 = constructor_output_reg(ctx, v740);
                            let v742 = Some(v741);
                            // Rule at src/isa/s390x/lower.isle line 914.
                            return v742;
                        }
                        if v3 == I128 {
                            let v743 = constructor_put_in_reg_sext64(ctx, v51);
                            let v747 = constructor_ashr_imm(ctx, I64, v743, 0x3F);
                            let v748 = constructor_mov_to_vec128(ctx, I128, v747, v743);
                            let v749 = constructor_output_reg(ctx, v748);
                            let v750 = Some(v749);
                            // Rule at src/isa/s390x/lower.isle line 922.
                            return v750;
                        }
                    }
                }
                &Opcode::Fpromote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v52 = C::value_type(ctx, v51);
                            let v1160 = constructor_fpromote_reg(ctx, v66, v52, v53);
                            let v1161 = constructor_output_reg(ctx, v1160);
                            let v1162 = Some(v1161);
                            // Rule at src/isa/s390x/lower.isle line 1473.
                            return v1162;
                        }
                    }
                }
                &Opcode::Fdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v52 = C::value_type(ctx, v51);
                            let v1168 =
                                constructor_fdemote_reg(ctx, v66, v52, &FpuRoundMode::Current, v53);
                            let v1169 = constructor_output_reg(ctx, v1168);
                            let v1170 = Some(v1169);
                            // Rule at src/isa/s390x/lower.isle line 1487.
                            return v1170;
                        }
                    }
                }
                &Opcode::Fvdemote => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F32X4 {
                            let v52 = C::value_type(ctx, v51);
                            if v52 == F64X2 {
                                let v53 = C::put_in_reg(ctx, v51);
                                let v1171 = constructor_fdemote_reg(
                                    ctx,
                                    F32X4,
                                    F64X2,
                                    &FpuRoundMode::Current,
                                    v53,
                                );
                                let v1172 = constructor_vec_lshr_imm(ctx, I64X2, v1171, 0x20);
                                let v1173 = constructor_vec_imm(ctx, I64X2, 0x0);
                                let v1174 =
                                    constructor_vec_pack_lane_order(ctx, I64X2, v1172, v1173);
                                let v1175 = constructor_output_reg(ctx, v1174);
                                let v1176 = Some(v1175);
                                // Rule at src/isa/s390x/lower.isle line 1494.
                                return v1176;
                            }
                        }
                    }
                }
                &Opcode::FvpromoteLow => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        if v3 == F64X2 {
                            let v52 = C::value_type(ctx, v51);
                            if v52 == F32X4 {
                                let v53 = C::put_in_reg(ctx, v51);
                                let v312 = C::put_in_reg(ctx, v51);
                                let v1163 =
                                    constructor_vec_merge_low_lane_order(ctx, I32X4, v53, v312);
                                let v1164 = constructor_fpromote_reg(ctx, F64X2, F32X4, v1163);
                                let v1165 = constructor_output_reg(ctx, v1164);
                                let v1166 = Some(v1165);
                                // Rule at src/isa/s390x/lower.isle line 1480.
                                return v1166;
                            }
                        }
                    }
                }
                &Opcode::FcvtToUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v52 = C::value_type(ctx, v51);
                            let v1249 = &constructor_fcmp_reg(ctx, v52, v53, v53);
                            let v1251 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1252 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v1253 = constructor_trap_if(ctx, v1249, v1251, v1252);
                            let v1254 = constructor_fcvt_to_uint_ub(ctx, v52, v66);
                            let v1255 = &constructor_fcmp_reg(ctx, v52, v53, v1254);
                            let v1257 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1258 = &C::trap_code_integer_overflow(ctx);
                            let v1259 = constructor_trap_if(ctx, v1255, v1257, v1258);
                            let v1260 = constructor_fcvt_to_uint_lb(ctx, v52);
                            let v1261 = &constructor_fcmp_reg(ctx, v52, v53, v1260);
                            let v1263 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1264 = constructor_trap_if(ctx, v1261, v1263, v1258);
                            let v1265 = constructor_fcvt_flt_ty(ctx, v66, v52);
                            let v1266 = constructor_fpromote_reg(ctx, v1265, v52, v53);
                            let v1268 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1265,
                                &FpuRoundMode::ToZero,
                                v1266,
                            );
                            let v1269 = constructor_output_reg(ctx, v1268);
                            let v1270 = Some(v1269);
                            // Rule at src/isa/s390x/lower.isle line 1586.
                            return v1270;
                        }
                    }
                }
                &Opcode::FcvtToSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v52 = C::value_type(ctx, v51);
                            let v1249 = &constructor_fcmp_reg(ctx, v52, v53, v53);
                            let v1251 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1252 = &C::trap_code_bad_conversion_to_integer(ctx);
                            let v1253 = constructor_trap_if(ctx, v1249, v1251, v1252);
                            let v1271 = constructor_fcvt_to_sint_ub(ctx, v52, v66);
                            let v1272 = &constructor_fcmp_reg(ctx, v52, v53, v1271);
                            let v1257 = &C::floatcc_as_cond(ctx, &FloatCC::GreaterThanOrEqual);
                            let v1258 = &C::trap_code_integer_overflow(ctx);
                            let v1273 = constructor_trap_if(ctx, v1272, v1257, v1258);
                            let v1274 = constructor_fcvt_to_sint_lb(ctx, v52, v66);
                            let v1275 = &constructor_fcmp_reg(ctx, v52, v53, v1274);
                            let v1263 = &C::floatcc_as_cond(ctx, &FloatCC::LessThanOrEqual);
                            let v1276 = constructor_trap_if(ctx, v1275, v1263, v1258);
                            let v1265 = constructor_fcvt_flt_ty(ctx, v66, v52);
                            let v1266 = constructor_fpromote_reg(ctx, v1265, v52, v53);
                            let v1277 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1265,
                                &FpuRoundMode::ToZero,
                                v1266,
                            );
                            let v1278 = constructor_output_reg(ctx, v1277);
                            let v1279 = Some(v1278);
                            // Rule at src/isa/s390x/lower.isle line 1610.
                            return v1279;
                        }
                    }
                }
                &Opcode::FcvtToUintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == F32X4 {
                                    let v1193 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1194) = v1193 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v1287 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v53,
                                        );
                                        let v1288 = constructor_output_reg(ctx, v1287);
                                        let v1289 = Some(v1288);
                                        // Rule at src/isa/s390x/lower.isle line 1646.
                                        return v1289;
                                    }
                                    let v1198 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1199) = v1198 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v312 = C::put_in_reg(ctx, v51);
                                        let v1290 =
                                            constructor_vec_merge_high(ctx, I32X4, v53, v312);
                                        let v1291 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1290);
                                        let v1292 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1291,
                                        );
                                        let v1293 = C::put_in_reg(ctx, v51);
                                        let v1294 = C::put_in_reg(ctx, v51);
                                        let v1295 =
                                            constructor_vec_merge_low(ctx, I32X4, v1293, v1294);
                                        let v1296 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1295);
                                        let v1297 = constructor_fcvt_to_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1296,
                                        );
                                        let v1298 =
                                            constructor_vec_pack_usat(ctx, I64X2, v1292, v1297);
                                        let v1299 = constructor_output_reg(ctx, v1298);
                                        let v1300 = Some(v1299);
                                        // Rule at src/isa/s390x/lower.isle line 1651.
                                        return v1300;
                                    }
                                }
                            }
                            I64X2 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == F64X2 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1301 = constructor_fcvt_to_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v53,
                                    );
                                    let v1302 = constructor_output_reg(ctx, v1301);
                                    let v1303 = Some(v1302);
                                    // Rule at src/isa/s390x/lower.isle line 1660.
                                    return v1303;
                                }
                            }
                            _ => {}
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v52 = C::value_type(ctx, v51);
                            let v1280 = constructor_fcvt_flt_ty(ctx, v66, v52);
                            let v1281 = constructor_fcvt_int_ty(ctx, v66, v52);
                            let v1282 = constructor_fpromote_reg(ctx, v1280, v52, v53);
                            let v1283 = constructor_fcvt_to_uint_reg(
                                ctx,
                                v1280,
                                &FpuRoundMode::ToZero,
                                v1282,
                            );
                            let v1284 = constructor_uint_sat_reg(ctx, v66, v1281, v1283);
                            let v1285 = constructor_output_reg(ctx, v1284);
                            let v1286 = Some(v1285);
                            // Rule at src/isa/s390x/lower.isle line 1634.
                            return v1286;
                        }
                    }
                }
                &Opcode::FcvtToSintSat => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            I32X4 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == F32X4 {
                                    let v1193 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1194) = v1193 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v1313 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToZero,
                                            v53,
                                        );
                                        let v1314 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1315 = C::put_in_reg(ctx, v51);
                                        let v1203 = C::put_in_reg(ctx, v51);
                                        let v1316 =
                                            constructor_vec_fcmpeq(ctx, F32X4, v1315, v1203);
                                        let v1317 =
                                            constructor_vec_select(ctx, I32X4, v1313, v1314, v1316);
                                        let v1318 = constructor_output_reg(ctx, v1317);
                                        let v1319 = Some(v1318);
                                        // Rule at src/isa/s390x/lower.isle line 1686.
                                        return v1319;
                                    }
                                    let v1198 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1199) = v1198 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v312 = C::put_in_reg(ctx, v51);
                                        let v1290 =
                                            constructor_vec_merge_high(ctx, I32X4, v53, v312);
                                        let v1291 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1290);
                                        let v1320 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1291,
                                        );
                                        let v1293 = C::put_in_reg(ctx, v51);
                                        let v1294 = C::put_in_reg(ctx, v51);
                                        let v1295 =
                                            constructor_vec_merge_low(ctx, I32X4, v1293, v1294);
                                        let v1296 =
                                            constructor_fpromote_reg(ctx, F64X2, F32X4, v1295);
                                        let v1321 = constructor_fcvt_to_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ToZero,
                                            v1296,
                                        );
                                        let v1322 =
                                            constructor_vec_pack_ssat(ctx, I64X2, v1320, v1321);
                                        let v1323 = constructor_vec_imm(ctx, I32X4, 0x0);
                                        let v1324 = C::put_in_reg(ctx, v51);
                                        let v1325 = C::put_in_reg(ctx, v51);
                                        let v1326 =
                                            constructor_vec_fcmpeq(ctx, F32X4, v1324, v1325);
                                        let v1327 =
                                            constructor_vec_select(ctx, I32X4, v1322, v1323, v1326);
                                        let v1328 = constructor_output_reg(ctx, v1327);
                                        let v1329 = Some(v1328);
                                        // Rule at src/isa/s390x/lower.isle line 1694.
                                        return v1329;
                                    }
                                }
                            }
                            I64X2 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == F64X2 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1330 = constructor_fcvt_to_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToZero,
                                        v53,
                                    );
                                    let v997 = constructor_vec_imm(ctx, I64X2, 0x0);
                                    let v1315 = C::put_in_reg(ctx, v51);
                                    let v1203 = C::put_in_reg(ctx, v51);
                                    let v1331 = constructor_vec_fcmpeq(ctx, F64X2, v1315, v1203);
                                    let v1332 =
                                        constructor_vec_select(ctx, I64X2, v1330, v997, v1331);
                                    let v1333 = constructor_output_reg(ctx, v1332);
                                    let v1334 = Some(v1333);
                                    // Rule at src/isa/s390x/lower.isle line 1706.
                                    return v1334;
                                }
                            }
                            _ => {}
                        }
                        let v65 = C::fits_in_64(ctx, v3);
                        if let Some(v66) = v65 {
                            let v53 = C::put_in_reg(ctx, v51);
                            let v52 = C::value_type(ctx, v51);
                            let v1280 = constructor_fcvt_flt_ty(ctx, v66, v52);
                            let v1281 = constructor_fcvt_int_ty(ctx, v66, v52);
                            let v1282 = constructor_fpromote_reg(ctx, v1280, v52, v53);
                            let v1304 = constructor_fcvt_to_sint_reg(
                                ctx,
                                v1280,
                                &FpuRoundMode::ToZero,
                                v1282,
                            );
                            let v1305 = &constructor_fcmp_reg(ctx, v52, v53, v53);
                            let v1306 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                            let v1308 = &constructor_cmov_imm(ctx, v1281, v1306, 0x0, v1304);
                            let v1309 = constructor_with_flags_reg(ctx, v1305, v1308);
                            let v1310 = constructor_sint_sat_reg(ctx, v66, v1281, v1309);
                            let v1311 = constructor_output_reg(ctx, v1310);
                            let v1312 = Some(v1311);
                            // Rule at src/isa/s390x/lower.isle line 1667.
                            return v1312;
                        }
                    }
                }
                &Opcode::FcvtFromUint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v52 = C::value_type(ctx, v51);
                                let v1177 = C::vxrs_ext2_enabled(ctx, v52);
                                if let Some(v1178) = v1177 {
                                    let v1179 = C::fits_in_32(ctx, v52);
                                    if let Some(v1180) = v1179 {
                                        let v716 = constructor_put_in_reg_zext32(ctx, v51);
                                        let v1182 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v716,
                                        );
                                        let v1183 = constructor_output_reg(ctx, v1182);
                                        let v1184 = Some(v1183);
                                        // Rule at src/isa/s390x/lower.isle line 1503.
                                        return v1184;
                                    }
                                }
                                let v705 = C::fits_in_64(ctx, v52);
                                if let Some(v706) = v705 {
                                    let v721 = constructor_put_in_reg_zext64(ctx, v51);
                                    let v1186 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v721,
                                    );
                                    let v1187 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v1186,
                                    );
                                    let v1188 = constructor_output_reg(ctx, v1187);
                                    let v1189 = Some(v1188);
                                    // Rule at src/isa/s390x/lower.isle line 1509.
                                    return v1189;
                                }
                            }
                            F64 => {
                                let v52 = C::value_type(ctx, v51);
                                let v705 = C::fits_in_64(ctx, v52);
                                if let Some(v706) = v705 {
                                    let v721 = constructor_put_in_reg_zext64(ctx, v51);
                                    let v1190 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v721,
                                    );
                                    let v1191 = constructor_output_reg(ctx, v1190);
                                    let v1192 = Some(v1191);
                                    // Rule at src/isa/s390x/lower.isle line 1515.
                                    return v1192;
                                }
                            }
                            F32X4 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == I32X4 {
                                    let v1193 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1194) = v1193 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v1195 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v53,
                                        );
                                        let v1196 = constructor_output_reg(ctx, v1195);
                                        let v1197 = Some(v1196);
                                        // Rule at src/isa/s390x/lower.isle line 1520.
                                        return v1197;
                                    }
                                    let v1198 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1199) = v1198 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v1200 = constructor_vec_unpacku_high(ctx, I32X4, v53);
                                        let v1201 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1200,
                                        );
                                        let v1202 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1201,
                                        );
                                        let v1203 = C::put_in_reg(ctx, v51);
                                        let v1204 = constructor_vec_unpacku_low(ctx, I32X4, v1203);
                                        let v1205 = constructor_fcvt_from_uint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1204,
                                        );
                                        let v1206 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1205,
                                        );
                                        let v1216 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v1217 = constructor_vec_imm(ctx, I8X16, v1216);
                                        let v1218 = constructor_vec_permute(
                                            ctx, F32X4, v1202, v1206, v1217,
                                        );
                                        let v1219 = constructor_output_reg(ctx, v1218);
                                        let v1220 = Some(v1219);
                                        // Rule at src/isa/s390x/lower.isle line 1525.
                                        return v1220;
                                    }
                                }
                            }
                            F64X2 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == I64X2 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1221 = constructor_fcvt_from_uint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v53,
                                    );
                                    let v1222 = constructor_output_reg(ctx, v1221);
                                    let v1223 = Some(v1222);
                                    // Rule at src/isa/s390x/lower.isle line 1537.
                                    return v1223;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::FcvtFromSint => {
                    let v1 = C::first_result(ctx, arg0);
                    if let Some(v2) = v1 {
                        let v3 = C::value_type(ctx, v2);
                        match v3 {
                            F32 => {
                                let v52 = C::value_type(ctx, v51);
                                let v1177 = C::vxrs_ext2_enabled(ctx, v52);
                                if let Some(v1178) = v1177 {
                                    let v1179 = C::fits_in_32(ctx, v52);
                                    if let Some(v1180) = v1179 {
                                        let v740 = constructor_put_in_reg_sext32(ctx, v51);
                                        let v1224 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v740,
                                        );
                                        let v1225 = constructor_output_reg(ctx, v1224);
                                        let v1226 = Some(v1225);
                                        // Rule at src/isa/s390x/lower.isle line 1544.
                                        return v1226;
                                    }
                                }
                                let v705 = C::fits_in_64(ctx, v52);
                                if let Some(v706) = v705 {
                                    let v743 = constructor_put_in_reg_sext64(ctx, v51);
                                    let v1227 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ShorterPrecision,
                                        v743,
                                    );
                                    let v1228 = constructor_fdemote_reg(
                                        ctx,
                                        F32,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v1227,
                                    );
                                    let v1229 = constructor_output_reg(ctx, v1228);
                                    let v1230 = Some(v1229);
                                    // Rule at src/isa/s390x/lower.isle line 1550.
                                    return v1230;
                                }
                            }
                            F64 => {
                                let v52 = C::value_type(ctx, v51);
                                let v705 = C::fits_in_64(ctx, v52);
                                if let Some(v706) = v705 {
                                    let v743 = constructor_put_in_reg_sext64(ctx, v51);
                                    let v1231 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v743,
                                    );
                                    let v1232 = constructor_output_reg(ctx, v1231);
                                    let v1233 = Some(v1232);
                                    // Rule at src/isa/s390x/lower.isle line 1556.
                                    return v1233;
                                }
                            }
                            F32X4 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == I32X4 {
                                    let v1193 = C::vxrs_ext2_enabled(ctx, v3);
                                    if let Some(v1194) = v1193 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v1234 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F32X4,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v53,
                                        );
                                        let v1235 = constructor_output_reg(ctx, v1234);
                                        let v1236 = Some(v1235);
                                        // Rule at src/isa/s390x/lower.isle line 1561.
                                        return v1236;
                                    }
                                    let v1198 = C::vxrs_ext2_disabled(ctx, v3);
                                    if let Some(v1199) = v1198 {
                                        let v53 = C::put_in_reg(ctx, v51);
                                        let v1237 = constructor_vec_unpacks_high(ctx, I32X4, v53);
                                        let v1238 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1237,
                                        );
                                        let v1239 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1238,
                                        );
                                        let v1203 = C::put_in_reg(ctx, v51);
                                        let v1240 = constructor_vec_unpacks_low(ctx, I32X4, v1203);
                                        let v1241 = constructor_fcvt_from_sint_reg(
                                            ctx,
                                            F64X2,
                                            &FpuRoundMode::ShorterPrecision,
                                            v1240,
                                        );
                                        let v1242 = constructor_fdemote_reg(
                                            ctx,
                                            F32X4,
                                            F64X2,
                                            &FpuRoundMode::ToNearestTiesToEven,
                                            v1241,
                                        );
                                        let v1216 = constructor_imm8x16(
                                            ctx, 0x0, 0x1, 0x2, 0x3, 0x8, 0x9, 0xA, 0xB, 0x10,
                                            0x11, 0x12, 0x13, 0x18, 0x19, 0x1A, 0x1B,
                                        );
                                        let v1217 = constructor_vec_imm(ctx, I8X16, v1216);
                                        let v1243 = constructor_vec_permute(
                                            ctx, F32X4, v1239, v1242, v1217,
                                        );
                                        let v1244 = constructor_output_reg(ctx, v1243);
                                        let v1245 = Some(v1244);
                                        // Rule at src/isa/s390x/lower.isle line 1566.
                                        return v1245;
                                    }
                                }
                            }
                            F64X2 => {
                                let v52 = C::value_type(ctx, v51);
                                if v52 == I64X2 {
                                    let v53 = C::put_in_reg(ctx, v51);
                                    let v1246 = constructor_fcvt_from_sint_reg(
                                        ctx,
                                        F64X2,
                                        &FpuRoundMode::ToNearestTiesToEven,
                                        v53,
                                    );
                                    let v1247 = constructor_output_reg(ctx, v1246);
                                    let v1248 = Some(v1247);
                                    // Rule at src/isa/s390x/lower.isle line 1578.
                                    return v1248;
                                }
                            }
                            _ => {}
                        }
                    }
                }
                &Opcode::Isplit => {
                    let v52 = C::value_type(ctx, v51);
                    if v52 == I128 {
                        let v53 = C::put_in_reg(ctx, v51);
                        let v56 = C::zero_reg(ctx);
                        let v57 = constructor_vec_extract_lane(ctx, I64X2, v53, 0x0, v56);
                        let v59 = C::zero_reg(ctx);
                        let v60 = constructor_vec_extract_lane(ctx, I64X2, v53, 0x1, v59);
                        let v61 = C::value_reg(ctx, v60);
                        let v62 = C::value_reg(ctx, v57);
                        let v63 = C::output_pair(ctx, v61, v62);
                        let v64 = Some(v63);
                        // Rule at src/isa/s390x/lower.isle line 50.
                        return v64;
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryConst {
            opcode: ref v26,
            constant_handle: v27,
        } => {
            if let &Opcode::Vconst = v26 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v28 = C::u128_from_constant(ctx, v27);
                    if let Some(v29) = v28 {
                        let v3 = C::value_type(ctx, v2);
                        let v30 = C::be_vec_const(ctx, v3, v29);
                        let v31 = constructor_vec_imm(ctx, v3, v30);
                        let v32 = constructor_output_reg(ctx, v31);
                        let v33 = Some(v32);
                        // Rule at src/isa/s390x/lower.isle line 32.
                        return v33;
                    }
                }
            }
        }
        &InstructionData::UnaryGlobalValue {
            opcode: ref v1847,
            global_value: v1848,
        } => {
            match v1847 {
                &Opcode::SymbolValue => {
                    let v1849 = C::symbol_value_data(ctx, v1848);
                    if let Some(v1850) = v1849 {
                        let v1854 = C::reloc_distance_near(ctx, v1850.1);
                        if let Some(v1855) = v1854 {
                            let v1856 = constructor_memarg_symbol_offset(ctx, v1850.2);
                            if let Some(v1857) = v1856 {
                                let v1837 = C::memflags_trusted(ctx);
                                let v1858 = &C::memarg_symbol(ctx, v1850.0, v1857, v1837);
                                let v1859 = constructor_load_addr(ctx, v1858);
                                let v1860 = constructor_output_reg(ctx, v1859);
                                let v1861 = Some(v1860);
                                // Rule at src/isa/s390x/lower.isle line 2255.
                                return v1861;
                            }
                        }
                        let v1862 = SymbolReloc::Absolute {
                            name: v1850.0,
                            offset: v1850.2,
                        };
                        let v1863 = constructor_load_symbol_reloc(ctx, &v1862);
                        let v1864 = constructor_output_reg(ctx, v1863);
                        let v1865 = Some(v1864);
                        // Rule at src/isa/s390x/lower.isle line 2261.
                        return v1865;
                    }
                }
                &Opcode::TlsValue => {
                    let v1849 = C::symbol_value_data(ctx, v1848);
                    if let Some(v1850) = v1849 {
                        if v1850.2 == 0x0 {
                            let v1866 = C::tls_model_is_elf_gd(ctx);
                            if let Some(v1867) = v1866 {
                                let v1869 = &C::memarg_got(ctx);
                                let v1870 = constructor_load_addr(ctx, v1869);
                                let v1868 = SymbolReloc::TlsGd { name: v1850.0 };
                                let v1871 = constructor_load_symbol_reloc(ctx, &v1868);
                                let v1872 =
                                    constructor_lib_call_tls_get_offset(ctx, v1870, v1871, &v1868);
                                let v1873 = constructor_thread_pointer(ctx);
                                let v1874 = constructor_add_reg(ctx, I64, v1872, v1873);
                                let v1875 = constructor_output_reg(ctx, v1874);
                                let v1876 = Some(v1875);
                                // Rule at src/isa/s390x/lower.isle line 2268.
                                return v1876;
                            }
                        }
                    }
                }
                _ => {}
            }
        }
        &InstructionData::UnaryIeee32 {
            opcode: ref v11,
            imm: v12,
        } => {
            if let &Opcode::F32const = v11 {
                let v13 = C::u32_from_ieee32(ctx, v12);
                let v15 = C::u32_as_u64(ctx, v13);
                let v16 = constructor_imm(ctx, F32, v15);
                let v17 = constructor_output_reg(ctx, v16);
                let v18 = Some(v17);
                // Rule at src/isa/s390x/lower.isle line 20.
                return v18;
            }
        }
        &InstructionData::UnaryIeee64 {
            opcode: ref v19,
            imm: v20,
        } => {
            if let &Opcode::F64const = v19 {
                let v21 = C::u64_from_ieee64(ctx, v20);
                let v23 = constructor_imm(ctx, F64, v21);
                let v24 = constructor_output_reg(ctx, v23);
                let v25 = Some(v24);
                // Rule at src/isa/s390x/lower.isle line 26.
                return v25;
            }
        }
        &InstructionData::UnaryImm {
            opcode: ref v5,
            imm: v6,
        } => {
            if let &Opcode::Iconst = v5 {
                let v1 = C::first_result(ctx, arg0);
                if let Some(v2) = v1 {
                    let v3 = C::value_type(ctx, v2);
                    let v7 = C::u64_from_imm64(ctx, v6);
                    let v8 = constructor_imm(ctx, v3, v7);
                    let v9 = constructor_output_reg(ctx, v8);
                    let v10 = Some(v9);
                    // Rule at src/isa/s390x/lower.isle line 14.
                    return v10;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term lower_branch.
pub fn constructor_lower_branch<C: Context>(
    ctx: &mut C,
    arg0: Inst,
    arg1: &MachLabelSlice,
) -> Option<Unit> {
    let v1 = &C::inst_data(ctx, arg0);
    match v1 {
        &InstructionData::BranchTable {
            opcode: ref v10,
            arg: v11,
            table: v12,
        } => {
            if let &Opcode::BrTable = v10 {
                let v13 = C::jump_table_targets(ctx, arg1);
                if let Some(v14) = v13 {
                    let v17 = constructor_put_in_reg_zext64(ctx, v11);
                    let v19 = C::jump_table_size(ctx, &v14.1);
                    let v20 = &constructor_icmpu_uimm32(ctx, I64, v17, v19);
                    let v22 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThanOrEqual);
                    let v23 = &constructor_bool(ctx, v20, v22);
                    let v24 = &constructor_oneway_cond_br_bool(ctx, v23, v14.0);
                    let v25 = constructor_emit_side_effect(ctx, v24);
                    let v27 = constructor_lshl_imm(ctx, I64, v17, 0x2);
                    let v28 = &constructor_jt_sequence(ctx, v27, &v14.1);
                    let v29 = constructor_emit_side_effect(ctx, v28);
                    let v30 = Some(v29);
                    // Rule at src/isa/s390x/lower.isle line 3727.
                    return v30;
                }
            }
        }
        &InstructionData::Brif {
            opcode: ref v31,
            arg: v32,
            blocks: ref v33,
        } => {
            if let &Opcode::Brif = v31 {
                let v37 = C::two_targets(ctx, arg1);
                if let Some(v38) = v37 {
                    let v41 = &constructor_value_nonzero(ctx, v32);
                    let v42 = &constructor_cond_br_bool(ctx, v41, v38.0, v38.1);
                    let v43 = constructor_emit_side_effect(ctx, v42);
                    let v44 = Some(v43);
                    // Rule at src/isa/s390x/lower.isle line 3759.
                    return v44;
                }
            }
        }
        &InstructionData::Jump {
            opcode: ref v2,
            destination: v3,
        } => {
            if let &Opcode::Jump = v2 {
                let v5 = C::single_target(ctx, arg1);
                if let Some(v6) = v5 {
                    let v7 = &constructor_jump_impl(ctx, v6);
                    let v8 = constructor_emit_side_effect(ctx, v7);
                    let v9 = Some(v8);
                    // Rule at src/isa/s390x/lower.isle line 3719.
                    return v9;
                }
            }
        }
        _ => {}
    }
    None
}

// Generated as internal constructor for term vec_mul_impl.
pub fn constructor_vec_mul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I128 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v24 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v14);
            let v25 = C::zero_reg(ctx);
            let v26 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v25);
            let v27 = C::zero_reg(ctx);
            let v28 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v27);
            let v29 = constructor_umul_wide(ctx, v24, v28);
            let v30 = C::regpair_lo(ctx, v29);
            let v31 = C::regpair_hi(ctx, v29);
            let v32 = constructor_mul_reg(ctx, I64, v24, v26);
            let v33 = constructor_mul_reg(ctx, I64, v13, v28);
            let v34 = constructor_add_reg(ctx, I64, v32, v31);
            let v35 = constructor_add_reg(ctx, I64, v33, v34);
            let v36 = constructor_mov_to_vec128(ctx, I64X2, v35, v30);
            // Rule at src/isa/s390x/lower.isle line 398.
            return v36;
        }
        I8X16 => {
            let v4 = constructor_vec_mul(ctx, I8X16, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 385.
            return v4;
        }
        I16X8 => {
            let v6 = constructor_vec_mul(ctx, I16X8, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 386.
            return v6;
        }
        I32X4 => {
            let v8 = constructor_vec_mul(ctx, I32X4, arg1, arg2);
            // Rule at src/isa/s390x/lower.isle line 387.
            return v8;
        }
        I64X2 => {
            let v12 = C::zero_reg(ctx);
            let v13 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v12);
            let v14 = C::zero_reg(ctx);
            let v15 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x0, v14);
            let v16 = constructor_mul_reg(ctx, I64, v13, v15);
            let v18 = C::zero_reg(ctx);
            let v19 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v18);
            let v20 = C::zero_reg(ctx);
            let v21 = constructor_vec_extract_lane(ctx, I64X2, arg2, 0x1, v20);
            let v22 = constructor_mul_reg(ctx, I64, v19, v21);
            let v23 = constructor_mov_to_vec128(ctx, I64X2, v16, v22);
            // Rule at src/isa/s390x/lower.isle line 390.
            return v23;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_mul_impl", "src/isa/s390x/lower.isle line 380"
    )
}

// Generated as internal constructor for term sqmul_impl.
pub fn constructor_sqmul_impl<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg, arg2: Reg) -> Reg {
    match arg0 {
        I32X4 => {
            let v4 = constructor_vec_mul_impl(ctx, I32X4, arg1, arg2);
            let v6 = constructor_vec_imm_bit_mask(ctx, I32X4, 0x11, 0x11);
            let v7 = constructor_vec_add(ctx, I32X4, v4, v6);
            let v9 = constructor_vec_ashr_imm(ctx, I32X4, v7, 0xF);
            // Rule at src/isa/s390x/lower.isle line 511.
            return v9;
        }
        I64X2 => {
            let v11 = constructor_vec_mul_impl(ctx, I64X2, arg1, arg2);
            let v13 = constructor_vec_imm_bit_mask(ctx, I64X2, 0x21, 0x21);
            let v14 = constructor_vec_add(ctx, I64X2, v11, v13);
            let v16 = constructor_vec_ashr_imm(ctx, I64X2, v14, 0x1F);
            // Rule at src/isa/s390x/lower.isle line 515.
            return v16;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "sqmul_impl", "src/isa/s390x/lower.isle line 510"
    )
}

// Generated as internal constructor for term div_overflow_check_needed.
pub fn constructor_div_overflow_check_needed<C: Context>(ctx: &mut C, arg0: Value) -> bool {
    let v1 = C::i64_from_value(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = constructor_i64_not_neg1(ctx, v2);
        if let Some(v4) = v3 {
            // Rule at src/isa/s390x/lower.isle line 626.
            return false;
        }
    }
    // Rule at src/isa/s390x/lower.isle line 629.
    return true;
}

// Generated as internal constructor for term maybe_trap_if_sdiv_overflow.
pub fn constructor_maybe_trap_if_sdiv_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Type,
    arg3: Reg,
    arg4: Reg,
) -> Reg {
    match arg0 {
        true => {
            let v6 = constructor_int_max(ctx, arg2);
            let v7 = constructor_imm(ctx, arg1, v6);
            let v8 = constructor_xor_reg(ctx, arg1, v7, arg3);
            let v9 = constructor_and_reg(ctx, arg1, v8, arg4);
            let v12 = &C::intcc_as_cond(ctx, &IntCC::Equal);
            let v13 = &C::trap_code_integer_overflow(ctx);
            let v14 = constructor_icmps_simm16_and_trap(ctx, arg1, v9, -0x1, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 642.
            return v14;
        }
        false => {
            let v5 = C::invalid_reg(ctx);
            // Rule at src/isa/s390x/lower.isle line 641.
            return v5;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_trap_if_sdiv_overflow", "src/isa/s390x/lower.isle line 640"
    )
}

// Generated as internal constructor for term int_max.
pub fn constructor_int_max<C: Context>(ctx: &mut C, arg0: Type) -> u64 {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 649.
            return 0x7F;
        }
        I16 => {
            // Rule at src/isa/s390x/lower.isle line 650.
            return 0x7FFF;
        }
        I32 => {
            // Rule at src/isa/s390x/lower.isle line 651.
            return 0x7FFFFFFF;
        }
        I64 => {
            // Rule at src/isa/s390x/lower.isle line 652.
            return 0x7FFFFFFFFFFFFFFF;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "int_max", "src/isa/s390x/lower.isle line 648"
    )
}

// Generated as internal constructor for term maybe_avoid_srem_overflow.
pub fn constructor_maybe_avoid_srem_overflow<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Type,
    arg2: Reg,
    arg3: Reg,
) -> Reg {
    match arg0 {
        true => {
            match arg1 {
                I32 => {
                    // Rule at src/isa/s390x/lower.isle line 670.
                    return arg2;
                }
                I64 => {
                    let v6 = &constructor_icmps_simm16(ctx, I64, arg3, -0x1);
                    let v8 = &C::intcc_as_cond(ctx, &IntCC::Equal);
                    let v10 = &constructor_cmov_imm(ctx, I64, v8, 0x0, arg2);
                    let v11 = constructor_with_flags_reg(ctx, v6, v10);
                    // Rule at src/isa/s390x/lower.isle line 671.
                    return v11;
                }
                _ => {}
            }
        }
        false => {
            // Rule at src/isa/s390x/lower.isle line 669.
            return arg2;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "maybe_avoid_srem_overflow", "src/isa/s390x/lower.isle line 668"
    )
}

// Generated as internal constructor for term bitrev_bits.
pub fn constructor_bitrev_bits<C: Context>(
    ctx: &mut C,
    arg0: u8,
    arg1: u64,
    arg2: Type,
    arg3: Reg,
) -> Reg {
    let v3 = C::fits_in_64(ctx, arg2);
    if let Some(v4) = v3 {
        let v6 = constructor_imm(ctx, v4, arg1);
        let v7 = constructor_ty_ext32(ctx, v4);
        let v8 = constructor_lshl_imm(ctx, v7, arg3, arg0);
        let v9 = constructor_ty_ext32(ctx, v4);
        let v10 = constructor_lshr_imm(ctx, v9, arg3, arg0);
        let v11 = constructor_and_reg(ctx, v4, v8, v6);
        let v12 = constructor_not_reg(ctx, v4, v6);
        let v13 = constructor_and_reg(ctx, v4, v10, v12);
        let v14 = constructor_or_reg(ctx, v4, v11, v13);
        // Rule at src/isa/s390x/lower.isle line 1162.
        return v14;
    }
    let v15 = C::vr128_ty(ctx, arg2);
    if let Some(v16) = v15 {
        let v18 = constructor_vec_imm_splat(ctx, I64X2, arg1);
        let v20 = C::u8_as_u64(ctx, arg0);
        let v21 = constructor_vec_imm_splat(ctx, I8X16, v20);
        let v22 = constructor_vec_lshl_by_bit(ctx, arg3, v21);
        let v23 = constructor_vec_lshr_by_bit(ctx, arg3, v21);
        let v24 = constructor_vec_select(ctx, v16, v22, v23, v18);
        // Rule at src/isa/s390x/lower.isle line 1170.
        return v24;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bits", "src/isa/s390x/lower.isle line 1161"
    )
}

// Generated as internal constructor for term bitrev_bytes.
pub fn constructor_bitrev_bytes<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            // Rule at src/isa/s390x/lower.isle line 1178.
            return arg1;
        }
        I16 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            let v5 = constructor_lshr_imm(ctx, I32, v3, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1179.
            return v5;
        }
        I32 => {
            let v3 = constructor_bswap_reg(ctx, I32, arg1);
            // Rule at src/isa/s390x/lower.isle line 1180.
            return v3;
        }
        I64 => {
            let v7 = constructor_bswap_reg(ctx, I64, arg1);
            // Rule at src/isa/s390x/lower.isle line 1181.
            return v7;
        }
        I128 => {
            let v26 = constructor_imm8x16(
                ctx, 0xF, 0xE, 0xD, 0xC, 0xB, 0xA, 0x9, 0x8, 0x7, 0x6, 0x5, 0x4, 0x3, 0x2, 0x1, 0x0,
            );
            let v27 = constructor_vec_imm(ctx, I8X16, v26);
            let v28 = constructor_vec_permute(ctx, I128, arg1, arg1, v27);
            // Rule at src/isa/s390x/lower.isle line 1182.
            return v28;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "bitrev_bytes", "src/isa/s390x/lower.isle line 1177"
    )
}

// Generated as internal constructor for term clz_offset.
pub fn constructor_clz_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x38);
            // Rule at src/isa/s390x/lower.isle line 1199.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x30);
            // Rule at src/isa/s390x/lower.isle line 1200.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x20);
            // Rule at src/isa/s390x/lower.isle line 1201.
            return v10;
        }
        I64 => {
            // Rule at src/isa/s390x/lower.isle line 1202.
            return arg1;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "clz_offset", "src/isa/s390x/lower.isle line 1198"
    )
}

// Generated as internal constructor for term cls_offset.
pub fn constructor_cls_offset<C: Context>(ctx: &mut C, arg0: Type, arg1: Reg) -> Reg {
    match arg0 {
        I8 => {
            let v4 = constructor_add_simm16(ctx, I8, arg1, -0x39);
            // Rule at src/isa/s390x/lower.isle line 1230.
            return v4;
        }
        I16 => {
            let v7 = constructor_add_simm16(ctx, I16, arg1, -0x31);
            // Rule at src/isa/s390x/lower.isle line 1231.
            return v7;
        }
        I32 => {
            let v10 = constructor_add_simm16(ctx, I32, arg1, -0x21);
            // Rule at src/isa/s390x/lower.isle line 1232.
            return v10;
        }
        I64 => {
            let v13 = constructor_add_simm16(ctx, I64, arg1, -0x1);
            // Rule at src/isa/s390x/lower.isle line 1233.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "cls_offset", "src/isa/s390x/lower.isle line 1229"
    )
}

// Generated as internal constructor for term ctz_guardbit.
pub fn constructor_ctz_guardbit<C: Context>(ctx: &mut C, arg0: Type) -> UImm16Shifted {
    match arg0 {
        I8 => {
            let v3 = C::uimm16shifted(ctx, 0x100, 0x0);
            // Rule at src/isa/s390x/lower.isle line 1284.
            return v3;
        }
        I16 => {
            let v6 = C::uimm16shifted(ctx, 0x1, 0x10);
            // Rule at src/isa/s390x/lower.isle line 1285.
            return v6;
        }
        I32 => {
            let v8 = C::uimm16shifted(ctx, 0x1, 0x20);
            // Rule at src/isa/s390x/lower.isle line 1286.
            return v8;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "ctz_guardbit", "src/isa/s390x/lower.isle line 1283"
    )
}

// Generated as internal constructor for term vec_move_lane_and_insert.
pub fn constructor_vec_move_lane_and_insert<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: u8,
    arg3: Reg,
    arg4: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg2 {
                0x0 => {
                    let v10 = constructor_vec_permute_dw_imm(ctx, arg0, arg3, arg4, arg1, 0x1);
                    // Rule at src/isa/s390x/lower.isle line 1804.
                    return v10;
                }
                0x1 => {
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, arg1, 0x0, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 1806.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg2 == arg4 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg2);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_select(ctx, arg0, arg3, arg1, v14);
        // Rule at src/isa/s390x/lower.isle line 1810.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg3, arg4);
    let v17 = C::lane_byte_mask(ctx, arg0, arg2);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_select(ctx, arg0, v16, arg1, v18);
    // Rule at src/isa/s390x/lower.isle line 1815.
    return v19;
}

// Generated as internal constructor for term vec_load_lane_little.
pub fn constructor_vec_load_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = constructor_vec_load_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1824.
                return v8;
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1828.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = constructor_loadrev16(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v16 = constructor_vec_insert_lane(ctx, arg0, arg1, v14, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1839.
                    return v16;
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1831.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v17 = constructor_loadrev32(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v18 = constructor_vec_insert_lane(ctx, arg0, arg1, v17, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1842.
                    return v18;
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = constructor_vec_load_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1834.
                    return v11;
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v19 = constructor_loadrev64(ctx, arg2);
                    let v15 = C::zero_reg(ctx);
                    let v20 = constructor_vec_insert_lane(ctx, arg0, arg1, v19, arg3, v15);
                    // Rule at src/isa/s390x/lower.isle line 1845.
                    return v20;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little", "src/isa/s390x/lower.isle line 1821"
    )
}

// Generated as internal constructor for term vec_load_lane_little_undef.
pub fn constructor_vec_load_lane_little_undef<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
    arg2: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v7 = constructor_vec_load_lane_undef(ctx, arg0, arg1, arg2);
                // Rule at src/isa/s390x/lower.isle line 1853.
                return v7;
            }
            0x10 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1857.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v13 = constructor_loadrev16(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_insert_lane_undef(ctx, arg0, v13, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1868.
                    return v15;
                }
            }
            0x20 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1860.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v16 = constructor_loadrev32(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v17 = constructor_vec_insert_lane_undef(ctx, arg0, v16, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1871.
                    return v17;
                }
            }
            0x40 => {
                let v8 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v9) = v8 {
                    let v10 = constructor_vec_load_lane_rev_undef(ctx, arg0, arg1, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1863.
                    return v10;
                }
                let v11 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v12) = v11 {
                    let v18 = constructor_loadrev64(ctx, arg1);
                    let v14 = C::zero_reg(ctx);
                    let v19 = constructor_vec_insert_lane_undef(ctx, arg0, v18, arg2, v14);
                    // Rule at src/isa/s390x/lower.isle line 1874.
                    return v19;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_lane_little_undef", "src/isa/s390x/lower.isle line 1850"
    )
}

// Generated as internal constructor for term vec_store_lane_little.
pub fn constructor_vec_store_lane_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: &MemArg,
    arg3: u8,
) -> SideEffectNoResult {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v8 = &constructor_vec_store_lane(ctx, arg0, arg1, arg2, arg3);
                // Rule at src/isa/s390x/lower.isle line 1911.
                return v8.clone();
            }
            0x10 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1915.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v16 = &constructor_storerev16(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1926.
                    return v16.clone();
                }
            }
            0x20 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1918.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v17 = &constructor_storerev32(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1929.
                    return v17.clone();
                }
            }
            0x40 => {
                let v9 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v10) = v9 {
                    let v11 = &constructor_vec_store_lane_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 1921.
                    return v11.clone();
                }
                let v12 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v13) = v12 {
                    let v14 = C::zero_reg(ctx);
                    let v15 = constructor_vec_extract_lane(ctx, arg0, arg1, arg3, v14);
                    let v18 = &constructor_storerev64(ctx, v15, arg2);
                    // Rule at src/isa/s390x/lower.isle line 1932.
                    return v18.clone();
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_lane_little", "src/isa/s390x/lower.isle line 1908"
    )
}

// Generated as internal constructor for term vec_load_replicate_little.
pub fn constructor_vec_load_replicate_little<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: &MemArg,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        match v2.0 {
            0x8 => {
                let v6 = constructor_vec_load_replicate(ctx, arg0, arg1);
                // Rule at src/isa/s390x/lower.isle line 1970.
                return v6;
            }
            0x10 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1974.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1985.
                    return v14;
                }
            }
            0x20 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1977.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1988.
                    return v14;
                }
            }
            0x40 => {
                let v7 = C::vxrs_ext2_enabled(ctx, arg0);
                if let Some(v8) = v7 {
                    let v9 = constructor_vec_load_replicate_rev(ctx, arg0, arg1);
                    // Rule at src/isa/s390x/lower.isle line 1980.
                    return v9;
                }
                let v10 = C::vxrs_ext2_disabled(ctx, arg0);
                if let Some(v11) = v10 {
                    let v13 = constructor_vec_load_lane_little_undef(ctx, arg0, arg1, 0x0);
                    let v14 = constructor_vec_replicate_lane(ctx, arg0, v13, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 1991.
                    return v14;
                }
            }
            _ => {}
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_replicate_little", "src/isa/s390x/lower.isle line 1967"
    )
}

// Generated as internal constructor for term vec_move_lane_and_zero.
pub fn constructor_vec_move_lane_and_zero<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: u8,
    arg2: Reg,
    arg3: u8,
) -> Reg {
    let v1 = C::multi_lane(ctx, arg0);
    if let Some(v2) = v1 {
        if v2.0 == 0x40 {
            match arg1 {
                0x0 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v11 = constructor_vec_permute_dw_imm(ctx, arg0, arg2, arg3, v9, 0x0);
                    // Rule at src/isa/s390x/lower.isle line 2031.
                    return v11;
                }
                0x1 => {
                    let v9 = constructor_vec_imm(ctx, arg0, 0x0);
                    let v12 = constructor_vec_permute_dw_imm(ctx, arg0, v9, 0x0, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2033.
                    return v12;
                }
                _ => {}
            }
        }
    }
    if arg1 == arg3 {
        let v13 = C::lane_byte_mask(ctx, arg0, arg1);
        let v14 = constructor_vec_imm_byte_mask(ctx, arg0, v13);
        let v15 = constructor_vec_and(ctx, arg0, arg2, v14);
        // Rule at src/isa/s390x/lower.isle line 2037.
        return v15;
    }
    let v16 = constructor_vec_replicate_lane(ctx, arg0, arg2, arg3);
    let v17 = C::lane_byte_mask(ctx, arg0, arg1);
    let v18 = constructor_vec_imm_byte_mask(ctx, arg0, v17);
    let v19 = constructor_vec_and(ctx, arg0, v16, v18);
    // Rule at src/isa/s390x/lower.isle line 2042.
    return v19;
}

// Generated as internal constructor for term lib_call_tls_get_offset.
pub fn constructor_lib_call_tls_get_offset<C: Context>(
    ctx: &mut C,
    arg0: Reg,
    arg1: Reg,
    arg2: &SymbolReloc,
) -> Reg {
    let v4 = C::temp_writable_reg(ctx, I64);
    let v5 = C::abi_for_elf_tls_get_offset(ctx);
    let v6 = constructor_writable_link_reg(ctx);
    let v7 = C::box_symbol_reloc(ctx, arg2);
    let v8 = MInst::ElfTlsGetOffset {
        tls_offset: v4,
        got: arg0,
        got_offset: arg1,
        link: v6,
        symbol: v7,
    };
    let v9 = C::emit(ctx, &v8);
    let v10 = C::writable_reg_to_reg(ctx, v4);
    // Rule at src/isa/s390x/lower.isle line 2278.
    return v10;
}

// Generated as internal constructor for term thread_pointer.
pub fn constructor_thread_pointer<C: Context>(ctx: &mut C) -> Reg {
    let v2 = constructor_load_ar(ctx, 0x0);
    let v4 = constructor_lshl_imm(ctx, I64, v2, 0x20);
    let v6 = constructor_insert_ar(ctx, v4, 0x1);
    // Rule at src/isa/s390x/lower.isle line 2289.
    return v6;
}

// Generated as internal constructor for term vec_load_full_rev.
pub fn constructor_vec_load_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v3 = C::vr128_ty(ctx, arg0);
    if let Some(v4) = v3 {
        let v1 = C::vxrs_ext2_enabled(ctx, arg0);
        if let Some(v2) = v1 {
            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
            let v9 = constructor_vec_loadrev(ctx, v4, v8);
            // Rule at src/isa/s390x/lower.isle line 2364.
            return v9;
        }
        let v10 = C::vxrs_ext2_disabled(ctx, arg0);
        if let Some(v11) = v10 {
            let v13 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x0);
            let v15 = &constructor_lower_address_bias(ctx, arg1, arg2, arg3, 0x8);
            let v16 = constructor_loadrev64(ctx, v13);
            let v17 = constructor_loadrev64(ctx, v15);
            let v18 = constructor_mov_to_vec128(ctx, v4, v17, v16);
            // Rule at src/isa/s390x/lower.isle line 2368.
            return v18;
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_full_rev", "src/isa/s390x/lower.isle line 2361"
    )
}

// Generated as internal constructor for term vec_load_byte_rev.
pub fn constructor_vec_load_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = C::multi_lane(ctx, arg0);
    if let Some(v7) = v6 {
        match v7.0 {
            0x8 => {
                if v7.1 == 0x10 {
                    let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                    let v11 = constructor_vec_load(ctx, arg0, v10);
                    // Rule at src/isa/s390x/lower.isle line 2384.
                    return v11;
                }
            }
            0x10 => {
                if v7.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_byte16rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2394.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2405.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v7.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_byte32rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2391.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2402.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v7.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v10 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_byte64rev(ctx, arg0, v10);
                        // Rule at src/isa/s390x/lower.isle line 2388.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2399.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = constructor_vec_load_full_rev(ctx, I128, arg1, arg2, arg3);
        // Rule at src/isa/s390x/lower.isle line 2380.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_byte_rev", "src/isa/s390x/lower.isle line 2377"
    )
}

// Generated as internal constructor for term vec_load_elt_rev.
pub fn constructor_vec_load_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = constructor_vec_load_full_rev(ctx, arg0, arg1, arg2, arg3);
                    // Rule at src/isa/s390x/lower.isle line 2419.
                    return v11;
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v16 = constructor_vec_load_elt16rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2429.
                        return v16;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2440.
                        return v20;
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v15 = constructor_vec_load_elt32rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2426.
                        return v15;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2437.
                        return v20;
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v14 = constructor_vec_load_elt64rev(ctx, arg0, v5);
                        // Rule at src/isa/s390x/lower.isle line 2423.
                        return v14;
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                        let v19 = constructor_vec_load(ctx, arg0, v5);
                        let v20 = constructor_vec_elt_rev(ctx, arg0, v19);
                        // Rule at src/isa/s390x/lower.isle line 2434.
                        return v20;
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg1, arg2, arg3);
        let v6 = constructor_vec_load(ctx, I128, v5);
        // Rule at src/isa/s390x/lower.isle line 2415.
        return v6;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_load_elt_rev", "src/isa/s390x/lower.isle line 2411"
    )
}

// Generated as internal constructor for term load_v64.
pub fn constructor_load_v64<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: MemFlags,
    arg2: Value,
    arg3: Offset32,
) -> Reg {
    let v6 = &C::lane_order(ctx);
    match v6 {
        &LaneOrder::LittleEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2591.
                            return v13;
                        }
                    }
                    0x10 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v21 = constructor_vec_rot_imm(ctx, I16X8, v13, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2602.
                                return v21;
                            }
                        }
                    }
                    0x20 => {
                        let v2 = C::bigendian(ctx, arg1);
                        if let Some(v3) = v2 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v24 = constructor_vec_rot_imm(ctx, I64X2, v10, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2614.
                                return v24;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v11 = C::littleendian(ctx, arg1);
            if let Some(v12) = v11 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v13 = constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2581.
                return v13;
            }
        }
        &LaneOrder::BigEndian => {
            let v14 = C::multi_lane(ctx, arg0);
            if let Some(v15) = v14 {
                match v15.0 {
                    0x8 => {
                        if v15.1 == 0x10 {
                            let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                            let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                            // Rule at src/isa/s390x/lower.isle line 2586.
                            return v10;
                        }
                    }
                    0x10 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x8 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                                let v20 = constructor_vec_rot_imm(ctx, I16X8, v10, 0x8);
                                // Rule at src/isa/s390x/lower.isle line 2596.
                                return v20;
                            }
                        }
                    }
                    0x20 => {
                        let v11 = C::littleendian(ctx, arg1);
                        if let Some(v12) = v11 {
                            if v15.1 == 0x4 {
                                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                                let v13 =
                                    constructor_vec_load_lane_little_undef(ctx, I64X2, v8, 0x0);
                                let v23 = constructor_vec_rot_imm(ctx, I64X2, v13, 0x20);
                                // Rule at src/isa/s390x/lower.isle line 2608.
                                return v23;
                            }
                        }
                    }
                    _ => {}
                }
            }
            let v2 = C::bigendian(ctx, arg1);
            if let Some(v3) = v2 {
                let v8 = &constructor_lower_address(ctx, arg1, arg2, arg3);
                let v10 = constructor_vec_load_lane_undef(ctx, I64X2, v8, 0x0);
                // Rule at src/isa/s390x/lower.isle line 2576.
                return v10;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "load_v64", "src/isa/s390x/lower.isle line 2573"
    )
}

// Generated as internal constructor for term vec_store_full_rev.
pub fn constructor_vec_store_full_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v1 = C::vxrs_ext2_enabled(ctx, arg0);
    if let Some(v2) = v1 {
        let v7 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v8 = &constructor_vec_storerev(ctx, arg1, v7);
        // Rule at src/isa/s390x/lower.isle line 2694.
        return v8.clone();
    }
    let v9 = C::vxrs_ext2_disabled(ctx, arg0);
    if let Some(v10) = v9 {
        let v12 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x0);
        let v14 = &constructor_lower_address_bias(ctx, arg2, arg3, arg4, 0x8);
        let v17 = C::zero_reg(ctx);
        let v18 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x1, v17);
        let v19 = C::zero_reg(ctx);
        let v20 = constructor_vec_extract_lane(ctx, I64X2, arg1, 0x0, v19);
        let v21 = &constructor_storerev64(ctx, v18, v12);
        let v22 = &constructor_storerev64(ctx, v20, v14);
        let v23 = &constructor_side_effect_concat(ctx, v21, v22);
        // Rule at src/isa/s390x/lower.isle line 2698.
        return v23.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_full_rev", "src/isa/s390x/lower.isle line 2691"
    )
}

// Generated as internal constructor for term vec_store_byte_rev.
pub fn constructor_vec_store_byte_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                    let v12 = &constructor_vec_store(ctx, arg1, v11);
                    // Rule at src/isa/s390x/lower.isle line 2715.
                    return v12.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v17 = &constructor_vec_store_byte16rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2725.
                        return v17.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2736.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_byte32rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2722.
                        return v16.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2733.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v13 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v14) = v13 {
                        let v11 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_byte64rev(ctx, arg1, v11);
                        // Rule at src/isa/s390x/lower.isle line 2719.
                        return v15.clone();
                    }
                    let v18 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v19) = v18 {
                        let v20 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v21 = &constructor_vec_store_full_rev(ctx, arg0, v20, arg2, arg3, arg4);
                        // Rule at src/isa/s390x/lower.isle line 2730.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v6 = &constructor_vec_store_full_rev(ctx, I128, arg1, arg2, arg3, arg4);
        // Rule at src/isa/s390x/lower.isle line 2711.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_byte_rev", "src/isa/s390x/lower.isle line 2708"
    )
}

// Generated as internal constructor for term vec_store_elt_rev.
pub fn constructor_vec_store_elt_rev<C: Context>(
    ctx: &mut C,
    arg0: Type,
    arg1: Reg,
    arg2: MemFlags,
    arg3: Value,
    arg4: Offset32,
) -> SideEffectNoResult {
    let v7 = C::multi_lane(ctx, arg0);
    if let Some(v8) = v7 {
        match v8.0 {
            0x8 => {
                if v8.1 == 0x10 {
                    let v11 = &constructor_vec_store_full_rev(ctx, arg0, arg1, arg2, arg3, arg4);
                    // Rule at src/isa/s390x/lower.isle line 2749.
                    return v11.clone();
                }
            }
            0x10 => {
                if v8.1 == 0x8 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v16 = &constructor_vec_store_elt16rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2759.
                        return v16.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2770.
                        return v21.clone();
                    }
                }
            }
            0x20 => {
                if v8.1 == 0x4 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v15 = &constructor_vec_store_elt32rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2756.
                        return v15.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2767.
                        return v21.clone();
                    }
                }
            }
            0x40 => {
                if v8.1 == 0x2 {
                    let v12 = C::vxrs_ext2_enabled(ctx, arg0);
                    if let Some(v13) = v12 {
                        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v14 = &constructor_vec_store_elt64rev(ctx, arg1, v5);
                        // Rule at src/isa/s390x/lower.isle line 2753.
                        return v14.clone();
                    }
                    let v17 = C::vxrs_ext2_disabled(ctx, arg0);
                    if let Some(v18) = v17 {
                        let v19 = constructor_vec_elt_rev(ctx, arg0, arg1);
                        let v20 = &constructor_lower_address(ctx, arg2, arg3, arg4);
                        let v21 = &constructor_vec_store(ctx, v19, v20);
                        // Rule at src/isa/s390x/lower.isle line 2764.
                        return v21.clone();
                    }
                }
            }
            _ => {}
        }
    }
    if arg0 == I128 {
        let v5 = &constructor_lower_address(ctx, arg2, arg3, arg4);
        let v6 = &constructor_vec_store(ctx, arg1, v5);
        // Rule at src/isa/s390x/lower.isle line 2745.
        return v6.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "vec_store_elt_rev", "src/isa/s390x/lower.isle line 2742"
    )
}

// Generated as internal constructor for term istore8_impl.
pub fn constructor_istore8_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v7 = C::u8_from_value(ctx, arg1);
    if let Some(v8) = v7 {
        let v9 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v10 = &constructor_store8_imm(ctx, v8, v9);
        // Rule at src/isa/s390x/lower.isle line 2789.
        return v10.clone();
    }
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = &constructor_lower_address(ctx, arg0, arg2, arg3);
    let v6 = &constructor_store8(ctx, v4, v5);
    // Rule at src/isa/s390x/lower.isle line 2785.
    return v6.clone();
}

// Generated as internal constructor for term istore16_impl.
pub fn constructor_istore16_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v12 = C::i16_from_value(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v15 = &constructor_store16_imm(ctx, v13, v14);
            // Rule at src/isa/s390x/lower.isle line 2811.
            return v15.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2803.
        return v8.clone();
    }
    let v9 = C::littleendian(ctx, arg0);
    if let Some(v10) = v9 {
        let v16 = C::i16_from_swapped_value(ctx, arg1);
        if let Some(v17) = v16 {
            let v14 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v18 = &constructor_store16_imm(ctx, v17, v14);
            // Rule at src/isa/s390x/lower.isle line 2815.
            return v18.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v11 = &constructor_storerev16(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2807.
        return v11.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore16_impl", "src/isa/s390x/lower.isle line 2800"
    )
}

// Generated as internal constructor for term istore32_impl.
pub fn constructor_istore32_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store32_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2833.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2829.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev32(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2837.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore32_impl", "src/isa/s390x/lower.isle line 2826"
    )
}

// Generated as internal constructor for term istore64_impl.
pub fn constructor_istore64_impl<C: Context>(
    ctx: &mut C,
    arg0: MemFlags,
    arg1: Value,
    arg2: Value,
    arg3: Offset32,
) -> SideEffectNoResult {
    let v1 = C::bigendian(ctx, arg0);
    if let Some(v2) = v1 {
        let v9 = C::i16_from_value(ctx, arg1);
        if let Some(v10) = v9 {
            let v11 = &constructor_lower_address(ctx, arg0, arg2, arg3);
            let v12 = &constructor_store64_simm16(ctx, v10, v11);
            // Rule at src/isa/s390x/lower.isle line 2851.
            return v12.clone();
        }
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v8 = &constructor_store64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2847.
        return v8.clone();
    }
    let v13 = C::littleendian(ctx, arg0);
    if let Some(v14) = v13 {
        let v6 = C::put_in_reg(ctx, arg1);
        let v7 = &constructor_lower_address(ctx, arg0, arg2, arg3);
        let v15 = &constructor_storerev64(ctx, v6, v7);
        // Rule at src/isa/s390x/lower.isle line 2855.
        return v15.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "istore64_impl", "src/isa/s390x/lower.isle line 2844"
    )
}

// Generated as internal constructor for term atomic_rmw_body.
pub fn constructor_atomic_rmw_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &AtomicRmwOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg3 {
        &AtomicRmwOp::Add => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v39 = &constructor_aluop_add(ctx, v38);
            let v40 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v39, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3018.
            return v40;
        }
        &AtomicRmwOp::And => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2980.
                return v32;
            }
        }
        &AtomicRmwOp::Nand => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v14 = C::mie2_enabled(ctx, arg1);
                if let Some(v15) = v14 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v17 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, arg6);
                        // Rule at src/isa/s390x/lower.isle line 2960.
                        return v17;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v16 = &constructor_aluop_not_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v19 = constructor_push_alu_reg(ctx, arg0, v16, arg4, arg5, v18);
                        // Rule at src/isa/s390x/lower.isle line 2963.
                        return v19;
                    }
                }
                let v20 = C::mie2_disabled(ctx, arg1);
                if let Some(v21) = v20 {
                    let v5 = C::bigendian(ctx, arg2);
                    if let Some(v6) = v5 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v23 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, arg6);
                        let v24 = constructor_push_not_reg(ctx, arg0, v3, arg4, v23);
                        // Rule at src/isa/s390x/lower.isle line 2966.
                        return v24;
                    }
                    let v11 = C::littleendian(ctx, arg2);
                    if let Some(v12) = v11 {
                        let v22 = &constructor_aluop_and(ctx, v3);
                        let v18 = constructor_bswap_reg(ctx, v3, arg6);
                        let v25 = constructor_push_alu_reg(ctx, arg0, v22, arg4, arg5, v18);
                        let v26 = constructor_push_not_reg(ctx, arg0, v3, arg4, v25);
                        // Rule at src/isa/s390x/lower.isle line 2970.
                        return v26;
                    }
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v32 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::And,
                    arg4,
                    arg5,
                    arg6,
                );
                let v37 = constructor_atomic_rmw_body_invert(ctx, arg0, v28, arg2, arg4, v32);
                // Rule at src/isa/s390x/lower.isle line 2986.
                return v37;
            }
        }
        &AtomicRmwOp::Or => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v34 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Or,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2982.
                return v34;
            }
        }
        &AtomicRmwOp::Smax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v48 = &C::intcc_as_cond(ctx, &IntCC::SignedGreaterThan);
            let v49 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v48, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3059.
            return v49;
        }
        &AtomicRmwOp::Smin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v43 = &constructor_cmpop_cmps(ctx, v38);
            let v45 = &C::intcc_as_cond(ctx, &IntCC::SignedLessThan);
            let v46 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v43, v45, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3056.
            return v46;
        }
        &AtomicRmwOp::Sub => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v41 = &constructor_aluop_sub(ctx, v38);
            let v42 =
                constructor_atomic_rmw_body_addsub(ctx, arg0, arg1, arg2, v41, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3020.
            return v42;
        }
        &AtomicRmwOp::Umax => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v55 = &C::intcc_as_cond(ctx, &IntCC::UnsignedGreaterThan);
            let v56 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v55, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3065.
            return v56;
        }
        &AtomicRmwOp::Umin => {
            let v38 = constructor_ty_ext32(ctx, arg1);
            let v50 = &constructor_cmpop_cmpu(ctx, v38);
            let v52 = &C::intcc_as_cond(ctx, &IntCC::UnsignedLessThan);
            let v53 = constructor_atomic_rmw_body_minmax(
                ctx, arg0, arg1, arg2, v50, v52, arg4, arg5, arg6,
            );
            // Rule at src/isa/s390x/lower.isle line 3062.
            return v53;
        }
        &AtomicRmwOp::Xchg => {
            let v2 = C::ty_32_or_64(ctx, arg1);
            if let Some(v3) = v2 {
                let v5 = C::bigendian(ctx, arg2);
                if let Some(v6) = v5 {
                    // Rule at src/isa/s390x/lower.isle line 2949.
                    return arg6;
                }
                let v11 = C::littleendian(ctx, arg2);
                if let Some(v12) = v11 {
                    let v13 = constructor_bswap_reg(ctx, v3, arg6);
                    // Rule at src/isa/s390x/lower.isle line 2952.
                    return v13;
                }
            }
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v30 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Insert,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2978.
                return v30;
            }
        }
        &AtomicRmwOp::Xor => {
            let v27 = C::ty_8_or_16(ctx, arg1);
            if let Some(v28) = v27 {
                let v36 = constructor_atomic_rmw_body_rxsbg(
                    ctx,
                    arg0,
                    v28,
                    arg2,
                    &RxSBGOp::Xor,
                    arg4,
                    arg5,
                    arg6,
                );
                // Rule at src/isa/s390x/lower.isle line 2984.
                return v36;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body", "src/isa/s390x/lower.isle line 2944"
    )
}

// Generated as internal constructor for term atomic_rmw_body_rxsbg.
pub fn constructor_atomic_rmw_body_rxsbg<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &RxSBGOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v10 = constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x28, 0x18);
            // Rule at src/isa/s390x/lower.isle line 2994.
            return v10;
        }
        I16 => {
            let v11 = C::bigendian(ctx, arg2);
            if let Some(v12) = v11 {
                let v15 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, arg6, 0x20, 0x30, 0x10);
                // Rule at src/isa/s390x/lower.isle line 2998.
                return v15;
            }
            let v16 = C::littleendian(ctx, arg2);
            if let Some(v17) = v16 {
                let v19 = constructor_bswap_reg(ctx, I32, arg6);
                let v22 =
                    constructor_push_rxsbg(ctx, arg0, arg3, arg4, arg5, v19, 0x30, 0x40, -0x10);
                // Rule at src/isa/s390x/lower.isle line 3002.
                return v22;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_rxsbg", "src/isa/s390x/lower.isle line 2991"
    )
}

// Generated as internal constructor for term atomic_rmw_body_invert.
pub fn constructor_atomic_rmw_body_invert<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v8 = C::uimm32shifted(ctx, 0xFF000000, 0x0);
            let v9 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v8);
            // Rule at src/isa/s390x/lower.isle line 3008.
            return v9;
        }
        I16 => {
            let v10 = C::bigendian(ctx, arg2);
            if let Some(v11) = v10 {
                let v13 = C::uimm32shifted(ctx, 0xFFFF0000, 0x0);
                let v14 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v13);
                // Rule at src/isa/s390x/lower.isle line 3011.
                return v14;
            }
            let v15 = C::littleendian(ctx, arg2);
            if let Some(v16) = v15 {
                let v18 = C::uimm32shifted(ctx, 0xFFFF, 0x0);
                let v19 = constructor_push_xor_uimm32shifted(ctx, arg0, I32, arg3, arg4, v18);
                // Rule at src/isa/s390x/lower.isle line 3014.
                return v19;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_invert", "src/isa/s390x/lower.isle line 3006"
    )
}

// Generated as internal constructor for term atomic_rmw_body_addsub.
pub fn constructor_atomic_rmw_body_addsub<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &ALUOp,
    arg4: WritableReg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v23 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v22);
            // Rule at src/isa/s390x/lower.isle line 3041.
            return v23;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v11 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, arg6);
            // Rule at src/isa/s390x/lower.isle line 3027.
            return v11;
        }
    }
    let v12 = C::littleendian(ctx, arg2);
    if let Some(v13) = v12 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v14 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, arg5);
            let v15 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v14, arg6);
            let v16 = constructor_push_bswap_reg(ctx, arg0, v3, arg4, v15);
            // Rule at src/isa/s390x/lower.isle line 3031.
            return v16;
        }
        if arg1 == I16 {
            let v22 = constructor_lshl_imm(ctx, I32, arg6, 0x10);
            let v24 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, arg5);
            let v25 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, v24, v22);
            let v26 = constructor_push_bswap_reg(ctx, arg0, I32, arg4, v25);
            // Rule at src/isa/s390x/lower.isle line 3049.
            return v26;
        }
    }
    if arg1 == I8 {
        let v19 = constructor_lshl_imm(ctx, I32, arg6, 0x18);
        let v20 = constructor_push_alu_reg(ctx, arg0, arg3, arg4, arg5, v19);
        // Rule at src/isa/s390x/lower.isle line 3037.
        return v20;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_addsub", "src/isa/s390x/lower.isle line 3024"
    )
}

// Generated as internal constructor for term atomic_rmw_body_minmax.
pub fn constructor_atomic_rmw_body_minmax<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: &CmpOp,
    arg4: &Cond,
    arg5: WritableReg,
    arg6: Reg,
    arg7: Reg,
) -> Reg {
    let v5 = C::bigendian(ctx, arg2);
    if let Some(v6) = v5 {
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v34 = &constructor_cmp_rr(ctx, arg3, v33, arg6);
            let v19 = &C::invert_cond(ctx, arg4);
            let v35 = constructor_push_break_if(ctx, arg0, v34, v19);
            let v37 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                arg6,
                v33,
                0x20,
                0x30,
                0x0,
            );
            // Rule at src/isa/s390x/lower.isle line 3100.
            return v37;
        }
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v12 = &constructor_cmp_rr(ctx, arg3, arg7, arg6);
            let v13 = &C::invert_cond(ctx, arg4);
            let v14 = constructor_push_break_if(ctx, arg0, v12, v13);
            // Rule at src/isa/s390x/lower.isle line 3075.
            return arg7;
        }
    }
    let v15 = C::littleendian(ctx, arg2);
    if let Some(v16) = v15 {
        let v2 = C::ty_32_or_64(ctx, arg1);
        if let Some(v3) = v2 {
            let v17 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg6);
            let v18 = &constructor_cmp_rr(ctx, arg3, arg7, v17);
            let v19 = &C::invert_cond(ctx, arg4);
            let v20 = constructor_push_break_if(ctx, arg0, v18, v19);
            let v21 = constructor_push_bswap_reg(ctx, arg0, v3, arg5, arg7);
            // Rule at src/isa/s390x/lower.isle line 3082.
            return v21;
        }
        if arg1 == I16 {
            let v33 = constructor_lshl_imm(ctx, I32, arg7, 0x10);
            let v38 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, arg6);
            let v39 = &constructor_cmp_rr(ctx, arg3, v33, v38);
            let v40 = &C::invert_cond(ctx, arg4);
            let v41 = constructor_push_break_if(ctx, arg0, v39, v40);
            let v42 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg5,
                v38,
                v33,
                0x20,
                0x30,
                0x0,
            );
            let v43 = constructor_push_bswap_reg(ctx, arg0, I32, arg5, v42);
            // Rule at src/isa/s390x/lower.isle line 3107.
            return v43;
        }
    }
    if arg1 == I8 {
        let v24 = constructor_lshl_imm(ctx, I32, arg7, 0x18);
        let v25 = &constructor_cmp_rr(ctx, arg3, v24, arg6);
        let v19 = &C::invert_cond(ctx, arg4);
        let v26 = constructor_push_break_if(ctx, arg0, v25, v19);
        let v31 = constructor_push_rxsbg(
            ctx,
            arg0,
            &RxSBGOp::Insert,
            arg5,
            arg6,
            v24,
            0x20,
            0x28,
            0x0,
        );
        // Rule at src/isa/s390x/lower.isle line 3094.
        return v31;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_rmw_body_minmax", "src/isa/s390x/lower.isle line 3070"
    )
}

// Generated as internal constructor for term atomic_cas_body.
pub fn constructor_atomic_cas_body<C: Context>(
    ctx: &mut C,
    arg0: &VecMInstBuilder,
    arg1: Type,
    arg2: MemFlags,
    arg3: WritableReg,
    arg4: Reg,
    arg5: Reg,
    arg6: Reg,
) -> Reg {
    match arg1 {
        I8 => {
            let v11 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x28, 0x18);
            let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
            let v14 = constructor_push_break_if(ctx, arg0, v11, v13);
            let v16 = constructor_push_rxsbg(
                ctx,
                arg0,
                &RxSBGOp::Insert,
                arg3,
                arg4,
                arg6,
                0x20,
                0x28,
                0x18,
            );
            // Rule at src/isa/s390x/lower.isle line 3159.
            return v16;
        }
        I16 => {
            let v17 = C::bigendian(ctx, arg2);
            if let Some(v18) = v17 {
                let v21 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, arg5, 0x20, 0x30, 0x10);
                let v13 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v22 = constructor_push_break_if(ctx, arg0, v21, v13);
                let v23 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    arg6,
                    0x20,
                    0x30,
                    0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3166.
                return v23;
            }
            let v24 = C::littleendian(ctx, arg2);
            if let Some(v25) = v24 {
                let v27 = constructor_bswap_reg(ctx, I32, arg5);
                let v28 = constructor_bswap_reg(ctx, I32, arg6);
                let v31 = &constructor_rxsbg_test(ctx, &RxSBGOp::Xor, arg4, v27, 0x30, 0x40, -0x10);
                let v32 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
                let v33 = constructor_push_break_if(ctx, arg0, v31, v32);
                let v34 = constructor_push_rxsbg(
                    ctx,
                    arg0,
                    &RxSBGOp::Insert,
                    arg3,
                    arg4,
                    v28,
                    0x30,
                    0x40,
                    -0x10,
                );
                // Rule at src/isa/s390x/lower.isle line 3177.
                return v34;
            }
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "atomic_cas_body", "src/isa/s390x/lower.isle line 3152"
    )
}

// Generated as internal constructor for term atomic_store_impl.
pub fn constructor_atomic_store_impl<C: Context>(
    ctx: &mut C,
    arg0: &SideEffectNoResult,
) -> InstOutput {
    let v1 = constructor_side_effect(ctx, arg0);
    let v2 = &constructor_fence_impl(ctx);
    let v3 = constructor_side_effect(ctx, v2);
    // Rule at src/isa/s390x/lower.isle line 3223.
    return v3;
}

// Generated as internal constructor for term icmp_val.
pub fn constructor_icmp_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: &IntCC,
    arg2: Value,
    arg3: Value,
) -> ProducesBool {
    match arg1 {
        &IntCC::Equal => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v23 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                let v24 = &constructor_bool(ctx, v21, v23);
                // Rule at src/isa/s390x/lower.isle line 3369.
                return v24.clone();
            }
        }
        &IntCC::NotEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v21 = &constructor_vec_cmpeqs(ctx, I64X2, v19, v20);
                let v26 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                let v27 = &constructor_bool(ctx, v21, v26);
                // Rule at src/isa/s390x/lower.isle line 3372.
                return v27.clone();
            }
        }
        &IntCC::SignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3378.
                return v28.clone();
            }
        }
        &IntCC::SignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                let v32 = &constructor_invert_bool(ctx, v31);
                // Rule at src/isa/s390x/lower.isle line 3382.
                return v32.clone();
            }
        }
        &IntCC::SignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v31 = &constructor_vec_int128_scmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3380.
                return v31.clone();
            }
        }
        &IntCC::SignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v28 = &constructor_vec_int128_scmphi(ctx, v19, v20);
                let v33 = &constructor_invert_bool(ctx, v28);
                // Rule at src/isa/s390x/lower.isle line 3384.
                return v33.clone();
            }
        }
        &IntCC::UnsignedGreaterThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                // Rule at src/isa/s390x/lower.isle line 3389.
                return v34.clone();
            }
        }
        &IntCC::UnsignedGreaterThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                let v36 = &constructor_invert_bool(ctx, v35);
                // Rule at src/isa/s390x/lower.isle line 3393.
                return v36.clone();
            }
        }
        &IntCC::UnsignedLessThan => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v29 = C::put_in_reg(ctx, arg3);
                let v30 = C::put_in_reg(ctx, arg2);
                let v35 = &constructor_vec_int128_ucmphi(ctx, v29, v30);
                // Rule at src/isa/s390x/lower.isle line 3391.
                return v35.clone();
            }
        }
        &IntCC::UnsignedLessThanOrEqual => {
            let v5 = C::value_type(ctx, arg2);
            let v16 = C::vr128_ty(ctx, v5);
            if let Some(v17) = v16 {
                let v19 = C::put_in_reg(ctx, arg2);
                let v20 = C::put_in_reg(ctx, arg3);
                let v34 = &constructor_vec_int128_ucmphi(ctx, v19, v20);
                let v37 = &constructor_invert_bool(ctx, v34);
                // Rule at src/isa/s390x/lower.isle line 3395.
                return v37.clone();
            }
        }
        _ => {}
    }
    let v5 = C::value_type(ctx, arg2);
    let v6 = C::fits_in_64(ctx, v5);
    if let Some(v7) = v6 {
        let v2 = C::signed(ctx, arg1);
        if let Some(v3) = v2 {
            let v9 = &constructor_icmps_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v11 = &constructor_bool(ctx, v9, v10);
            // Rule at src/isa/s390x/lower.isle line 3290.
            return v11.clone();
        }
        let v12 = C::unsigned(ctx, arg1);
        if let Some(v13) = v12 {
            let v14 = &constructor_icmpu_val(ctx, arg0, arg2, arg3);
            let v10 = &C::intcc_as_cond(ctx, arg1);
            let v15 = &constructor_bool(ctx, v14, v10);
            // Rule at src/isa/s390x/lower.isle line 3293.
            return v15.clone();
        }
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmp_val", "src/isa/s390x/lower.isle line 3287"
    )
}

// Generated as internal constructor for term icmps_val.
pub fn constructor_icmps_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v28 = C::sinkable_inst(ctx, arg2);
            if let Some(v29) = v28 {
                let v30 = &C::inst_data(ctx, v29);
                if let &InstructionData::Load {
                    opcode: ref v31,
                    arg: v32,
                    flags: v33,
                    offset: v34,
                } = v30
                {
                    match v31 {
                        &Opcode::Load => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v25 = C::value_type(ctx, arg2);
                                if v25 == I16 {
                                    let v6 = constructor_ty_ext32(ctx, v4);
                                    let v7 = constructor_put_in_reg_sext32(ctx, arg1);
                                    let v39 = &constructor_sink_load(ctx, v29);
                                    let v40 = &constructor_icmps_mem_sext16(ctx, v6, v7, v39);
                                    // Rule at src/isa/s390x/lower.isle line 3319.
                                    return v40.clone();
                                }
                                let v26 = C::ty_32_or_64(ctx, v25);
                                if let Some(v27) = v26 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v37 = &constructor_sink_load(ctx, v29);
                                    let v38 = &constructor_icmps_mem(ctx, v4, v16, v37);
                                    // Rule at src/isa/s390x/lower.isle line 3315.
                                    return v38.clone();
                                }
                            }
                        }
                        &Opcode::Sload16 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v41 = &constructor_sink_sload16(ctx, v29);
                                let v42 = &constructor_icmps_mem_sext16(ctx, v4, v16, v41);
                                // Rule at src/isa/s390x/lower.isle line 3323.
                                return v42.clone();
                            }
                        }
                        &Opcode::Sload32 => {
                            let v35 = C::bigendian(ctx, v33);
                            if let Some(v36) = v35 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v43 = &constructor_sink_sload32(ctx, v29);
                                let v44 = &constructor_icmps_mem_sext32(ctx, v4, v16, v43);
                                // Rule at src/isa/s390x/lower.isle line 3325.
                                return v44.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Sextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmps_reg_sext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3305.
                        return v18.clone();
                    }
                }
            }
        }
        let v19 = C::i16_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v21 = &constructor_icmps_simm16(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3309.
            return v21.clone();
        }
        let v22 = C::i32_from_value(ctx, arg2);
        if let Some(v23) = v22 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_sext32(ctx, arg1);
            let v24 = &constructor_icmps_simm32(ctx, v6, v7, v23);
            // Rule at src/isa/s390x/lower.isle line 3311.
            return v24.clone();
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_sext32(ctx, arg1);
        let v8 = constructor_put_in_reg_sext32(ctx, arg2);
        let v9 = &constructor_icmps_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3301.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmps_val", "src/isa/s390x/lower.isle line 3298"
    )
}

// Generated as internal constructor for term icmpu_val.
pub fn constructor_icmpu_val<C: Context>(
    ctx: &mut C,
    arg0: bool,
    arg1: Value,
    arg2: Value,
) -> ProducesFlags {
    let v2 = C::value_type(ctx, arg1);
    let v3 = C::fits_in_64(ctx, v2);
    if let Some(v4) = v3 {
        if arg0 == true {
            let v25 = C::sinkable_inst(ctx, arg2);
            if let Some(v26) = v25 {
                let v27 = &C::inst_data(ctx, v26);
                if let &InstructionData::Load {
                    opcode: ref v28,
                    arg: v29,
                    flags: v30,
                    offset: v31,
                } = v27
                {
                    match v28 {
                        &Opcode::Load => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v22 = C::value_type(ctx, arg2);
                                let v23 = C::ty_32_or_64(ctx, v22);
                                if let Some(v24) = v23 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v34 = &constructor_sink_load(ctx, v26);
                                    let v35 = &constructor_icmpu_mem(ctx, v4, v16, v34);
                                    // Rule at src/isa/s390x/lower.isle line 3345.
                                    return v35.clone();
                                }
                                if v22 == I16 {
                                    let v36 = constructor_load_sym(ctx, v26);
                                    if let Some(v37) = v36 {
                                        let v6 = constructor_ty_ext32(ctx, v4);
                                        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
                                        let v38 = &constructor_sink_load(ctx, v37);
                                        let v39 = &constructor_icmpu_mem_zext16(ctx, v6, v7, v38);
                                        // Rule at src/isa/s390x/lower.isle line 3351.
                                        return v39.clone();
                                    }
                                }
                            }
                        }
                        &Opcode::Uload16 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v40 = constructor_uload16_sym(ctx, v26);
                                if let Some(v41) = v40 {
                                    let v16 = C::put_in_reg(ctx, arg1);
                                    let v42 = &constructor_sink_uload16(ctx, v41);
                                    let v43 = &constructor_icmpu_mem_zext16(ctx, v4, v16, v42);
                                    // Rule at src/isa/s390x/lower.isle line 3359.
                                    return v43.clone();
                                }
                            }
                        }
                        &Opcode::Uload32 => {
                            let v32 = C::bigendian(ctx, v30);
                            if let Some(v33) = v32 {
                                let v16 = C::put_in_reg(ctx, arg1);
                                let v44 = &constructor_sink_uload32(ctx, v26);
                                let v45 = &constructor_icmpu_mem_zext32(ctx, v4, v16, v44);
                                // Rule at src/isa/s390x/lower.isle line 3363.
                                return v45.clone();
                            }
                        }
                        _ => {}
                    }
                }
            }
        }
        let v19 = C::u32_from_value(ctx, arg2);
        if let Some(v20) = v19 {
            let v6 = constructor_ty_ext32(ctx, v4);
            let v7 = constructor_put_in_reg_zext32(ctx, arg1);
            let v21 = &constructor_icmpu_uimm32(ctx, v6, v7, v20);
            // Rule at src/isa/s390x/lower.isle line 3341.
            return v21.clone();
        }
        let v10 = C::def_inst(ctx, arg2);
        if let Some(v11) = v10 {
            let v12 = &C::inst_data(ctx, v11);
            if let &InstructionData::Unary {
                opcode: ref v13,
                arg: v14,
            } = v12
            {
                if let &Opcode::Uextend = v13 {
                    let v15 = C::value_type(ctx, v14);
                    if v15 == I32 {
                        let v16 = C::put_in_reg(ctx, arg1);
                        let v17 = C::put_in_reg(ctx, v14);
                        let v18 = &constructor_icmpu_reg_zext32(ctx, v4, v16, v17);
                        // Rule at src/isa/s390x/lower.isle line 3337.
                        return v18.clone();
                    }
                }
            }
        }
        let v6 = constructor_ty_ext32(ctx, v4);
        let v7 = constructor_put_in_reg_zext32(ctx, arg1);
        let v8 = constructor_put_in_reg_zext32(ctx, arg2);
        let v9 = &constructor_icmpu_reg(ctx, v6, v7, v8);
        // Rule at src/isa/s390x/lower.isle line 3333.
        return v9.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "icmpu_val", "src/isa/s390x/lower.isle line 3330"
    )
}

// Generated as internal constructor for term fcmp_val.
pub fn constructor_fcmp_val<C: Context>(
    ctx: &mut C,
    arg0: &FloatCC,
    arg1: Value,
    arg2: Value,
) -> ProducesBool {
    let v4 = C::put_in_reg(ctx, arg1);
    let v5 = C::put_in_reg(ctx, arg2);
    let v2 = C::value_type(ctx, arg1);
    let v6 = &constructor_fcmp_reg(ctx, v2, v4, v5);
    let v7 = &C::floatcc_as_cond(ctx, arg0);
    let v8 = &constructor_bool(ctx, v6, v7);
    // Rule at src/isa/s390x/lower.isle line 3433.
    return v8.clone();
}

// Generated as internal constructor for term vall_true_val.
pub fn constructor_vall_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3516.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3522.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3528.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3534.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3540.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3519.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3543.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3537.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3531.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3525.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3484.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3487.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3490.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3499.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3496.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3493.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3502.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3511.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Equal);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3508.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3505.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::Unordered);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3479.
    return v8.clone();
}

// Generated as internal constructor for term vany_true_val.
pub fn constructor_vany_true_val<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v9 = C::def_inst(ctx, arg0);
    if let Some(v10) = v9 {
        let v11 = C::first_result(ctx, v10);
        if let Some(v12) = v11 {
            let v14 = &C::inst_data(ctx, v10);
            match v14 {
                &InstructionData::FloatCompare {
                    opcode: ref v42,
                    args: ref v43,
                    cond: ref v44,
                } => {
                    if let &Opcode::Fcmp = v42 {
                        match v44 {
                            &FloatCC::Equal => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v51 = &constructor_bool(ctx, v50, v25);
                                // Rule at src/isa/s390x/lower.isle line 3594.
                                return v51.clone();
                            }
                            &FloatCC::GreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v54 = &constructor_bool(ctx, v53, v25);
                                // Rule at src/isa/s390x/lower.isle line 3600.
                                return v54.clone();
                            }
                            &FloatCC::GreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v57 = &constructor_bool(ctx, v56, v25);
                                // Rule at src/isa/s390x/lower.isle line 3606.
                                return v57.clone();
                            }
                            &FloatCC::LessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v62 = &constructor_bool(ctx, v61, v25);
                                // Rule at src/isa/s390x/lower.isle line 3612.
                                return v62.clone();
                            }
                            &FloatCC::LessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v65 = &constructor_bool(ctx, v64, v25);
                                // Rule at src/isa/s390x/lower.isle line 3618.
                                return v65.clone();
                            }
                            &FloatCC::NotEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v50 = &constructor_vec_fcmpeqs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v52 = &constructor_bool(ctx, v50, v7);
                                // Rule at src/isa/s390x/lower.isle line 3597.
                                return v52.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v64 = &constructor_vec_fcmphes(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v66 = &constructor_bool(ctx, v64, v7);
                                // Rule at src/isa/s390x/lower.isle line 3621.
                                return v66.clone();
                            }
                            &FloatCC::UnorderedOrGreaterThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v59 = C::put_in_reg(ctx, v45.1);
                                let v60 = C::put_in_reg(ctx, v45.0);
                                let v13 = C::value_type(ctx, v12);
                                let v61 = &constructor_vec_fcmphs(ctx, v13, v59, v60);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v63 = &constructor_bool(ctx, v61, v7);
                                // Rule at src/isa/s390x/lower.isle line 3615.
                                return v63.clone();
                            }
                            &FloatCC::UnorderedOrLessThan => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v56 = &constructor_vec_fcmphes(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v58 = &constructor_bool(ctx, v56, v7);
                                // Rule at src/isa/s390x/lower.isle line 3609.
                                return v58.clone();
                            }
                            &FloatCC::UnorderedOrLessThanOrEqual => {
                                let v45 = C::unpack_value_array_2(ctx, v43);
                                let v48 = C::put_in_reg(ctx, v45.0);
                                let v49 = C::put_in_reg(ctx, v45.1);
                                let v13 = C::value_type(ctx, v12);
                                let v53 = &constructor_vec_fcmphs(ctx, v13, v48, v49);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v55 = &constructor_bool(ctx, v53, v7);
                                // Rule at src/isa/s390x/lower.isle line 3603.
                                return v55.clone();
                            }
                            _ => {}
                        }
                    }
                }
                &InstructionData::IntCompare {
                    opcode: ref v15,
                    args: ref v16,
                    cond: ref v17,
                } => {
                    if let &Opcode::Icmp = v15 {
                        match v17 {
                            &IntCC::Equal => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v26 = &constructor_bool(ctx, v23, v25);
                                // Rule at src/isa/s390x/lower.isle line 3562.
                                return v26.clone();
                            }
                            &IntCC::NotEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v23 = &constructor_vec_cmpeqs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v27 = &constructor_bool(ctx, v23, v7);
                                // Rule at src/isa/s390x/lower.isle line 3565.
                                return v27.clone();
                            }
                            &IntCC::SignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v29 = &constructor_bool(ctx, v28, v25);
                                // Rule at src/isa/s390x/lower.isle line 3568.
                                return v29.clone();
                            }
                            &IntCC::SignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v35 = &constructor_bool(ctx, v33, v7);
                                // Rule at src/isa/s390x/lower.isle line 3577.
                                return v35.clone();
                            }
                            &IntCC::SignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v33 = &constructor_vec_cmphs(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v34 = &constructor_bool(ctx, v33, v25);
                                // Rule at src/isa/s390x/lower.isle line 3574.
                                return v34.clone();
                            }
                            &IntCC::SignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v28 = &constructor_vec_cmphs(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v30 = &constructor_bool(ctx, v28, v7);
                                // Rule at src/isa/s390x/lower.isle line 3571.
                                return v30.clone();
                            }
                            &IntCC::UnsignedGreaterThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v37 = &constructor_bool(ctx, v36, v25);
                                // Rule at src/isa/s390x/lower.isle line 3580.
                                return v37.clone();
                            }
                            &IntCC::UnsignedGreaterThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v41 = &constructor_bool(ctx, v39, v7);
                                // Rule at src/isa/s390x/lower.isle line 3589.
                                return v41.clone();
                            }
                            &IntCC::UnsignedLessThan => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v31 = C::put_in_reg(ctx, v18.1);
                                let v32 = C::put_in_reg(ctx, v18.0);
                                let v13 = C::value_type(ctx, v12);
                                let v39 = &constructor_vec_cmphls(ctx, v13, v31, v32);
                                let v25 = &C::floatcc_as_cond(ctx, &FloatCC::Ordered);
                                let v40 = &constructor_bool(ctx, v39, v25);
                                // Rule at src/isa/s390x/lower.isle line 3586.
                                return v40.clone();
                            }
                            &IntCC::UnsignedLessThanOrEqual => {
                                let v18 = C::unpack_value_array_2(ctx, v16);
                                let v21 = C::put_in_reg(ctx, v18.0);
                                let v22 = C::put_in_reg(ctx, v18.1);
                                let v13 = C::value_type(ctx, v12);
                                let v36 = &constructor_vec_cmphls(ctx, v13, v21, v22);
                                let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
                                let v38 = &constructor_bool(ctx, v36, v7);
                                // Rule at src/isa/s390x/lower.isle line 3583.
                                return v38.clone();
                            }
                            _ => {}
                        }
                    }
                }
                _ => {}
            }
        }
    }
    let v2 = C::put_in_reg(ctx, arg0);
    let v1 = C::value_type(ctx, arg0);
    let v4 = constructor_vec_imm(ctx, v1, 0x0);
    let v5 = &constructor_vec_cmpeqs(ctx, v1, v2, v4);
    let v7 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
    let v8 = &constructor_bool(ctx, v5, v7);
    // Rule at src/isa/s390x/lower.isle line 3557.
    return v8.clone();
}

// Generated as internal constructor for term value_nonzero.
pub fn constructor_value_nonzero<C: Context>(ctx: &mut C, arg0: Value) -> ProducesBool {
    let v1 = C::def_inst(ctx, arg0);
    if let Some(v2) = v1 {
        let v3 = &C::inst_data(ctx, v2);
        match v3 {
            &InstructionData::FloatCompare {
                opcode: ref v12,
                args: ref v13,
                cond: ref v14,
            } => {
                if let &Opcode::Fcmp = v12 {
                    let v15 = C::unpack_value_array_2(ctx, v13);
                    let v18 = &constructor_fcmp_val(ctx, v14, v15.0, v15.1);
                    // Rule at src/isa/s390x/lower.isle line 3681.
                    return v18.clone();
                }
            }
            &InstructionData::IntCompare {
                opcode: ref v4,
                args: ref v5,
                cond: ref v6,
            } => {
                if let &Opcode::Icmp = v4 {
                    let v7 = C::unpack_value_array_2(ctx, v5);
                    let v11 = &constructor_icmp_val(ctx, false, v6, v7.0, v7.1);
                    // Rule at src/isa/s390x/lower.isle line 3680.
                    return v11.clone();
                }
            }
            _ => {}
        }
    }
    let v19 = C::value_type(ctx, arg0);
    let v20 = C::gpr32_ty(ctx, v19);
    if let Some(v21) = v20 {
        let v23 = constructor_put_in_reg_sext32(ctx, arg0);
        let v25 = &constructor_icmps_simm16(ctx, I32, v23, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v28 = &constructor_bool(ctx, v25, v27);
        // Rule at src/isa/s390x/lower.isle line 3682.
        return v28.clone();
    }
    let v29 = C::gpr64_ty(ctx, v19);
    if let Some(v30) = v29 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v33 = &constructor_icmps_simm16(ctx, I64, v32, 0x0);
        let v27 = &C::intcc_as_cond(ctx, &IntCC::NotEqual);
        let v34 = &constructor_bool(ctx, v33, v27);
        // Rule at src/isa/s390x/lower.isle line 3685.
        return v34.clone();
    }
    let v35 = C::vr128_ty(ctx, v19);
    if let Some(v36) = v35 {
        let v32 = C::put_in_reg(ctx, arg0);
        let v39 = constructor_vec_imm(ctx, I64X2, 0x0);
        let v40 = &constructor_vec_cmpeqs(ctx, I64X2, v32, v39);
        let v42 = &C::floatcc_as_cond(ctx, &FloatCC::NotEqual);
        let v43 = &constructor_bool(ctx, v40, v42);
        // Rule at src/isa/s390x/lower.isle line 3688.
        return v43.clone();
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "value_nonzero", "src/isa/s390x/lower.isle line 3679"
    )
}

// Generated as internal constructor for term lower_call_args.
pub fn constructor_lower_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = &C::abi_call_stack_args(ctx, arg0);
    let v5 = constructor_lower_call_args_buffer(ctx, arg0, v4, arg1, arg2);
    let v6 = constructor_lower_call_args_slots(ctx, arg0, v3, v4, arg1, arg2);
    let v7 = constructor_lower_call_ret_arg(ctx, arg0, v3, v4);
    let v8 = &C::args_builder_finish(ctx, v3);
    // Rule at src/isa/s390x/lower.isle line 3894.
    return v8.clone();
}

// Generated as internal constructor for term lower_call_rets.
pub fn constructor_lower_call_rets<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallRetList,
    arg2: Range,
    arg3: &InstOutputBuilder,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_builder_finish(ctx, arg3);
            // Rule at src/isa/s390x/lower.isle line 3904.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_lane_order(ctx, arg0);
            let v9 = &C::abi_call_stack_rets(ctx, arg0);
            let v10 = &C::abi_get_ret(ctx, arg0, v6);
            let v11 = constructor_copy_from_arg(ctx, arg1, v8, v9, v10);
            let v12 = C::output_builder_push(ctx, arg3, v11);
            let v13 = constructor_lower_call_rets(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3905.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_rets", "src/isa/s390x/lower.isle line 3903"
    )
}

// Generated as internal constructor for term lower_return_call_args.
pub fn constructor_lower_return_call_args<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: Range,
    arg2: ValueSlice,
) -> CallArgList {
    let v3 = &C::args_builder_new(ctx);
    let v4 = &C::abi_return_call_stack_args(ctx, arg0);
    let v5 = constructor_lower_call_args_buffer(ctx, arg0, v4, arg1, arg2);
    let v6 = constructor_lower_call_args_slots(ctx, arg0, v3, v4, arg1, arg2);
    let v7 = constructor_lower_return_call_ret_arg(ctx, arg0, v3, v4);
    let v8 = &C::args_builder_finish(ctx, v3);
    // Rule at src/isa/s390x/lower.isle line 3937.
    return v8.clone();
}

// Generated as internal constructor for term lower_call_args_buffer.
pub fn constructor_lower_call_args_buffer<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &MemArg,
    arg2: Range,
    arg3: ValueSlice,
) -> InstOutput {
    let v3 = &C::range_view(ctx, arg2);
    match v3 {
        &RangeView::Empty => {
            let v5 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3950.
            return v5;
        }
        &RangeView::NonEmpty {
            index: v6,
            rest: v7,
        } => {
            let v8 = &C::abi_get_arg(ctx, arg0, v6);
            let v9 = C::value_slice_get(ctx, arg3, v6);
            let v10 = constructor_copy_to_buffer(ctx, arg1, v8, v9);
            let v11 = constructor_lower_call_args_buffer(ctx, arg0, arg1, v7, arg3);
            // Rule at src/isa/s390x/lower.isle line 3951.
            return v11;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_buffer", "src/isa/s390x/lower.isle line 3949"
    )
}

// Generated as internal constructor for term lower_call_args_slots.
pub fn constructor_lower_call_args_slots<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
    arg3: Range,
    arg4: ValueSlice,
) -> InstOutput {
    let v4 = &C::range_view(ctx, arg3);
    match v4 {
        &RangeView::Empty => {
            let v6 = C::output_none(ctx);
            // Rule at src/isa/s390x/lower.isle line 3958.
            return v6;
        }
        &RangeView::NonEmpty {
            index: v7,
            rest: v8,
        } => {
            let v9 = &C::abi_lane_order(ctx, arg0);
            let v10 = &C::abi_get_arg(ctx, arg0, v7);
            let v11 = C::value_slice_get(ctx, arg4, v7);
            let v12 = constructor_copy_to_arg(ctx, arg1, v9, arg2, v10, v11);
            let v13 = constructor_lower_call_args_slots(ctx, arg0, arg1, arg2, v8, arg4);
            // Rule at src/isa/s390x/lower.isle line 3959.
            return v13;
        }
        _ => {}
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_args_slots", "src/isa/s390x/lower.isle line 3957"
    )
}

// Generated as internal constructor for term lower_call_ret_arg.
pub fn constructor_lower_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
) -> InstOutput {
    let v6 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = &C::abi_arg_only_slot(ctx, v7);
        if let Some(v9) = v8 {
            let v10 = &C::abi_lane_order(ctx, arg0);
            let v11 = &C::abi_call_stack_rets(ctx, arg0);
            let v12 = constructor_load_addr(ctx, v11);
            let v13 = constructor_copy_reg_to_arg_slot(ctx, arg1, v10, arg2, v9, v12);
            // Rule at src/isa/s390x/lower.isle line 3968.
            return v13;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::output_none(ctx);
        // Rule at src/isa/s390x/lower.isle line 3967.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_call_ret_arg", "src/isa/s390x/lower.isle line 3966"
    )
}

// Generated as internal constructor for term lower_return_call_ret_arg.
pub fn constructor_lower_return_call_ret_arg<C: Context>(
    ctx: &mut C,
    arg0: Sig,
    arg1: &CallArgListBuilder,
    arg2: &MemArg,
) -> InstOutput {
    let v6 = &C::abi_ret_arg(ctx, arg0);
    if let Some(v7) = v6 {
        let v8 = &C::abi_arg_only_slot(ctx, v7);
        if let Some(v9) = v8 {
            let v10 = &C::abi_lane_order(ctx, arg0);
            let v11 = C::abi_unwrap_ret_area_ptr(ctx);
            let v12 = constructor_copy_reg_to_arg_slot(ctx, arg1, v10, arg2, v9, v11);
            // Rule at src/isa/s390x/lower.isle line 3975.
            return v12;
        }
    }
    let v1 = C::abi_no_ret_arg(ctx, arg0);
    if let Some(v2) = v1 {
        let v5 = C::output_none(ctx);
        // Rule at src/isa/s390x/lower.isle line 3974.
        return v5;
    }
    unreachable!(
        "no rule matched for term {} at {}; should it be partial?",
        "lower_return_call_ret_arg", "src/isa/s390x/lower.isle line 3973"
    )
}
